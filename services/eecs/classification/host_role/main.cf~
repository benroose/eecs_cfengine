###############################################################################
#
#   classification/host_role/main.cf - EECS role classifications
#   Maintained: Ben Roose, ver 0.2
#
###############################################################################

## CLASSES AND ROLES BUNDLES

bundle common classify_host_role
# @description: define the role of the host and whether host is a server or workstation
{
  vars:
    # Be cautious here, readjson function expects CRLF (dos) line endings per RFC4180
    "role_data"
      data => readjson("$(this.promise_dirname)/server_roles.json",3k),
      comment => "We use external data for server identification so it's easier for other people or
                  automated processes to update the data.";
    
    "roles" slist => getindices( role_data );

    "json_str" string => format("%S", role_data);
    	       	         # Just for printing seralized version of data container for debugging (note its JSON).

  classes:
    
    "$(roles)"
      expression => "$(role_data[$(roles)])",
      meta => { "derived-from=sys.host,hardclass" },
      meta => { "inventory", "attribute_name=Role Class" },
      comment => "If host name is found in server_roles.json file, then add its specific server role.";

    "lock_var"
      expression => isvariable("roles"),
      comment => "allowing for roles variable to be defined before checking on the workstation class promise";

    "server"
      expression => "$(roles)",
        ifvarclass => "lock_var",
      meta => { "derived-from=$(roles)+sys.host,hardclass" },
      comment => "If host name is found in server_roles.json file and role is defined, then add it to server class.";

      
    "workstation"
      not => "$(roles)",
        ifvarclass => "lock_var",
      meta => { "derived-from=sys.host,hardclass" },
      comment => "(default) If role is not defined, then it is (likely) a client workstation and not a server.";
      
  reports:

    # It's good practice to guard your reports. If you don't it will cause much
    # noise. By convention I use DEBUG and DEBUG_bundlename to guard reports so
    # that I can easily run the poilicy and get policy debug reports for either
    # the whole policy, or just a specific bundle.

    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_host_roles)::
      "$(this.bundle): Found role $(roles)";
     # "I want the class '$(roles)' to be defined if the expression '$(role_data[$(roles)])' is defined";
     # "Contents of 'json_input' data container: '$(json_str)'";

    (DEBUG|DEBUG_host_roles).server::
      "$(this.bundle): Host found in server_roles.json, so server class defined";

    (DEBUG|DEBUG_host_roles).workstation::
      "$(this.bundle): Host not found in server_roles.json, so workstation class defined by default";
}

bundle common classify_administrator
# @description: define the administrator of the host, EECS sysadmin or end user.
{
  vars:
    # Be cautious here, readjson function expects CRLF (dos) line endings per RFC4180
    "admin_data"
      data => readjson("$(this.promise_dirname)/user_admin_hosts.json",3k),
      comment => "We use external data for an exception list of the hosts administrated by end users.";
    
    "hosts" slist => getindices( admin_data );

    "json_str" string => format("%S", admin_data);
    	       	         # Just for printing seralized version of data container for debugging (note its JSON).

  classes:
    
    "lock_var"
      expression => isvariable("hosts"),
      comment => "allowing for hosts variable to be defined before checking on the sysadmin class promise";
      
    "enduser"
      expression => "$(hosts)",
        ifvarclass => "lock_var",
      meta => { "derived-from=sys.host,hardclass" },
      comment => "If host name is found in user_admin_hosts.json file, then define end_user class for this host.";

    "sysadmin"
      not => "enduser",
      ifvarclass => "lock_var",
      meta => { "derived-from=sys.host,hardclass" },
      comment => "(default) If enduser is not defined, then host must be administrated by sysadmin.";


  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
      
    (DEBUG|DEBUG_admin_config)::
      "$(this.bundle): Found host $(hosts)";
      #"I want the class '$(hosts)' to be defined if the expression '$(admin_data[$(roles)])' is defined";
      #"Contents of 'json_input' data container: '$(json_str)'";

    (DEBUG|DEBUG_admin_config).enduser::
      "$(this.bundle): Host found in user_admin_hosts.json, so enduser class defined";

    (DEBUG|DEBUG_admin_config).sysadmin::
      "$(this.bundle): Host not found in user_admin_hosts.json, so sysadmin class defined by default";
}
