##############################################################################
#
#   scheduler/main.cf - EECS scheduling (cron) configuration
#   Maintained: Ben Roose, ver 0.2
#
###############################################################################



# PROTIP: Use body file control to help make modular policy.
# "There can be only one" body common control per policy entry (promises.cf,update.cf)

# TESTING ONLY:INPUT STANDARD LIBRARY and HOST CLASSIFICATION (Remove after testing)
#body file control
# {
#       inputs => { "$(sys.libdir)/stdlib.cf",
# 		  "$(sys.workdir)/inputs/services/eecs/classification/host_role/main.cf" };
# }

######################################################################
# Public entry point: 
######################################################################

# NOTES for future development of configuration:
# 1.


bundle common cron_scheduler
# @description: use cfengine as an alternative scheduler to cron by setting global classes based on time
{
  vars:
      "20m_after_system_creation" string => eval( "$(global.system_creation_time) + (20 * 60)", "math", "infix" ),
      comment => "add 20 minutes in seconds to the unix epoch time set when host system was first created";
      
      # "3hr_after_system_creation" string => eval( "$(global.system_creation_time) + (180 * 60)", "math", "infix" ),
      # comment => "add 3 hours in seconds to the unix epoch time set when host system was first created";

  classes:
      # TIME PERIODS (medical abbreviations used)
      "Q3H" or => { "Hr00", "Hr03", "Hr06", "Hr09", "Hr12", "Hr15", "Hr18", "Hr21", };
      "Q6H" or => { "Hr00", "Hr06", "Hr12", "Hr18", };
      "Q6H_NIGHT_ONLY" or => { "Hr00", "Hr06", };
      "Q15M" or => { "Min00_05", "Min15_20", "Min30_35", "Min45_50", };

      # UPTIME PERIODS (defined in minutes)
      "UP_LESS_1HR" expression => eval( "$(sys.uptime) < 60", "class", "infix" );
      # "UP_LESS_1DY" expression => eval( "$(sys.uptime) < 1440", "class", "infix" );
      "UP_MORE_1DY" expression => eval( "$(sys.uptime) > 1500", "class", "infix" );
      # "UP_MORE_1WK" expression => eval( "$(sys.uptime) > 10080", "class", "infix" );
      
      
      # DEFINE JOBS
      # "install_software" and => { "any", };

      "update_user_lists" and => { "Hr05", "Min00_05", "guac_gateway", },
      comment => "update user lists and add/remove users on guacamole gateways every morning at 5am";

      "install_software" and => { "Q6H", "Min00_05", },
      comment => "install/update software at start of every 6 hours only if system load is low (removed)";

      "ssl_cert_renew" and => { "Q1", "Hr02", "Monday", "certbot_exists", },
      comment => "run a web_server certbot ssl renewal check each Monday at 2am if certbot is installed on system";

      "run_uaf2_client" and => { "Q15M", "uaf2_client", },
      comment => "run Tom's uaf2_client to update users every 15 minutes only if installed and system load is low";

      "run_uaf2_client" and => { "UP_LESS_1HR", },
      comment => "run Tom's uaf2_client to update users within first hour since system last boot";
      
      "reboot_allowed" expression => "Hr02",
      comment => "allow for system auto reboot at 2am only";

      "reboot_node_now" and => { "Hr02", splayclass("$(sys.host)$(sys.ipv4)","hourly"), },
      comment => "allow for node auto reboot every night sometime between 2am and 3am";

      "FORCE_NODE_REBOOT" and => { "UP_MORE_1DY", "Hr04", },
      comment => "node failed to reboot earlier in night, so force node to reboot when reboot_node_now is set and the reboot command is run";

      ## NOT WORKING - JUST KEEPS REBOOTING
      # "reboot_20m_after_host_creation" expression => eval( "$(sys.systime) < $(20m_after_system_creation)","class", "infix" ),
      # ifvarclass => "Q15M",
      # comment => "enable a full system reboot within the timeframe of 10-25 mins after system creation
      #             NOTE: this class must be activated in manage/main.cf for a specific machine type";

      "install_software" expression => eval( "$(sys.systime) < $(20m_after_system_creation)", "class", "infix" ),
      comment => "install/update software within the first 20 mins after system creation";

      # "install_software" or => { "UP_LESS_1HR", },
      # comment => "install/update software within the first hour since system last boot";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_config)::
      "=== $(this.bundle) ===";
}

######################################################################
