##############################################################################
#
#   manage/emacs_server/main.cf - EECS emacs as a service configuration
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################



# PROTIP: Use body file control to help make modular policy.
# "There can be only one" body common control per policy entry (promises.cf,update.cf)

# TESTING ONLY:INPUT STANDARD LIBRARY and HOST CLASSIFICATION (Remove after testing)
body file control
{
      inputs => { "$(sys.libdir)/stdlib.cf",
		  "$(sys.workdir)/inputs/services/eecs/classification/host_role/main.cf" };
}

######################################################################
# Public entry point: emacs_server(on) OR emacs_server(off)
######################################################################

# NOTES for future development of configuration:
# 1.

######################################################################

# bundle agent emacs_server
bundle agent emacs_server(state)
# @description: run emacs daemon as a service
{
  vars:      
      "emacs_exec" string => "/usr/bin/emacs";

  classes:
      # DEFINE SERVER STATES
      # "on"  expression => "any";
      "on"  expression => strcmp("$(state)","on");
      "off" expression => strcmp("$(state)","off");

      "emacs_exists"
	expression => fileexists( "$(emacs_exec)" );

  methods:

    off.emacs_exists::
      "ensure service is stopped if emacs_server is off"
      	usebundle => standard_services( "emacs", "stop" ),
      	classes => if_ok("emacs_server_off");

    ## ENSURE SERVICES ARE RUNNING AND CONFIGURED
    on.emacs_exists::
      "ensure service is running if emacs_server is on"
      	usebundle => standard_services( "emacs", "start" ),
      	classes => if_ok("emacs_server_on");

      "generate all emacs server variables"  usebundle => emacs_server_vars;
      
    on.emacs_repaired::
      "restart emacs service after configuration"
      	usebundle => standard_services( "emacs", "restart" ),
      	classes => if_ok("emacs_server_restart");

    ## INSTALL ALL SOFTWARE FOR EMACS SERVER
    on.install_software::
      "generate all emacs server variables"  usebundle => emacs_server_vars;

      "install dependent packages"
    	usebundle => package_latest("$(emacs_server_vars.dependent_packages)"),
        classes => results("bundle", "dependent_packages_install");

      "install emacs daemon as a service"
    	usebundle => install_emacs_service("emacs_server_vars"),
        classes => results("bundle", "install_emacs_service");
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_emacs_server)::
      "=== $(this.bundle) ===";

      "emacs server is not installed on this host"
        ifvarclass => "!emacs_exists";
      "emacs server is turned off"
        ifvarclass => "emacs_server_off";
      "emacs server is turned on and running"
        ifvarclass => "emacs_server_on";
      "emacs server restarted due to configuration change"
        ifvarclass => "emacs_server_restart";
      "$(emacs_server_vars.dependent_packages) installed"
        ifvarclass => "dependent_packages_install_repaired";
}

######################################################################

bundle agent emacs_server_vars
{
  vars:

    ## INSTALL PARAMETERS FOR ALL SOFTWARE
    debian::
      "dependent_packages" slist => { "emacs", },
        comment => "set of packages required for server";

      "emacs_exec" string => "/usr/bin/emacs";
      "emacsclient_exec" string => "/usr/bin/emacsclient";

      "emacs_service_file" string => "/etc/systemd/system/emacs.service";
      "emacs_service_template" string => "$(this.promise_dirname)/data/emacs.service.mustache";
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
}

######################################################################

bundle agent install_emacs_service(params)
# @description: install and configure emacs as a service
{
  vars:
      "daemon_reload_cmd" string => "/bin/systemctl daemon-reload";
      
  files:
      "$($(params).emacs_service_file)"
        create => "true",
        perms => mog("644","root", "root"),
        template_method => "mustache",
        edit_template => "$($(params).emacs_service_template)",
      # action => if_elapsed("60"),
        classes => results("bundle", "service_file"),
        comment => "expand systemd service file to /etc/systemd/system using template in this promise directory";

  commands:
    service_file_repair::
      "$(daemon_reload_cmd)"
        classes => results("bundle", "daemon_reload"),
        comment => "reload systemctl with new service file";
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_config)::
      "=== $(this.bundle) ===";

      # "$($(params).local_sbin_dir)/$(emacs_file) installed"
      #   ifvarclass => "emacs_install_repaired";      
}

######################################################################
