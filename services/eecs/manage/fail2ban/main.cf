##############################################################################
#
#   manage/fail2ban/main.cf - EECS fail2ban configuration
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################

# PROTIP: Use body file control to help make modular policy.
# "There can be only one" body common control per policy entry (promises.cf,update.cf)

# TESTING ONLY:INPUT STANDARD LIBRARY and HOST CLASSIFICATION (Remove after testing)
body file control
{
      inputs => { "$(sys.libdir)/stdlib.cf",
		  "$(sys.workdir)/inputs/services/eecs/classification/host_role/main.cf" };
}

######################################################################
# Public entry points: fail2ban_server(on) OR fail2ban_server(off)
######################################################################

# NOTES for future development of configuration:
# 1.

######################################################################

# bundle agent fail2ban_server
bundle agent fail2ban_server(state)
# @description: installs and configures fail2ban server with defined configuration using mustache templates
# NOTE: uses the CFE service state on/off for enabling configuration!!
{
  vars:      
      "fail2ban_exec" string => "/usr/bin/fail2ban-client";

  classes:
      # DEFINE SERVER STATES
      # "on"  expression => "any";
      "on"  expression => strcmp("$(state)","on");
      "off" expression => strcmp("$(state)","off");

      "fail2ban_exists"
	expression => fileexists( "$(fail2ban_exec)" );

  methods:

    off.fail2ban_exists::
      "ensure service is stopped if fail2ban_server is off"
      	usebundle => standard_services( "fail2ban", "stop" ),
      	classes => if_ok("fail2ban_server_off");

    ## ENSURE SERVICES ARE RUNNING AND CONFIGURED
    on.fail2ban_exists::
      "ensure service is running if fail2ban_server is on"
      	usebundle => standard_services( "fail2ban", "start" ),
      	classes => if_ok("fail2ban_server_on");

      "generate all fail2ban server variables"  usebundle => fail2ban_server_vars;
      
      "copy fail2ban_config files from mustache templates"
    	usebundle => config_fail2ban_server( "fail2ban_server_vars" ),
        classes => results("bundle", "fail2ban_config");

    on.fail2ban_config_repaired::
      "restart fail2ban service after configuration"
      	usebundle => standard_services( "fail2ban", "restart" ),
      	classes => if_ok("fail2ban_server_restart");

    ## INSTALL ALL SOFTWARE FOR FAIL2BAN SERVER
    on.install_software::
      "generate all fail2ban server variables"  usebundle => fail2ban_server_vars;

      "install dependent packages"
    	usebundle => package_latest("$(fail2ban_server_vars.dependent_packages)"),
        classes => results("bundle", "dependent_packages_install");

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_fail2ban_server)::
      "=== $(this.bundle) ===";

      "fail2ban server is not installed on this host"
        ifvarclass => "!fail2ban_exists";
      "fail2ban server is turned off"
        ifvarclass => "fail2ban_server_off";
      "fail2ban server is turned on and running"
        ifvarclass => "fail2ban_server_on";
      # "fail2ban configuration repaired"
      #   ifvarclass => "fail2ban_config_repaired";
      # "fail2ban configuration kept"
      #   ifvarclass => "fail2ban_config_kept";
      "fail2ban server restarted due to configuration change"
        ifvarclass => "fail2ban_server_restart";
      "$(fail2ban_server_vars.dependent_packages) installed"
        ifvarclass => "dependent_packages_install_repaired";
}

######################################################################

bundle agent fail2ban_server_vars
{
  vars:

    ## INSTALL PARAMETERS FOR ALL SOFTWARE
    debian::
      "dependent_packages" slist => { "fail2ban", },
        comment => "set of packages required for server";
    redhat::
      "dependent_packages" slist => { "fail2ban", },
        comment => "set of packages required for server";

    ## FILE PARAMETERS
    any::
      "fail2ban_config_file" string => "/etc/fail2ban/fail2ban.local";
      "fail2ban_config_cache" string => "$(sys.workdir)/state/security/fail2ban_config.local";
      "fail2ban_config_template" string => "$(this.promise_dirname)/data/fail2ban_local.mustache";
      "jail_config_file" string => "/etc/fail2ban/jail.local";
      "jail_config_cache" string => "$(sys.workdir)/state/security/fail2ban_jail.local";
      "jail_config_template" string => "$(this.promise_dirname)/data/jail_local.mustache";

      "guacamole_filter_file" string => "/etc/fail2ban/filter.d/guacamole.conf";
      "guacamole_filter_template" string => "$(this.promise_dirname)/data/filter_guacamole.mustache";

    ## FAIL2BAN_CONFIG 
    any::
      "config[loglevel]"      string => "INFO";
      "config[logtarget]"     string => "SYSLOG";

    ## GLOBAL/DEFAULT_CONFIG IN /etc/fail2ban/jail.local
    any::
      "default[ignoreip]"      string => "127.0.0.1/8,172.0.0.0/8",
      comment => "can be an IP address, a CIDR mask or a DNS host. Fail2ban will not ban a host which matches an address in this list. Several addresses can be defined using space or comma separator. ignoring localhost and WSU on-site labs";
      "default[bantime]"       string => "600",
      comment => "number of seconds that a host is banned.";
            "default[findtime]"       string => "600",
      comment => "host is banned if it has generated maxretry during the last findtime seconds.";
      "default[maxretry]"      string => "5",
      comment => "number of failures before a host get banned";
      "default[action]"       string => "%(action_mw)s",
      comment => "default action, override value of 'action' with the interpolation to the chosen action shortcut (e.g.  action_, action_mw, action_mwl, etc) or can add overrides for specific jails (must modify jail_local.mustache file too)";
      
    ## SPECIFIC JAILS IN /etc/fail2ban/jail.local
    any::
      "jail[ssh_enable]"       string => "true";
      "jail[ssh_ddos_enable]"  string => "true";

    guac_gateway::
      "jail[guacamole_enable]"  string => "true",
      comment => "enable the guacamole/tomcat8 jail only if host is defined as a guac_gateway";
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
}

######################################################################

bundle agent config_fail2ban_server(params)
# @description: create cache file and then configure /etc/fail2ban files if cache file passes validation check
{
  vars:  
      "config_file" string => "$($(params).fail2ban_config_file)";
      "config_cache" string => "$($(params).fail2ban_config_cache)";
      "config_template_file" string => "$($(params).fail2ban_config_template)";
      "jail_file" string => "$($(params).jail_config_file)";
      "jail_cache" string => "$($(params).jail_config_cache)";
      "jail_template_file" string => "$($(params).jail_config_template)";
      "config_cache_dir" string => dirname( "$($(params).jail_config_cache)" );

      "filter_files" slist => { "$($(params).guacamole_filter_file)" };
      "filter_templates" slist => { "$($(params).guacamole_filter_template)" };

      # "config_cache" string => "$($(params).fail2ban_config_cache)";
      # "config_cache_dir" string => dirname( "$($(params).fail2ban_config_cache)" );

      # "fail2ban_chk_cmd" string => "/usr/sbin/fail2ban -t -f ",
      # comment => "-t = config validation test-mode -q = quiet mode -f = fail2ban_config file location";

  classes:
      "have_cached_config"
      	and => { fileexists( $(jail_cache) ), fileexists( $(jail_cache) ) };

      # "fail2ban_check_passed"
      #   expression => returnszero( "$(fail2ban_chk_cmd) $(config_cache)", "useshell" ),
      #   ifvarclass => "have_cached_config";

      # "fail2ban_check_failed"
      #   not => returnszero( "$(fail2ban_chk_cmd) $(config_cache)", "useshell" ),
      # 	ifvarclass => "have_cached_config";
       
  files:
      "$(config_cache_dir)/."
	create => "true",
        comment => "ensure the cache directory exists";

      "$(config_cache)"
        create => "true",
	perms => mog("400","root", "root"),
        template_method => "mustache",
        edit_template => "$(config_template_file)",
	# action => if_elapsed("60"),
        # classes => results("bundle", "config_file"),
        comment => "expand config cache using template in this promise directory";

      "$(jail_cache)"
        create => "true",
	perms => mog("400","root", "root"),
        template_method => "mustache",
        edit_template => "$(jail_template_file)",
	# action => if_elapsed("60"),
        # classes => results("bundle", "jail_file"),
        comment => "expand jail cache using template in this promise directory";

      "$(filter_files)"
        create => "true",
        template_method => "mustache",
        edit_template => "$(filter_templates)",
	# action => if_elapsed("60"),
        classes => results("bundle", "filter_files"),
        comment => "expand any custom filter.d files using templates in this promise directory";

    have_cached_config::
      "$(config_file)"
      	copy_from => local_dcp( "$(config_cache)" ),
      	perms => mog( "444","root","root" ),
        classes => results("bundle", "config_file"),
      	comment => "copy config file from local staging cache and ensure correct permissions ONLY if validated";

      "$(jail_file)"
      	copy_from => local_dcp( "$(jail_cache)" ),
      	perms => mog( "444","root","root" ),
        classes => results("bundle", "jail_file"),
      	comment => "copy jail file from local staging cache and ensure correct permissions ONLY if validated";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_ssh)::
      "=== $(this.bundle) ===";

      # "cached fail2ban_config passed validation check"
      # 	ifvarclass => "fail2ban_check_passed";
      # "cached fail2ban_config failed validation check and will not be copied to $(config_file)"
      # 	ifvarclass => "fail2ban_check_failed";

      "$(config_file) copied to system"
	ifvarclass => "config_file_repaired";
      "$(config_file) exists on system"
	ifvarclass => "config_file_kept";
      "$(jail_file) copied to system"
	ifvarclass => "jail_file_repaired";
      "$(jail_file) exists on system"
	ifvarclass => "jail_file_kept";
      "$(filter_files) copied to system"
	ifvarclass => "filter_files_repaired";
}

########################################################
