##############################################################################
#
#   manage/packages/main.cf - EECS packages management
#   Maintained: Ben Roose, ver 0.4
#
###############################################################################



# PROTIP: Use body file control to help make modular policy.
# "There can be only one" body common control per policy entry (promises.cf,update.cf)

# TESTING ONLY:INPUT STANDARD LIBRARY (Remove after testing)
body file control
{
      inputs => { "$(sys.libdir)/stdlib.cf" };
}

######################################################################
# Public entry point: manage_packages bundle
######################################################################

# NOTES for future development of configuration:
# 1. move the installs/removals lists into an external json file
# 2. enable a method to specify one-off package installation within the classification hosts roles json file
# 3. figure out how to upgrade the Linux kernel and security packages from the package management end

bundle agent manage_packages
# @description: package management entry point
{

  methods:
    any::
      "manage standard repository packages" usebundle => manage_repository_packages;

    install_custom_packages::
      "manage custom installer packages" usebundle => manage_custom_packages;
      
}


bundle agent manage_repository_packages
# @description: package management using standard repositories (i.e. apt) for hosts classified by: core (all hosts), workstation only packages, server only packages. Allows for software installation (package_latest) and removal (package_absent)
{

  vars:
     "extra_installs" slist => {},
      policy => "overridable";
     "core_installs" slist => {},
      policy => "overridable";
     "workstation_installs" slist => {},
      policy => "overridable";
     "server_installs" slist => {},
      policy => "overridable";
     "core_removals" slist => {},
      policy => "overridable";
     "workstation_removals" slist => {},
      policy => "overridable";
     "server_removals" slist => {},
      policy => "overridable";

    ## Required packages to be INSTALLED
    install_extra_packages::
      "extra_installs" slist => getvalues( "classify_host.extra_packages" );
      "packages_json_str" string => format("%S", "classify_host.extra_packages");

    debian|ubuntu::
      "core_installs" slist => {
				  "iptables",
				  "openssh-client",
				  "emacs",
				  "screen",
				  "build-essential",
                                };
      
    workstation.(debian|ubuntu):: 
      # Unattended upgrades are dangerous, so only use automated security upgrades for single user workstations
      # libvte9 is needed by geany to show a terminal window inside
      "workstation_installs" slist => {
					"unattended-upgrades",
					"update-notifier-common",
					"arandr",
					"libreoffice",
					"chromium-browser",
					"firefox",
					"filezilla",
					"default-jre",
					"default-jdk",
					"eclipse",
					"eclipse-cdt",
					"geany",
					"libvte9",
					"texmaker",
                                 };
      
    server.(debian|ubuntu)::
      "server_installs" slist => {
				   "openssh-server",
                                 };

    ## Required packages to be REMOVED
    debian|ubuntu::
      "core_removals" slist => {
                               };
      
    workstation.(debian|ubuntu)::      
      "workstation_removals" slist => {
					"openssh-server",
                                 };
      
    server.(debian|ubuntu)::
      "server_removals" slist => {
		                 };
    any::
      "all_installs"       slist => {@(core_installs), @(workstation_installs), @(server_installs), @(extra_installs)};
      "all_removals"       slist => {@(core_removals), @(workstation_removals), @(server_removals)};

  methods:
      "install_update_listed packages" usebundle => package_latest("$(all_installs)");
      "remove_listed packages" usebundle => package_absent("$(all_removals)");

    workstation.(debian|ubuntu)::
      "add unattended-upgrades config files" usebundle => unattended_upgrades_config;
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
      
    (DEBUG|DEBUG_manage_packages)::
      "Repository package to be installed: $(all_installs)";
      "Repository package to be removed: $(all_removals)";
      
    (DEBUG|DEBUG_manage_packages).install_extra_packages::
      "Extra repository packages specifically for this host: $(packages_json_str)";
}

###################################

bundle agent unattended_upgrades_config
# @description: creates and edits configuration files for enabling the debian/ubuntu unattended-upgrades package 
{
  vars:
      "enable_unattended_file" string => "/etc/apt/apt.conf.d/20auto-upgrades";

      "added_lines" slist => {
			 "APT::Periodic::Update-Package-Lists \"1\";",
			 "APT::Periodic::Unattended-Upgrade \"1\";",
                };

  files:
      "$(enable_unattended_file)"
      create => "true",
      perms => mog("644","root","root"),
      edit_line => append_if_no_line("$(added_lines)"),
      comment => "creates config file for enabling the unattended-upgrades package. Can also be enabled manually by running on system: # dpkg-reconfigure unattended-upgrades";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
      
    (DEBUG|DEBUG_unattended_upgrades_config)::
      "file to add for enabling unattended upgrades: $(enable_unattended_file)";
      "Lines to be added into file: $(added_lines)";
}

###################################

bundle agent manage_custom_packages
# @description: custom scripting for packages required by users but not in standard repositories
{
  vars:
#     "custom_installs" slist => {},
#      policy => "overridable";

    ## Required packages to be INSTALLED
    install_custom_packages::
      "custom_installs" slist => getvalues( "classify_host.custom_packages" ),
      comment => "list of custom packages from host_data.json file. Each package must have a specific installation method listed in this bundle";
      "packages_json_str" string => format("%S", "classify_host.custom_packages");

      "texworks_dictionary_source" string => "/usr/share/hunspell";
      "texworks_dictionary_target" string => "/usr/share/myspell/dicts";

#    any::
#      "all_installs"       slist => {@(custom_installs)};

  classes:
      
      "$(custom_installs)"
      expression => isvariable ("custom_installs"),
      comment => "create classes from values within custom_installs list";
      
  packages:
    pip_gensim::
      "gensim" package_method =>pip(""), package_policy => "add",
      comment => "install the gensim package using python pip (used by Sara Bahrami)";

    pip_theano::
      "theano" package_method =>pip(""), package_policy => "add",
      comment => "install the theano package using python pip (used by Dr. Kaushik Sinha)";

    pip_pattern::
      "pattern" package_method =>pip(""), package_policy => "add",
      comment => "install the pattern package using python pip (used by Dr. Kaushik Sinha)";

    pip_orange::
      "orange" package_method =>pip(""), package_policy => "add",
      comment => "install the orange package using python pip (used by Dr. Kaushik Sinha)";

  files:
    texworks_dictionaries::
      "$(texworks_dictionary_target)"
      move_obstructions => "true",
      link_from => linkchildren( "$(texworks_dictionary_source)" ),
      comment => "create symbolic links for all libreoffice dictionaries in texworks dictionary directory";

  methods:
#   matlab_research|matlab_classroom::
#      "install matlab software" usebundle => install_matlab,
#      comment => "run the set of custom bundles for installing the commercial matlab software. Must specify whether to use the research or classroom license";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
      
    (DEBUG|DEBUG_manage_packages)::
      "Custom packages to be installed: $(custom_installs)";
      "Custom repository packages specifically for this host: $(packages_json_str)";

    (DEBUG|DEBUG_manage_packages).test_package::
      "$(this.bundle): test_package is listed in host_data.json file for this host and a test_package class has been created";
      
}
