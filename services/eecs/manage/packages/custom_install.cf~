##############################################################################
#
#   manage/packages/pyrosetta.cf - EECS manual installer for PyRosetta
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################

# TESTING ONLY:INPUT STANDARD LIBRARY (Remove after testing)
#body file control
#{
#      inputs => { "$(sys.libdir)/stdlib.cf" };
#}

######################################################################
# Public entry point: install_matlab bundle
######################################################################

# NOTES for future development of configuration:
# 1. Write removal bundles for each installation
# 2. Write a bundle for removal of matlab: check if installed in installed_matlab (if installed and want removed, then delete directory /opt/matlab and /usr/local/bin/mtlab symlink to "repair state")

bundle agent install_cuda_by_example
{
# @decription: manual installer for cuda_by_example
      
  vars:
      # intial variables for testing if pyrosetta is installed
      #(NOTE: this bundle needs adjusting if we wish these variables to override what is in the ars bundle!
      "cuda_dir" string => "/srv/cuda_by_example/";
      "cuda_common_dir" string => "$(cuda_dir)common";
      "cuda_common_links" slist => { "/srv/common", "/home/common" };

  classes: 
      "application_dir_is_present"
      expression => fileexists("$(cuda_dir).");

  files:
    application_dir_is_present::
      "$(cuda_dir)"
	perms => mog("644","root","root"),
	depth_search => recurse("inf"),
	comment => "set all users read permissions for cuda_by_example directory and contents";

      "$(cuda_common_links)"
        move_obstructions => "true",
        link_from => linkfrom( "$(cuda_common_dir)", "symlink" ),
        comment => "create symbolic links for cuda_by_example common directory in /srv and /home";
      
  methods:
    !application_dir_is_present::
      "cuda_by_example_vars"  usebundle => cuda_by_example_vars;
      
      "install dependent packages"  usebundle => dependent_packages_installed("cuda_by_example_vars.conf");
      "download installation tarball"   usebundle => installation_tarball_is_present("cuda_by_example_vars.conf");
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_install_cuda_by_example)::

    (DEBUG|DEBUG_install_cude_by_example).application_dir_is_present::
      "$(this.bundle): directory already installed.";
}

#############################################

bundle agent cuda_by_example_vars(params)
{
  vars:
  
      # Default configuration values. Internal parameters start with _
      "conf[_application_dir]" string =>"/srv/cuda_by_example",
        policy => "overridable";
      "conf[_download_server]"  string => "$(sys.policy_hub)",
        policy => "overridable";
      "conf[_download_file]"  string => "/srv/cfengine/packages/cuda_by_example.tar.gz",
        policy => "overridable";
      "conf[_tarball]"      string => "cuda_by_example.tar.gz",
        policy => "overridable";
      "conf[_install_dir]"  string => "/srv/",
        policy => "overridable";
      "conf[_unrolled_dir]"  string => "$(conf[_install_dir])cuda_by_example/",
        policy => "overridable";
#      "conf[_install_command]"  string => "python setup.py install",
#        policy => "overridable";
#      "conf[_log_file]"    string => "/var/log/matlab_install.log",
#        policy => "overridable";
      
    debian::
      "conf[_dependent_packages]"  slist => {"nvidia-cuda-toolkit",},
        comment => "cuda_by_example depends on nvidia cuda compiler",
        policy => "overridable";

    any::
      # Copy configuration parameters passed, into a local array
      "param_keys"          slist  => getindices("$(params)");   
      "conf[$(param_keys)]" string => "$($(params)[$(param_keys)])",
        policy => "overridable";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
}

#############################################

bundle agent install_pyrosetta
{
  # @decription: manual installer for PyRosetta including a fully silent install

  vars:
      # intial variables for testing if pyrosetta is installed
      #(NOTE: this bundle needs adjusting if we wish these variables to override what is in the vars bundle!
      "pyrosetta_dir" string =>"/usr/local/lib/python2.7/dist-packages/pyrosetta-4.0-py2.7.egg/.";

  classes: 
      "application_dir_is_present"
      expression => fileexists("$(pyrosetta_dir)");

  methods:
    !application_dir_is_present::
      "pyrosetta_vars"  usebundle => pyrosetta_vars;
      
      "install dependent packages"  usebundle => dependent_packages_installed("pyrosetta_vars.conf");
      "download installation tarball"   usebundle => installation_tarball_is_present("pyrosetta_vars.conf");
      "delete installation files" usebundle => installation_tidy("pyrosetta_vars.conf");

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_install_pyrosetta)::

    (DEBUG|DEBUG_install_pyrosetta).application_dir_is_present::
      "$(this.bundle): pyrosetta already installed.";
}

#############################################

bundle agent pyrosetta_vars(params)
{
  vars:
  
      # Default configuration values. Internal parameters start with _
      "conf[_application_dir]" string =>"/usr/local/lib/python2.7/dist-packages/pyrosetta-4.0-py2.7.egg/",
        policy => "overridable";
      "conf[_download_server]"  string => "$(sys.policy_hub)",
        policy => "overridable";
      "conf[_download_file]"  string => "/srv/cfengine/packages/pyrosetta4.python27.ubuntu.gz",
        policy => "overridable";
      "conf[_tarball]"      string => "pyrosetta4.python27.ubuntu.gz",
        policy => "overridable";
      "conf[_install_dir]"  string => "/root/",
        policy => "overridable";
      "conf[_unrolled_dir]"  string => "$(conf[_install_dir])/PyRosetta4.Release.python27.ubuntu.release-122/setup/",
        policy => "overridable";
      "conf[_install_command]"  string => "python setup.py install",
        policy => "overridable";
#      "conf[_log_file]"    string => "/var/log/matlab_install.log",
#        policy => "overridable";

    debian::
      "conf[_dependent_packages]"  slist => {"python",},
        comment => "pyrosetta depends on python",
        policy => "overridable";

    any::   
      # Copy configuration parameters passed, into a local array
      "param_keys"          slist  => getindices("$(params)");   
      "conf[$(param_keys)]" string => "$($(params)[$(param_keys)])",
        policy => "overridable";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
}

#bundle agent application_report_params(params)
#{
#  vars:
#      "keys" slist => getindices("$(params)");
#
#  reports:
#    cfengine_3::
#      "$(keys) = $($(params)[$(keys)])";
#}

bundle agent dependent_packages_installed(params)
{
  vars:
      "desired_package" slist => { "@($(params)[_dependent_packages])" };


  methods:
      "install desired packages" usebundle => package_latest("$(desired_package)");

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    DEBUG::
      "$(this.bundle): Packages to install: $(desired_package)";

}

#############################################

bundle agent installation_tarball_is_present(params)
{
  classes:
      "tarball_is_present"
        expression => fileexists("$($(params)[_install_dir])$($(params)[_tarball])");

      "src_dir_is_present"
        expression => fileexists("$($(params)[_unrolled_dir])");

  files: 
    !tarball_is_present::
      "$($(params)[_install_dir])$($(params)[_tarball])"
        copy_from => secure_cp("$($(params)[_download_file])", "$($(params)[_download_server])"),
        comment => "Copying installer tarball from source server.";

  commands:
    tarball_is_present.!src_dir_is_present::
      "/bin/tar -xzf $($(params)[_tarball])"
        contain => in_dir_shell("$($(params)[_install_dir])"),
        comment => "Unrolling installer tarball to $($(params)[_install_dir])";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    DEBUG.tarball_is_present::
      "Installation tarball is on disk.";

    DEBUG.src_dir_is_present::
      "Installation unrolled/untarred directory is present.";
}

#############################################

bundle agent application_is_installed(params)
{
  classes:
      "src_dir_is_present"
        expression => fileexists("$($(params)[_unrolled_dir])");

      "application_dir_is_present"
        expression => fileexists("$($(params)[_application_dir])");

  files:
    # matlab_src_dir_is_present.matlab_executable_exists::
    #   "$($(params)[_matlab_dir])"
    #   perms => mog("755", "root", "root"),
    #   comment => "make sure matlab directory can be accessed by all users";

    #   "$($(params)[_matlab_dir])/bin"
    #   perms => mog("755", "root", "root"),
    #   comment => "make sure matlab/bin directory can be accessed by all users";

    #   "$($(params)[_matlab_dir])$($(params)[_executable_binary])"
    #   perms => mog("755", "root", "root"),
    #   comment => "make sure matlab binary file can be accessed and run by all users";

    #   "$($(params)[_desktop_file_install_location])"
    #   copy_from => local_cp("$($(params)[_unrolled_dir])$($(params)[_desktop_file])"),
    #   perms => mog("644", "root", "root"),
    #   comment => "copy the desktop file into the system's applications directory for GUI users";

    #   "$($(params)[_desktop_icon_install_location])"
    #   copy_from => local_cp("$($(params)[_unrolled_dir])$($(params)[_desktop_icon_file])"),
    #   perms => mog("644", "root", "root"),
    #   comment => "copy the desktop icon file into the system's pixmaps directory for GUI users";

  commands:
    src_dir_is_present.!application_dir_is_present:: 
      "$($(params)[_install_command])"
      contain => in_dir_shell("$($(params)[_unrolled_dir])"),
      comment => "non-interactively installing application";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_application_is_installed).application_dir_is_present::
      "application directory is present";
}

#############################################

bundle agent installation_tidy(params)
{
  classes:
      "install_dir_exists"  
        expression => fileexists("$($(params)[_unrolled_dir])");

      "tarball_exists"
        expression => fileexists("$($(params)[_install_dir])$($(params)[_tarball])");

  files:
    install_dir_exists::
      "$($(params)[_unrolled_dir])"
        pathtype => "literal",
        delete => tidy,
        file_select => minutes_old(20),
        depth_search => recurse("inf"),
      #BEN: ADD RESULTS CLASS
        comment => "Remove all files within $($(params)[_unrolled_dir]) created in last 20 minutes.";

      "$($(params)[_unrolled_dir])"
        pathtype => "literal",
        delete => tidy,
        file_select => minutes_old(20),
        depth_search => include_base,
        comment => "Remove the directory $($(params)[_unrolled_dir]).";

    tarball_exists::
      "$($(params)[_install_dir])$($(params)[_tarball])"
        pathtype => "literal",
        delete => tidy,
        comment => "Remove $($(params)[_tarball]).";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    DEBUG.(!install_dir_exists)::
      "$(this.bundle): Removed installation files: $($(params)[_unrolled_dir])";

    DEBUG.(!tarball_exists)::
      "$(this.bundle): Removed installation files: $($(params)[_tarball])";

}

#############################################

body file_select minutes_old(min)
{
      mtime       => irange(0,ago(0,0,0,0,"$(min)",0));
      file_result => "mtime";
}

#############################################
