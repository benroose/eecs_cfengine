##############################################################################
#
#   manage/packages/main.cf - EECS packages management
#   Maintained: Ben Roose, ver 0.2
#
###############################################################################



# PROTIP: Use body file control to help make modular policy.
# "There can be only one" body common control per policy entry (promises.cf,update.cf)

# TESTING ONLY:INPUT STANDARD LIBRARY (Remove after testing)
#body file control
#{
#      inputs => { "$(sys.libdir)/stdlib.cf" };
#}

bundle agent manage_packages
# @description: package management for hosts classified by: any (all hosts), workstation only packages, server only packages
# NOTE: This is an initial version to get up and running. must build this into a nicer interface bundle set!!
{

  vars:

    ## Packages required
    debian|ubuntu::
      "policy[iptables]" string => "present";
      "policy[openssh-client]" string => "present";
      "policy[emacs]" string => "present";
      "policy[screen]" string => "present";
      "policy[build-essential]" string => "present";

    workstation.(debian|ubuntu)::

    server.(debian|ubuntu)::
      "policy[openssh-server]" string => "present";

    ## Packages denied (NEED TO FIX!)
    #debian|ubuntu::  

    workstation.(debian|ubuntu)::
      #"policy[openssh-server]" string => "absent";

    server.(debian|ubuntu)::

    any::	
      #"architectures" slist => { "x86_64" };
      "allpkgs"       slist => getindices("policy");

  packages:
      "$(allpkgs)"
        policy => "$(policy[$(allpkgs)])",
        package_module => apt_get,
        version => "latest";
        #architecture => @(architectures);

  methods:

    #SETTING HOST MANUALLY FOR MATLAB INSTALL (need to build host classification bundles to make this more generic)
    "jb_256_3432_res1"::
      "install_matlab" usebundle => install_matlab;   
  
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
      
    (DEBUG|DEBUG_manage_packages)::
}

###################################

bundle agent dpkgup(p_list) {

  vars:

    done_with_classes.package_list_provided::
      "pkg_list" string => join(" ", p_list), policy => "free";
    done_with_classes.!package_list_provided::
      "pkg_list" string => "", policy => "free";

    done_with_classes::
      "apt_show_versions" string => execresult("/usr/bin/apt-show-versions -u $(pkg_list)","useshell");
      "dim" int => parsestringarray("upgrade","$(apt_show_versions)","NoComments","[/ ]","1000","200000");

      "package" slist => getindices("upgrade");

  classes:

      "package_list_provided" expression => isvariable("p_list");
      "done_with_classes" expression => "any";

  reports:

      "Upgrade $(package) to $(upgrade[$(package)][6])";

  packages:

      "apt-show-versions"
      package_policy => "addupdate",
      handle => canonify("$(this.bundlename)_apt_get_install_$(install)"),
      package_method => apt_get_permissive;

      "$(package)"
      package_policy => "addupdate",
      handle => canonify("$(this.bundlename)_apt_get_install_$(package)"),
      package_method => apt_get,
      package_version => "$(upgrade[$(package)][6])",
      package_select => ">=";

}

bundle agent rpmup(p_list) {

  vars:

    done_with_classes.package_list_provided::
      "pkg_list" string => join(" ", p_list), policy => "free";
    done_with_classes.!package_list_provided::
      "pkg_list" string => "", policy => "free";

    done_with_classes::
      "yum_list_updates" string => execresult("/usr/bin/yum -C list updates $(pkg_list) | grep updates","useshell");
      "dim" int => parsestringarray("upgrade","$(yum_list_updates)","NoComments","\s+","1000","200000");

      "package" slist => getindices("upgrade");
      "p[$(package)]"slist => splitstring("$(package)","\.","1");

  classes:

      "package_list_provided" expression => isvariable("p_list");
      "done_with_classes" expression => "any";

  reports:

      "Upgrade $(p[$(package)]) to $(upgrade[$(package)][1])";

  packages:

      "$(p[$(package)])"
      package_policy => "addupdate",
      handle => canonify("$(this.bundlename)_yum_install_$(package)"),
      package_method => yum,
      package_version => "$(upgrade[$(package)][1])",
      package_select => ">=";

}

# Usage:

bundle agent upgrade_all
{
  methods:
      "upgrade" usebundle => dpkgup;
}

# Or

bundle agent upgrade_some
{
  vars:
      "p" slist => { "bash", "zsh" };
  methods:
      "upgrade" usebundle => dpkgup("@(upgrade_some.p)");
}

