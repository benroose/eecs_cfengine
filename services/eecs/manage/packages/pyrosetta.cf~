##############################################################################
#
#   manage/packages/pyrosetta.cf - EECS manual installer for PyRosetta
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################

# TESTING ONLY:INPUT STANDARD LIBRARY (Remove after testing)
body file control
{
      inputs => { "$(sys.libdir)/stdlib.cf" };
}

######################################################################
# Public entry point: install_matlab bundle
######################################################################

# NOTES for future development of configuration:
# 1. Figure out how to auto integrate research vs. classroom licensing (using classes)
# 2. Write a bundle for removal of matlab: check if installed in installed_matlab (if installed and want removed, then delete directory /opt/matlab and /usr/local/bin/mtlab symlink to "repair state")

bundle agent install_pyrosetta
{
  # @decription: manual installer for PyRosetta including a fully silent install

  vars:
      # intial variables for testing if matlab is installed
      #(NOTE: this bundle needs adjusting if we wish these variables to override what is in the matlab_vars bundle!
#      "matlab_dir" string =>"/opt/matlab/";     
#      "executable_link" string =>"/usr/local/bin/matlab";

  classes: 
#      "application_dir_is_present"
#      expression => fileexists("$(matlab_dir)");
#      "executable_link_is_present"
#        expression => fileexists("$(executable_link)");

  methods:
#    !application_dir_is_present::
      "pyrosetta_vars"  usebundle => pyrosetta_vars;
      
      "install dependent packages"  usebundle => dependent_packages_installed("pyrosetta_vars.conf");
      "download installation tarball"   usebundle => installation_tarball_is_present("pyrosetta_vars.conf");
      "install application" usebundle => application_is_installed("pyrosetta_vars.conf");
#      "delete installation files" usebundle => installation_tidy("pyrosetta_vars.conf");

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_install_matlab)::

    (DEBUG|DEBUG_install_matlab).matlab_dir_is_present.executable_link_is_present::
      "$(this.bundle): already installed.";
}

#############################################

bundle agent pyrosetta_vars(params)   
{
  vars:
  
      # Default configuration values. Internal parameters start with _
#      "conf[_matlab_dir]" string =>"/opt/matlab/",
#        policy => "overridable";
#      "conf[_executable_binary]" string =>"bin/matlab",
#        policy => "overridable";
#      "conf[_executable_link]" string =>"/usr/local/bin/matlab",
#        policy => "overridable";
      "conf[_download_server]"  string => "$(sys.policy_hub)",
        policy => "overridable";
      "conf[_download_file]"  string => "/srv/cfengine/packages/pyrosetta4.python27.ubuntu.gz",
        policy => "overridable";
      "conf[_tarball]"      string => "pyrosetta4.python27.ubuntu.gz",
        policy => "overridable";
      "conf[_install_dir]"  string => "/root/",
        policy => "overridable";
      "conf[_unrolled_dir]"  string => "$(conf[_install_dir])/PyRosetta4.Release.python27.ubuntu.release-122/setup/",
        policy => "overridable";
      
      "conf[_install_command]"  string => "python setup.py install",
        policy => "overridable";
#      "conf[_template_file]" string => "$(this.promise_dirname)/matlab_installer_template.txt",
#        policy => "overridable";
#      "conf[_installer_file]" string => "installer.txt",
#        policy => "overridable";
#      "conf[_log_file]"    string => "/var/log/matlab_install.log",
#        policy => "overridable";
#      "conf[_desktop_icon_file]" string =>"matlab.png",
#        policy => "overridable";
#      "conf[_desktop_file_install_location]" string =>"/usr/share/applications/matlab.desktop",
#        policy => "overridable";     
#      "conf[_desktop_icon_install_location]" string =>"/usr/share/pixmaps/matlab.png",
#        policy => "overridable";     

#    matlab_research::
#      "conf[_license_key]" string =>"34128-40921-39156-38420-24841-17749-28780-12545-16055-45535-20492";
#      "conf[_license_file]" string =>"$(conf[_unrolled_dir])license_research/license.dat";
#      "conf[_desktop_file]" string =>"matlab-r.desktop";
      
#    matlab_classroom::
#      "conf[_license_key]" string =>"30975-39490-53803-34518-40127";
#      "conf[_license_file]" string =>"$(conf[_unrolled_dir])/license_classroom/license.dat";
#      "conf[_desktop_file]" string =>"matlab-c.desktop";

    any::   
      # Copy configuration parameters passed, into a local array
      "param_keys"          slist  => getindices("$(params)");   
      "conf[$(param_keys)]" string => "$($(params)[$(param_keys)])",
        policy => "overridable";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
}

#bundle agent matlab_report_params(params)
#{
#  vars:
#      "keys" slist => getindices("$(params)");
#
#  reports:
#    cfengine_3::
#      "$(keys) = $($(params)[$(keys)])";
#}

bundle agent dependent_packages_installed(params)
{
  vars:
    install_matlab.debian::  
      "desired_package" slist => { 
				   "default-jre",
				   "tar",
      },
      comment => "MatLab depends on Java Runtime";

    pyrosetta.debian::
      "desired_package" slist => {
				   "python",	
      },
      comment => "pyrosetta depends on python";

  packages:  
      "$(desired_package)"
        policy => "present",
        package_module => apt_get,
        version => "latest",
        ifvarclass => and( isvariable("$(desired_package)") );
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

}

#############################################

bundle agent installation_tarball_is_present(params)
{
  classes:
      "tarball_is_present"
        expression => fileexists("$($(params)[_install_dir])$($(params)[_tarball])");

      "src_dir_is_present"
        expression => fileexists("$($(params)[_unrolled_dir])");

  files: 
    !tarball_is_present::
      "$($(params)[_install_dir])$($(params)[_tarball])"
        copy_from => secure_cp("$($(params)[_download_file])", "$($(params)[_download_server])"),
        comment => "Copying installer tarball from source server.";

  commands:
    tarball_is_present.!src_dir_is_present::
      "/bin/tar -xzf $($(params)[_tarball])"
        contain => in_dir_shell("$($(params)[_install_dir])"),
        comment => "Unrolling installer tarball to $($(params)[_install_dir])";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    DEBUG.tarball_is_present::
      "Installation tarball is on disk.";

    DEBUG.src_dir_is_present::
      "Installation unrolled/untarred directory is present.";
}

#############################################

bundle agent application_is_installed(params)
{
  classes:
      "src_dir_is_present"
        expression => fileexists("$($(params)[_unrolled_dir])");

      "application_dir_is_present"
        expression => fileexists("$($(params)[_application_dir])");

#      "application_executable_exists"  
#        expression => fileexists("$($(params)[_matlab_dir])$($(params)[_executable_binary])");

  files:
    # matlab_src_dir_is_present.!matlab_installer_file_exists::  
    #   "$($(params)[_unrolled_dir])$($(params)[_installer_file])"
    #     handle => "set_installer_file",
    #     create => "true",
    #     perms => mog ("644", "root", "root"),
    #     edit_defaults => empty,
    #     edit_line => expand_template("$($(params)[_template_file])"),
    #     comment => "Expand non-interactive matlab installer file with correct parameters into [unrolled_dir]";

    # matlab_src_dir_is_present.matlab_executable_exists::
    #   "$($(params)[_matlab_dir])"
    #   perms => mog("755", "root", "root"),
    #   comment => "make sure matlab directory can be accessed by all users";

    #   "$($(params)[_matlab_dir])/bin"
    #   perms => mog("755", "root", "root"),
    #   comment => "make sure matlab/bin directory can be accessed by all users";

    #   "$($(params)[_matlab_dir])$($(params)[_executable_binary])"
    #   perms => mog("755", "root", "root"),
    #   comment => "make sure matlab binary file can be accessed and run by all users";

    #   "$($(params)[_desktop_file_install_location])"
    #   copy_from => local_cp("$($(params)[_unrolled_dir])$($(params)[_desktop_file])"),
    #   perms => mog("644", "root", "root"),
    #   comment => "copy the desktop file into the system's applications directory for GUI users";

    #   "$($(params)[_desktop_icon_install_location])"
    #   copy_from => local_cp("$($(params)[_unrolled_dir])$($(params)[_desktop_icon_file])"),
    #   perms => mog("644", "root", "root"),
    #   comment => "copy the desktop icon file into the system's pixmaps directory for GUI users";

  commands:
    src_dir_is_present:: 
#    src_dir_is_present.!application_dir_is_present.executable:: 
      "$($(params)[_install_command])"
      contain => in_dir_shell("$($(params)[_unrolled_dir])"),
      comment => "non-interactively installing application";


  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    DEBUG.application_dir_is_present::
      "application directory is present.";
}

#############################################

bundle agent installation_tidy(params)
{
  classes:
      "install_dir_exists"  
        expression => fileexists("$($(params)[_unrolled_dir])");

      "tarball_exists"
        expression => fileexists("$($(params)[_install_dir])$($(params)[_tarball])");

  files:
    install_dir_exists::
      "$($(params)[_unrolled_dir])"
        pathtype => "literal",
        delete => tidy,
        file_select => minutes_old(20),
        depth_search => recurse("inf"),
      #BEN: ADD RESULTS CLASS
        comment => "Remove all files within $($(params)[_unrolled_dir]) created in last 20 minutes.";

      "$($(params)[_unrolled_dir])"
        pathtype => "literal",
        delete => tidy,
        file_select => minutes_old(20),
        depth_search => include_base,
        comment => "Remove the directory $($(params)[_unrolled_dir]).";

    tarball_exists::
      "$($(params)[_install_dir])$($(params)[_tarball])"
        pathtype => "literal",
        delete => tidy,
        comment => "Remove $($(params)[_tarball]).";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    DEBUG.(!install_dir_exists)::
      "$(this.bundle): Removed installation files: $($(params)[_unrolled_dir])";

    DEBUG.(!tarball_exists)::
      "$(this.bundle): Removed installation files: $($(params)[_tarball])";

}

#############################################

body file_select minutes_old(min)
{
      mtime       => irange(0,ago(0,0,0,0,"$(min)",0));
      file_result => "mtime";
}

#############################################
