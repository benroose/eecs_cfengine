##############################################################################
#
#   manage/packages/matlab.cf - EECS manual installer for matlab
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################

# TESTING ONLY:INPUT STANDARD LIBRARY (Remove after testing)
body file control
{
      inputs => { "$(sys.libdir)/stdlib.cf",
		  "$(sys.workdir)/inputs/services/eecs/lib/main.cf",
		  "$(sys.workdir)/inputs/services/eecs/classification/host_role/main.cf" };
}

######################################################################
# Public entry point: install_matlab
######################################################################

# NOTES for future development of configuration:
# 1. Figure out how to auto integrate research vs. classroom licensing (using classes)
# 2. Write a bundle for removal of matlab: check if installed in installed_matlab (if installed and want removed, then delete directory /opt/matlab and /usr/local/bin/mtlab symlink to "repair state")

bundle agent install_matlab
{
  # @decription: manual installer for matlab including a fully silent install

  vars:
      # intial variables for testing if matlab is installed
      "matlab_dir" string =>"/opt/matlab/";     
      "executable_link" string =>"/usr/local/bin/matlab";

      "disk_space_available" int => diskfree("$(matlab_vars.install_dir)");

  classes:
      "disk_space_check_passed"
        expression => isgreaterthan( $(disk_space_available), $(matlab_vars.disk_space_required) ),
        comment => "sanity-check for enough free space to install matlab on system";

      "install_dirs_exist"
	expression => filesexist( "@(matlab_vars.all_install_dirs_for_check)" );

      "app_exec_file_exists"
        expression => fileexists( "$(matlab_vars.app_exec_file)" );

      
  methods:
      "generate all matlab variables"  usebundle => matlab_vars,
        inherit => "true";

    install_software::
      "install dependent packages"
      	usebundle => package_latest( "$(matlab_vars.dependent_packages)" ),
        classes => results("bundle", "dependent_packages_install"),
        comment => "pull package list from matlab_vars";

      
     # DOWNLOAD INSTALLATION TARBALL
    !install_dirs_exist.!app_exec_file_exists.disk_space_check_passed::
      "download and uncompress matlab installation tarball file"
      	usebundle => install_tarball_v2( "$(matlab_vars.all_install_paths)", "$(matlab_vars.install_server)", "$(matlab_vars.install_dir)" );
        # classes => results("bundle", "install_tarball");

    install_dirs_exist|app_exec_file_exists::
      "Install matlab to /opt from expanded tarball on local system"
        usebundle => matlab_installer("matlab_vars");

    app_exec_file_exists::
      "After Matlab is installed, make sure to delete all installation files"
        usebundle => matlab_tidy("matlab_vars");

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    DEBUG|DEBUG_install_matlab::
      "=== $(this.bundle) ===";
      "matlab already installed at $(matlab_vars.matlab_app_dir)"
        ifvarclass => "app_exec_file_exists";

      "Not enough disk space available to install matlab!"
        ifvarclass => not( "disk_space_check_passed" );
}

#############################################

bundle agent matlab_vars
{
  vars:  
      "dependent_packages" slist => { "default-jre", };

      ## TARBALL INSTALL VARS
      "install_server"  string => "web";
      "install_licenses_tarball_path"  string => "http://www.cs.wichita.edu/~roose/matlab_2018b/matlab_2018b_licenses.tar.xz";
      "install_dvd1_tarball_path"  string => "http://www.cs.wichita.edu/~roose/matlab_2018b/matlab_2018b_dvd1.tar.xz";
      "install_dvd2_tarball_path"  string => "http://www.cs.wichita.edu/~roose/matlab_2018b/matlab_2018b_dvd2.tar.xz";
      "all_install_paths" slist => { $(install_licenses_tarball_path), $(install_dvd1_tarball_path), $(install_dvd2_tarball_path) };

      "disk_space_required" int => "40000000"; # Needs to be defined in KB
      
      "install_dir"  string => "/root/";

      "licenses_dir"  string => "/root/matlab_2018b_licenses";
      "dvd1_dir"  string => "/root/matlab_2018b_dvd1";
      "dvd2_dir"  string => "/root/matlab_2018b_dvd2";
      "all_install_dirs" slist => { "$(licenses_dir)", "$(dvd1_dir)", "$(dvd2_dir)", };
      "all_install_dirs_for_check" slist => { "$(licenses_dir)/.", "$(dvd1_dir)/.", "$(dvd2_dir)/.", };
      
      "matlab_install_dir" string => "/root/matlab_2018b/";

      ## MATLAB INSTALL VARS
      "matlab_app_dir" string =>"/opt/matlab/";
      "matlab_exec_binary" string =>"$(matlab_app_dir)bin/matlab";
      "matlab_system_exec" string =>"/usr/local/bin/matlab";
      "app_exec_file" string =>"$(matlab_system_exec)";
      "template_installer_file" string => "$(this.promise_dirname)/data/matlab_installer_input.mustache";
      "matlab_installer_file" string => "$(matlab_install_dir)/installer_input.txt";
      "installer_log_file" string => "/var/log/matlab_install.log";

      "desktop_icon_file" string =>"$(licenses_dir)/desktop_icon.png";
      "desktop_file_install_location" string =>"/usr/share/applications/matlab.desktop";
      "desktop_icon_install_location" string =>"/usr/share/pixmaps/matlab.png";

      
      # Default configuration values. Internal parameters start with _
      # "executable_link" string =>"/usr/local/bin/matlab",
      #   policy => "overridable";
      # "tarball"      string => "matlab_installer.tar.gz",
      #   policy => "overridable";
      # "unrolled_dir"  string => "$(install_dir])matlab2015_installer/",
      #   policy => "overridable";

    matlab_research::
      "license_key" string =>"52293-04575-49632-23146-03172-45066-24293-53219-19492-53259-47241-14834-26648-08458";
      "license_file" string =>"$(licenses_dir)/research_license.dat";
      "desktop_file" string =>"$(licenses_dir)/research.desktop";
      
    matlab_classroom::
      "license_key" string =>"38706-15056-64528-12027-57898-29661";
      "license_file" string =>"$(licenses_dir)/classroom_license.dat";
      "desktop_file" string =>"$(licenses_dir)/classroom.desktop";

    # any::   
    #   # Copy configuration parameters passed, into a local array
    #   "param_keys"          slist  => getindices("$(params)");   
    #   "conf[$(param_keys)" string => "$($(params)[$(param_keys)])",
    #     policy => "overridable";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
}

#############################################

bundle agent matlab_installer(params)
{
  classes:
      # "matlab_src_dir_exists"
      #   expression => fileexists( "$($(params).install_unrolled_dir)" );

      "matlab_install_dir_exists"
        expression => fileexists( "$($(params).matlab_install_dir)/." );

      "matlab_installer_file_exists"  
        expression => fileexists( "$($(params).matlab_installer_file)" );

      "matlab_app_dir_exists"
        expression => fileexists( "$($(params).matlab_app_dir)" );

      "matlab_exec_binary_exists"  
        expression => fileexists("$($(params).matlab_exec_binary)");
      
      "matlab_system_exec_exists"
        expression => fileexists("$($(params).matlab_system_exec)");


  files:
    !matlab_exec_binary_exists::
      "$($(params).matlab_install_dir)/."
        create => "true",
        perms => mog("755", "root", "root"),
        comment => "ensure the installation directory exists";

    matlab_install_dir_exists.!matlab_exec_binary_exists::
      "$($(params).matlab_install_dir)"
        link_from => hard_linkchildren("$($(params).dvd1_dir)"),
        # link_from => linkfrom( "$($(params).dvd1_dir)", "hardlink" ),
        depth_search => recurse("inf"),
        comment => "link all directories/files in install dvd1 dir to the install dir";

      "$($(params).matlab_install_dir)"
        link_from => hard_linkchildren("$($(params).dvd2_dir)"),
        # link_from => linkfrom( "$($(params).dvd2_dir)", "hardlink" ),
        depth_search => recurse("inf"),
        comment => "link all directories/files in install dvd2 dir to the install dir";

      "$($(params).matlab_installer_file)"
        create => "true",
        perms => mog ("755", "root", "root"),
        edit_defaults => empty,
        template_method => "mustache",
        edit_template => "$($(params).template_installer_file)",
        classes => results("bundle", "matlab_installer_file"),
        comment => "Expand non-interactive matlab installer file into install dir from template in this promise dir";

    matlab_exec_binary_exists::
      "$($(params).matlab_app_dir)"
        perms => mog("755", "root", "root"),
        # file_select => plain,
        depth_search => recurse_with_base("inf"),
        comment => "make sure files in matlab directories can be accessed by all users";

      "$($(params).matlab_system_exec)"
        move_obstructions => "true",
        link_from => linkfrom( "$($(params).matlab_exec_binary)", "symlink" ),
        comment => "create symbolic link for system binaries: /usr/local/bin/matlab link to /opt/matlab/bin/matlab";

      "$($(params).desktop_file_install_location)"
        copy_from => local_cp("$($(params).desktop_file)"),
        perms => mog("644", "root", "root"),
        comment => "copy the desktop file into the system's applications directory for GUI users";

      "$($(params).desktop_icon_install_location)"
        copy_from => local_cp("$($(params).desktop_icon_file)"),
        perms => mog("644", "root", "root"),
        comment => "copy the desktop icon file into the system's pixmaps directory for GUI users";

  commands:
    matlab_installer_file_exists.!matlab_exec_binary_exists:: 
      "./install -inputFile $($(params).matlab_installer_file)"
        contain => in_dir_shell("$($(params).matlab_install_dir)"),
        comment => "non-interactively install matlab to $($(params).matlab_app_dir).";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    DEBUG.matlab_installer_file_exists::
      "MatLab installer file $($(params).matlab_installer_file) is present";

    DEBUG.!matlab_installer_file_exists.!matlab_exec_binary_exists::
      "MatLab installer file $($(params).matlab_installer_file) is not present";

    DEBUG.matlab_app_dir_exists.matlab_system_exec_exists::
      "MatLab directory and $($(params).matlab_system_exec) are present.";
}

#############################################

bundle agent matlab_tidy(params)
{
  vars:  
      "all_install_dirs" slist => { "@($(params).all_install_dirs)", "$($(params).matlab_install_dir)" };
      
  classes:
      "matlab_install_dir_exists"
        expression => fileexists( "$($(params).matlab_install_dir)/." );
      
  files:
    matlab_install_dir_exists::
      "$(all_install_dirs)"
        pathtype => "literal",
        delete => tidy,
        file_select => plain,
        depth_search => recurse("inf"),
        comment => "Remove all installation files";

      "$(all_install_dirs)"
        pathtype => "literal",
        delete => tidy,
        file_select => dirs,
        depth_search => recurse("inf"),
        comment => "Remove all installation sub-directories";

      "$(all_install_dirs)/."
        pathtype => "literal",
        delete => tidy,
        file_select => dirs,
        comment => "Remove all installation directories";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
}

#############################################
