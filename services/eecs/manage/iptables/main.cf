###############################################################################
#
#   manage/iptables/main.cf - EECS iptables firewall configuration
#   Maintained: Ben Roose, ver 0.3
#
###############################################################################

# PROTIP: Use body file control to help make modular policy.
# "There can be only one" body common control per policy entry (promises.cf,
# update.cf)

#body file control
#{
#	    inputs => { "$(sys.libdir)/stdlib.cf" };
#}

######################################################################
# Public entry point: config_iptables
######################################################################

# NOTES for future development of iptables configuration:
# DONE a) looks like it fully restores the policy file every time it runs. We need to find a better way to compare the policy files than local_dcp(), since the "saved" file from iptables will always be slightly different than the created policy file
# DONE with manage/autostart policy file b) the iptables rules will only come into existence the first time cf-agent runs (up to 5mins after boot). Before this time, there is a window when the host firewall is wide open. This is not too much of a problem for servers with long uptimes, but more serious for heavy use servers in dmz or for workstations which boot often. Could look into using some pre-up post-down edits to /etc/network/interfaces, as here: https://help.ubuntu.com/community/IptablesHowTo#Tips
# c) iptables_dump is odd, would it be good to use "iptables -P INPUT ACCEPT iptables -P OUTPUT ACCEPT iptables -P FORWARD ACCEPT iptables -F to flush iptables directly as here: https://help.ubuntu.com/community/IptablesHowTo#Disabling_the_firewall

# FIXES
# 1. dump iptables current and test hash
# 2. generate policy file and test hash
# 3. if hashes repair then restore policy and save as backup!
# 4. cp backup as current
# 5. add a line to /etc/rc.local for running iptables restore of the backup dump file at startup

bundle agent config_iptables
# @description: takes in iptables filter rules from external json file (either server or workstation) and resets iptables firewall using save/restore commands
{
  vars:
    server::
      "iptables_rules_file" string => "$(this.promise_dirname)/data/iptables_rules_server.json";

    workstation::
      "iptables_rules_file" string => "$(this.promise_dirname)/data/iptables_rules_workstation.json";

    any::
      "iptables_data"
        data => readjson( $(iptables_rules_file), 10M );

      "chain_policies" data => mergedata("iptables_data[chain_policies]");      
      "filter_rules" data => mergedata ("iptables_data[filter_rules]");

      "json_str" string => format("%S", iptables_data);
      # json_str is just for printing seralized version of data container for debugging (note it is JSON).

      "_cache_dir" string => "$(sys.workdir)/state/security/iptables/filter";

    security_rules::
      "security_classes" slist => getvalues( "classify_host.security_rules" ),
      comment => "list of custom security rules from host_data.json file.";
      "security_rules_json_str" string => format("%S", "classify_host.security_rules");

  classes:      
      "$(security_classes)"
	expression => isvariable ("security_classes"),
        scope => "namespace",
        comment => "create classes from values within security classes/rules list";

  files:
      "$(_cache_dir)/."
      create => "true";
      #handle => "iptables_create_cache_dir";

      "$(iptables_rules_file)"
      changes => detect_content_change,
      classes => results("bundle", "iptables_rules_change"),
      comment => "check if rules policy file content has changed and set repaired class if changed";     
      
  methods:
    any::      
      "save current iptables filters and check for changes"
	usebundle => iptables_check($(_cache_dir)),
        inherit => "true";
            
    iptables_rules_change_repaired|iptables_current_change_repaired::
      "if either policy file or iptables has changed, generate new filter policy and restore to iptables"
	usebundle => iptables_generate_policy($(_cache_dir), @(chain_policies), @(filter_rules)),
        inherit => "true";

#      "NOT USED - delete temporary files"
#        inherit => "true",
#        usebundle => iptables_tidy($(_cache_dir));
      
  reports:
   (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
      
    (DEBUG|DEBUG_testing)::
      "=== $(this.bundle) ===";
      
      # "Contents of 'json_input' data container: '$(json_str)'";  

    (DEBUG|DEBUG_testing).security_rules::
      "Security rule found $(security_classes)";
}

bundle agent iptables_restore_on_boot(cdir)
{
  vars:
      "restore_command" string => "
CFEngine added line for restoring iptables firewall at boot time
/sbin/iptables-restore < $(cdir)/cf.iptables.filter.policy";

  files:
      "/etc/rc.local"
	create => "true",
      edit_line => append_if_no_line("$(restore_command)");
}

bundle agent iptables_generate_policy(cdir, chain_policies, filter_rules)
# @description: generate iptables file from cfengine policy and restore to iptables
{
  files:
      "$(cdir)/cf.iptables.filter.policy"
      create => "true",
      edit_defaults => empty,
      edit_line => iptables_write_policy(@(chain_policies), @(filter_rules)),
      handle => "edit_iptables_filter",
      comment => "generate the new policy file";

      "$(cdir)/cf.iptables.filter.policy"
      changes => detect_content_change,
      classes => results("bundle", "iptables_policy_change"),
      comment => "NOT USED - check if policy file content has changed and set repaired class if changed";     

  commands:
      "/sbin/iptables-restore < $(cdir)/cf.iptables.filter.policy"
      contain => in_shell,
      classes => results("namespace", "iptables_restore"),
      comment => "restore cfengine policy file to iptables configuration if policy file or current file changed";

      "/sbin/iptables-save -t filter > $(cdir)/cf.iptables.filter.current"
      contain => in_shell,
      handle => canonify("iptables_filter_resave"),
      classes => results("bundle", "iptables_save_new"),
      comment => "save current iptables configuration as current file in cache directory";
      
  reports:
   (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
      
    (DEBUG|DEBUG_testing)::
      "=== $(this.bundle) ===";
      # "Contents of 'json_input' data container: '$(json_str)'";  

    (DEBUG|DEBUG_testing).iptables_restore_repaired::
       "iptables_restore repaired";
}

bundle agent iptables_check(cdir)
{
# @description: save current iptables to file and call bundle to detect changes
  vars:

  commands:
      "/sbin/iptables-save -t filter > $(cdir)/cf.iptables.filter.current"
      contain => in_shell,
      handle => canonify("iptables_filter_save"),
      classes => results("bundle", "iptables_save"),
      comment => "save current iptables configuration as current file in cache directory";

  methods:
    iptables_save_repaired::
      "edit iptables saved file" usebundle => edit_iptables_filter($(cdir));
      
  reports:
   (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_testing)::
      "=== $(this.bundle) ===";
      
    (DEBUG|DEBUG_testing).iptables_save_reached::
       "iptables_save reached";

    (DEBUG|DEBUG_testing).iptables_save_repaired::
       "iptables_save repaired";
}

bundle agent edit_iptables_filter(cdir)
# @description: removes comments from saved iptables file and detect changes in the file hash database
{
  files:
     "$(cdir)/cf.iptables.filter.current"
      edit_defaults => no_backup,
      edit_line => iptables_remove_comments,
      classes => results("bundle", "comments_remove"),
      comment => "remove comment lines containing log times from iptables saved file and set repaired class";

    comments_remove_repaired::
     # "$(cdir)/cf.iptables.filter.current"
     # changes => detect_content_change,
     # classes => results("namespace", "iptables_current_change"),
     #x comment => "check if iptables saved file content has changed and set repaired class if changed";     

  reports:
   (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
      
    (DEBUG|DEBUG_testing)::
      # "Contents of 'json_input' data container: '$(json_str)'";

    (DEBUG|DEBUG_testing).comments_remove_reached::
       "iptables_comments_remove reached";

    (DEBUG|DEBUG_testing).iptables_change_reached::
       "iptables_change_detection reached";

    (DEBUG|DEBUG_testing).iptables_change_failed::
       "iptables_change_detection failed";

    (DEBUG|DEBUG_testing).iptables_change_repaired::
       "iptables_change_detection repaired";
}


bundle agent testing_iptables_tidy(cdir)
{
# @description: NOT USED - delete temp files
  files:
      "$(cdir)/cf.iptables.filter.*"
      pathtype => "regex",
      delete => tidy;

  reports:
   (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
      
    (DEBUG|DEBUG_main)::
      # "Contents of 'json_input' data container: '$(json_str)'";  
}

bundle edit_line iptables_remove_comments
{
# @description: removes comment lines from text file

  delete_lines:
      "^#.*";
  replace_patterns:
      "\s+\[\d+:\d+\]\s*$"
      replace_with => value("");
      "\s+$"
      replace_with => value("");
}

body changes detect_content_change
{
      hash           => "best";
      report_changes => "content";
      update_hashes  => "true";
}

bundle edit_line iptables_write_policy(p, r)
# @description: takes in chain policies (p) and filter rules (r) as arrays and
# builds the iptables-restore input file
{
  vars:
      "i_unsorted" slist => getindices("r");
      "i" slist => sort("i_unsorted",int);

      # in 3.5.0 this has now been done with sort(). Below is the old way!
      #"i_nosort_concat" string => join( " ", "i_nosort" );
      #"sorter" string => "/usr/bin/perl -le '$,=q{ };print sort { $a <=> $b } @ARGV'";
      #"i_sort_tmp" string => execresult( "$(sorter) $(i_nosort_concat)", "noshell" );
      #"i" slist => splitstring( $(i_sort_tmp), "\s+", "inf" );

      # Format input interface strings
      "cmnd[in_iface][$(i)]" string => "", policy => "free",
      ifvarclass => not(isvariable("r[$(i)][interface]"));
      "cmnd[in_iface][$(i)]" string => " -i $(r[$(i)][interface])", policy => "free",
      ifvarclass => and(isvariable("r[$(i)][interface]"));

      #Format source IP strings
      "cmnd[s_ip][$(i)]" string => "", policy => "free",
      ifvarclass => not(isvariable("r[$(i)][source_ip]"));
      "cmnd[s_ip][$(i)]" string => " -s $(r[$(i)][source_ip])", policy => "free",
      ifvarclass => and(isvariable("r[$(i)][source_ip]"));

      #Format destination IP strings
      "cmnd[d_ip][$(i)]" string => "", policy => "free",
      ifvarclass => not(isvariable("r[$(i)][destination_ip]"));
      "cmnd[d_ip][$(i)]" string => " -d $(r[$(i)][destination_ip])", policy => "free",
      ifvarclass => and(isvariable("r[$(i)][destination_ip]"));

      # Format destination port strings
      "cmnd[d_port][$(i)]" string => "", policy => "free",
      ifvarclass => not(isvariable("r[$(i)][destination_port]"));
      "cmnd[d_port][$(i)]" string => " --dport $(r[$(i)][destination_port])", policy => "free",
      ifvarclass => and(isvariable("r[$(i)][destination_port]"));

      # Format destination ports strings (used with multiport)
      "cmnd[d_ports][$(i)]" string => "", policy => "free",
      ifvarclass => not(isvariable("r[$(i)][destination_ports]"));
      "cmnd[d_ports][$(i)]" string => " --match multiport --dports $(r[$(i)][destination_ports])", policy => "free",
      ifvarclass => and(isvariable("r[$(i)][destination_ports]"));

      # Format source port strings
      "cmnd[s_port][$(i)]" string => "", policy => "free",
      ifvarclass => not(isvariable("r[$(i)][source_port]"));
      "cmnd[s_port][$(i)]" string => " --sport $(r[$(i)][source_port])", policy => "free",
      ifvarclass => and(isvariable("r[$(i)][source_port]"));

      # Add default protocol = tcp if not defined
      "cmnd[proto][$(i)]" string => "tcp", policy => "free",
      ifvarclass => not(isvariable("r[$(i)][protocol]"));
      "cmnd[proto][$(i)]" string => "$(r[$(i)][protocol])",
      policy => "free", ifvarclass => and(isvariable("r[$(i)][protocol]"));

      # Format icmp protocol type if icmp has been defined in rule as [protocol]
      "cmnd[icmp_type][$(i)]" string => "", policy => "free",
      ifvarclass => not(isvariable("r[$(i)][icmp_type]"));
      "cmnd[icmp_type][$(i)]" string => " --icmp-type $(r[$(i)][icmp_type])", policy => "free",
      ifvarclass => and(isvariable("r[$(i)][icmp_type]"));

      # Format additional custom options if defined in rule (NOT USED YET)
      "cmnd[options][$(i)]" string => "", policy => "free",
      ifvarclass => not(isvariable("r[$(i)][custom_options]"));
      "cmnd[options][$(i)]" string => "$(r[$(i)][custom_options])", policy => "free",
      ifvarclass => and(isvariable("r[$(i)][custom_options]"));

      # Add default chain = INPUT if not defined
      "cmnd[chain][$(i)]" string => "INPUT", policy => "free",
      ifvarclass => not(isvariable("r[$(i)][chain]"));
      "cmnd[chain][$(i)]" string => "$(r[$(i)][chain])", policy => "free",
      ifvarclass => and(isvariable("r[$(i)][chain]"));

      # Add default target = ACCEPT if not defined
      "cmnd[target][$(i)]" string => "ACCEPT", policy => "free",
      ifvarclass => not(isvariable("r[$(i)][target]"));
      "cmnd[target][$(i)]" string => "$(r[$(i)][target])", policy => "free",
      ifvarclass => and(isvariable("r[$(i)][target]"));

      # Add default context/class = any (always true) if not defined
      # USE: context will implement iptables rule only if specified class(s) is defined in CFEngine
      "cmnd[context][$(i)]" string => "any", policy => "free",
      ifvarclass => not(isvariable("r[$(i)][context]"));
      "cmnd[context][$(i)]" string => "$(r[$(i)][context])", policy => "free",
      ifvarclass => and(isvariable("r[$(i)][context]"));

      # Extract comment if defined (for documentation and readability in originating .json file)
      # Currently comments are dropped except for debugging purposes.
      # However, they could be pushed onto a reporting/log bundle
      "comment[$(i)]" string => "No comment supplied in json file", policy => "free",
      ifvarclass => not(isvariable("r[$(i)][comment]"));
      "comment[$(i)]" string => "$(r[$(i)][comment])", policy => "free",
      ifvarclass => and(isvariable("r[$(i)][comment]"));

  insert_lines:
      "*filter";
      ":INPUT $(p[input])";
      ":FORWARD $(p[forward])";
      ":OUTPUT $(p[output])";
      "-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT";
      "-A $(cmnd[chain][$(i)])$(cmnd[in_iface][$(i)])$(cmnd[s_ip][$(i)])$(cmnd[d_ip][$(i)]) -p $(cmnd[proto][$(i)]) -m $(cmnd[proto][$(i)])$(cmnd[s_port][$(i)])$(cmnd[d_ports][$(i)])$(cmnd[d_port][$(i)])$(cmnd[icmp_type][$(i)]) -j $(cmnd[target][$(i)])"
      ifvarclass => and("$(cmnd[context][$(i)])");
      "COMMIT";

  classes:
      "second_pass" expression => "any";
      
  reports:      
    (DEBUG|DEBUG_iptables)::
      "=== $(this.bundle) ===";
      "Comment for filter rule $(i) = $(comment[$(i)])"
        ifvarclass => and("$(cmnd[context][$(i)])");

      #"$(this.bundle): $(i) icmp_type = $(r[$(i)][icmp_type])";
      #"$(this.bundle): $(i) cmnd[icmp_type] = $(cmnd[icmp_type][$(i)])";
}
