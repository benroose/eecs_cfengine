##############################################################################
#
#   manage/remote_desktop/main.cf - EECS xrdp service and desktop environment install and configuration
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################



# PROTIP: Use body file control to help make modular policy.
# "There can be only one" body common control per policy entry (promises.cf,update.cf)

# TESTING ONLY:INPUT STANDARD LIBRARY and HOST CLASSIFICATION (Remove after testing)
body file control
{
      inputs => { "$(sys.libdir)/stdlib.cf",
		  "$(sys.workdir)/inputs/services/eecs/classification/host_role/main.cf" };
}

######################################################################
# Public entry point: xrdp(on) or xrdp(off)
######################################################################

# NOTES for future development of configuration:
# 1. 

# bundle agent xrdp
bundle agent xrdp(state)
# @description: install and configure the xrdp service.
{
  vars:
      
      "xrdp_exec" string => "/usr/sbin/xrdp";

  classes:
    ## DEFINE SERVER STATES
      # "on"  expression => "any";
      "on"  expression => strcmp("$(state)","on");
      "off" expression => strcmp("$(state)","off");

      "xrdp_exists"
      	expression => fileexists( "$(xrdp_exec)" );
   
  methods:

    off.xrdp_exists::
      "ensure xrdp service is stopped if xrdp bundle is off"
      	usebundle => standard_services( "xrdp", "stop" ),
      	classes => if_ok("xrdp_off");

    ## ENSURE SERVICES ARE RUNNING AND CONFIGURED
    on.xrdp_exists::
      "ensure xrdp service is running if xrdp bundle is on"
      	usebundle => standard_services( "xrdp", "start" ),
      	classes => if_ok("xrdp_on");

      "generate all xrdp variables"  usebundle => xrdp_vars,
        inherit=> "true";

      "configure xrdp files"
      	usebundle => configure_xrdp("xrdp_vars"),
        inherit=> "true",
        classes => results("bundle", "xrdp_config");

      "install guacamole guacctl and guacget script"
      	usebundle => install_guacctl("xrdp_vars"),
        classes => results("bundle", "install_guacctl");

    ## RESTARTING SERVICES AFTER INSTALLATION AND CONFIGURATION
    on.xrdp_config_repaired.!NO_RESTARTS::
      "restart xrdp service if configuration changed"
      	usebundle => standard_services( "xrdp", "restart" ),
      	classes => if_ok("xrdp_restart");

    ## INSTALL ALL SOFTWARE
    on.install_software::
      "generate all xrdp variables"  usebundle => xrdp_vars,
        inherit=> "true";

      "ensure dependent packages are installed"
    	usebundle => package_latest("$(xrdp_vars.dependent_packages)"),
        classes => results("bundle", "dependent_packages_install"),
        comment => "pull package list from xrdp_vars";

      "ensure absent packages are removed"
    	usebundle => package_absent("$(xrdp_vars.absent_packages)"),
        classes => results("bundle", "absent_packages_remove"),
        comment => "pull package list from xrdp_vars";

      "install guacamole guacctl and guacget script"
      	usebundle => install_guacctl("xrdp_vars"),
        classes => results("bundle", "guacctl_install");

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_config)::
      "=== $(this.bundle) ===";

      "xrdp is not installed on this host"
        ifvarclass => "!xrdp_exists";
      "xrdp is turned off"
        ifvarclass => "xrdp_off";
      "xrdp is turned on and running"
        ifvarclass => "xrdp_on";
      "xrdp restarted due to configuration change"
        ifvarclass => "xrdp_restart";

      "$(xrdp_vars.dependent_packages) installed"
        ifvarclass => "dependent_packages_install_repaired";
      "$(xrdp_vars.absent_packages) removed"
        ifvarclass => "absent_packages_remove_repaired";
      "guacamole guacctl installed"
        ifvarclass => "guacctl_install_repaired";
      "xrdp configured"
        ifvarclass => "xrdp_repaired";
}

######################################################################

bundle agent xrdp_vars(params)
{
  vars:
    ## INSTALL/REMOVE PARAMETERS FOR ALL SOFTWARE
    debian::
      "dependent_packages" slist => { "xrdp", "lxde", "lightdm", "accountsservice", },
        comment => "install xrdp service, lxde desktop environment, lightdm with its accountsservice ";

      "absent_packages" slist => { "network-manager", "wicd", "wicd-daemon", "wicd-gtk", "python-wicd", "wireless-tools", "wpasupplicant", "lxlock", "light-locker", "xscreensaver", "xscreensaver-data", "clipit", "deluge", "deluge-gtk", "deluge-common", "firefox-esr", },
        comment => "remove all desktop/GUI-based network, screenlock, screensaver, torrent, web-browser packages from server";

      "guacctl_download_weblink"  string => "https://raw.githubusercontent.com/apache/guacamole-server/master/bin/guacctl";


    ## SESMAN.INI CONFIGURATION
      "sesman_ini_file" string => "/etc/xrdp/sesman.ini";
      "sesman_ini_template" string => "$(this.promise_dirname)/data/sesman.ini.mustache";

      "sesman_FuseMountName" string => "/tmp/$HOME_xrdp_drive_redirect_not_used",
        comment => "default sesman.ini creates thinclient_drives directory in user home which can cause node lock up issues during rebooting if users did not logout correctly and node attempts to unmount this subdirectory located in the NFS mounted user home. So moving xrdp redirection directory to local /tmp. fusermount will continue to complain it fails to open mountpoint as a user logs into node, likely due to not implementing RDP drive redirection in guacamole server";

    ## XRDP.INI CONFIGURATION
      "xrdp_ini_file" string => "/etc/xrdp/xrdp.ini";
      "xrdp_ini_template" string => "$(this.promise_dirname)/data/xrdp.ini.mustache";

      "xrdp_allow_channels" string => "true",
        comment => "xrdp allow_channels=true needed for guacamole remote clipboard and printing functionality.";

    ## XWRAPPER CONFIGURATION
      "xwrapper_config_file" string => "/etc/X11/Xwrapper.config";
      "xwrapper_config_template" string => "$(this.promise_dirname)/data/xwrapper.config.mustache";

      # "xwrapper_allowed_users" string => "console"; # default value
      "xwrapper_allowed_users" string => "anybody"; # xrdp required value

    ## LXDE CONFGURATION
      "lxde_autostart_file" string => "/etc/xdg/lxsession/LXDE/autostart";
      "lxde_autostart_template" string => "$(this.promise_dirname)/data/lxde_autostart.mustache";

      "lxpanel_default_panel_file" string => "/etc/xdg/lxpanel/default/panels/panel";
      "lxpanel_lxde_panel_file" string => "/etc/xdg/lxpanel/LXDE/panels/panel";
      "lxde_default_panel_template" string => "$(this.promise_dirname)/data/lxde_default_panel.mustache";

      "lxde_logout_script" string => "/usr/bin/lxde-logout";
      "lxde_logout_template" string => "$(this.promise_dirname)/data/lxde_logout.mustache";

      "lxde_default_backgroundfile" string => "/usr/share/lxpanel/images/background.png";

      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
}

######################################################################

bundle agent configure_xrdp(params)
# @description: configure xrdp files
{
  vars:
            
  files:
    debian::
      "$($(params).sesman_ini_file)"
        create => "true",
	perms => mog("644", "root", "root" ),
        template_method => "mustache",
        edit_template => "$($(params).sesman_ini_template)",
        classes => results("bundle", "sesman_ini"),
	comment => "expand /etc/xrdp/sesman.ini file using template from staging cache in this promise directory";

      "$($(params).xrdp_ini_file)"
        create => "true",
	perms => mog("644", "root", "root" ),
        template_method => "mustache",
        edit_template => "$($(params).xrdp_ini_template)",
        classes => results("bundle", "xrdp_ini"),
	comment => "expand /etc/xrdp/xrdp.ini file using template from staging cache in this promise directory";

      "$($(params).xwrapper_config_file)"
        create => "true",
	perms => mog("644", "root", "root" ),
        template_method => "mustache",
        edit_template => "$($(params).xwrapper_config_template)",
        classes => results("bundle", "xwrapper_config"),
	comment => "expand /etc/X11/xwrapper.config file using template from staging cache in this promise directory";

      "$($(params).lxde_autostart_file)"
        create => "true",
	perms => mog("644", "root", "root" ),
        template_method => "mustache",
        edit_template => "$($(params).lxde_autostart_template)",
        classes => results("bundle", "lxde_autostart"),
        comment => "expand /etc/xdg/lxsession/LXDE/autostart file using template from staging cache in this promise directory";

      "$($(params).lxpanel_default_panel_file)"
        create => "true",
	perms => mog("644", "root", "root" ),
        template_method => "mustache",
        edit_template => "$($(params).lxpanel_default_panel_template)",
        classes => results("bundle", "lxpanel_default_panel"),
	comment => "expand /etc/xdg/lxpanel/default/panels/panel file using template from staging cache in this promise directory";

      "$($(params).lxpanel_lxde_panel_file)"
        create => "true",
	perms => mog("644", "root", "root" ),
        template_method => "mustache",
        edit_template => "$($(params).lxde_default_panel_template)",
        classes => results("bundle", "lxpanel_lxde_panel"),
	comment => "expand /etc/xdg/lxpanel/LXDE/panels/panel file using template from staging cache in this promise directory";

      "$($(params).lxde_logout_script)"
        create => "true",
	perms => mog("755", "root", "root" ),
        template_method => "mustache",
        edit_template => "$($(params).lxde_logout_template)",
        classes => results("bundle", "lxde_logout"),
	comment => "expand /usr/bin/lxde-logout script using template from staging cache in this promise directory
                    NOTE: for a terminal server we want for user to only have the ability to logout!";
     
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_config)::
      "=== $(this.bundle) ===";

      "$($(params).sesman_ini_file) edited"
        ifvarclass => "sesman_ini_repaired";
      "$($(params).xrdp_ini_file) edited"
        ifvarclass => "xrdp_ini_repaired";
      "$($(params).xwrapper_config_file) edited"
        ifvarclass => "xwrapper_config_repaired";
      "$($(params).lxde_autostart_file) edited"
        ifvarclass => "lxde_autostart_repaired";
      "$($(params).lxpanel_default_panel_file) edited"
        ifvarclass => "lxpanel_default_panel_repaired";
      "$($(params).lxpanel_lxde_panel_file) edited"
        ifvarclass => "lxpanel_lxde_panel_repaired";
      "$($(params).lxde_logout_script) edited"
        ifvarclass => "lxde_logout_repaired";
}

######################################################################

bundle agent install_guacctl(params)
# @decription: manual installer for guacamole CLI download command guacctl and a symlink for guacget
{
  vars:
      "guacctl_exec" string => "guacctl";
      "guacget_exec" string => "guacget";
      "exec_dir" string => "/usr/local/bin/";

    debian::
      "dependent_packages"  slist => {  },
        comment => "";

  classes:
      "exec_exists"
        expression => fileexists("$(exec_dir)/$(guacctl_exec)");

  files:
      "$(exec_dir)/$(guacctl_exec)"
	perms => mog("555", "root", "root" ),
        classes => results("bundle", "guacctl_perms"),      
       comment => "ensure execute permissions on guacctrl";

    exec_exists::
      "$(exec_dir)/$(guacget_exec)"
        move_obstructions => "true",
        link_from => linkfrom( "$(exec_dir)/$(guacctl_exec)", "symlink" ),
        comment => "create symbolic link to guacctl for the guacget shortcut (script will run guacctl --download)";

  commands:
    !exec_exists::
      "/usr/bin/wget -q --timeout=10 -O $(guacctl_exec) $($(params).guacctl_download_weblink)" 
        contain => in_dir_shell("$(exec_dir)"),
        classes => results("bundle", "downloaded_file"),
        comment => "download the script file";
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_config)::
      "=== $(this.bundle) ===";

    (DEBUG|DEBUG_config).downloaded_file_repaired::
      "guacctl script downloaded and installed";
      
    (DEBUG|DEBUG_config).exec_exists::
      "guacctl is installed";
}

#############################################
