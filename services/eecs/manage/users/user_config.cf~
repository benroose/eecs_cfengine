##############################################################################
#
#   manage/users/user_config.cf - EECS user specific configuration
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################



# PROTIP: Use body file control to help make modular policy.
# "There can be only one" body common control per policy entry (promises.cf,update.cf)

# TESTING ONLY:INPUT STANDARD LIBRARY (Remove after testing)
body file control
{
      inputs => { "$(sys.libdir)/stdlib.cf",
		  "$(sys.workdir)/inputs/services/eecs/classification/host_role/main.cf" };
}

######################################################################
# Public entry point: bundle
######################################################################

# NOTES for future development of configuration:
# 1. Problem: classes are currently activated upon first user found, what if there are multiple users!
# 2. Problem: How to check for user directory on server without erroring out if not found!

bundle agent install_user_configs
{
      # @decription: manual installer for matlab including a fully silent install

  vars:
      "username" slist => getvalues( "classify_host.user_configs" ),
        comment => "List of username with custom config files stored in host_by_key directory";
      "json_str_username" string => format("%S", "classify_host.user_configs");
      
  classes:
#      "matlab_dir_is_present"
#        expression => fileexists("$(matlab_dir)");
#      "executable_link_is_present"
#        expression => fileexists("$(executable_link)");
      
  methods:
      "user configuration settings"  usebundle => user_config_vars;
      "configure user files"  usebundle => config_user_files("user_config_vars.conf");

#    "$(username)_have_ssh_key_pair"|"$(username)_have_ssh_pub_key_only"::
      "copy ssh keys into user profile"
	usebundle => manage_ssh_keys("user_config_vars.conf"),
	ifvarclass => or( "$(username)_have_ssh_key_pair", "$(username)_have_ssh_pub_key_only" );
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
}


bundle agent user_config_vars(settings)
{
  vars:
      "conf[username]" string => "$(install_user_configs.username)",
        comment => "List of username with custom config files stored in host_by_key directory";
      "conf[json_str_username]" string => "$(install_user_configs.json_str_username)";

      "conf[dist]"
	string => "$(sys.workdir)/host_by_key/$(sys.key_digest)/$(conf[username])/";

      "conf[cache]"
	string => "$(sys.workdir)/state/config/$(conf[username])",
        comment => "This directory is where agents will cache custom user config files
                    (for offline enforcement).";

      "conf[home_path]" string => "/home/$(install_user_configs.username)";

      # Set the owner group the same as the home directory owner
      "conf[path_owner]"
      string => filestat( "$(conf[home_path])", uid ),
      comment => "assume the owner will be the the same as the user home directory";

      "conf[path_group]"
      string => filestat( "$(conf[home_path])", gid ),
      comment => "assume the group will be the the same as the user home directory";

      "conf[path_mode]"
      string => "400",
      comment => "default restrictive permissions, but CFEngine is managing the
                  file, so why encourage anyone to make local edits?";

      "conf[ssh_pri_key]" string => "id_rsa";
      "conf[ssh_pub_key]" string => "id_rsa.pub";
      "conf[emacs_template]" string => "emacs.mustache";
      "conf[emacs_path]" string => "/home/$(conf[username])/.emacs";
      "conf[config_dir]" string => ".config/";

      
#      "i3_config" string => "i3/config";
#      "i3_status" string => "i3/i3status.conf";

    any::
      # Copy configuration parameters passed, into a local array
      "param_keys"          slist  => getindices("$(settings)");
      "conf[$(param_keys)]" string => "$($(settings)[$(param_keys)])",
	policy => "overridable";

  classes:
      "$(conf[username])_have_ssh_key_pair"
	and => { fileexists("$(conf[cache])/$(conf[ssh_pri_key])"), fileexists("$(conf[cache])/$(conf[ssh_pub_key])") },
	scope => "namespace";

        "$(conf[username])_have_ssh_pub_key"
	expression => fileexists( "$(conf[cache])/$(conf[ssh_pub_key])" ),
	scope => "namespace";

      "$(conf[username])_have_emacs_config"
	expression => fileexists( "$(conf[cache])/$(conf[emacs_config])" ),
	scope => "namespace";

      "$(conf[username])_have_user_config_dir"
	expression => fileexists( "$(conf[cache])/$(conf[config_dir])." ),
	scope => "namespace";

      "$(conf[username])_have_i3_config"
      and => { fileexists( "$(conf[i3_config])" ), fileexists( "$(conf[i3_status])" ) };
    
      
  reports:
    (DEBUG|DEBUG_config)::
      "-== $(this.bundle) ==-";
      "username listed with configs: $(conf[username])";
      "Contents of 'user_configs' data container: '$(conf[json_str_username])'";

      "user home path:   $(conf[home_path])";
      "user home UID:    $(conf[path_owner])";
      "user home GID:    $(conf[path_group])";
     
    #"$(conf[username])_have_ssh_pub_key"::
    #  "$(this.bundle): $(conf[username]) ssh public key file found and class generated";

    #"$(conf[username])_have_ssh_key_pair"::
    #  "$(this.bundle): $(conf[username]) ssh priv/pub key files found and class generated";

}

######################################################################
      
bundle agent config_user_files(settings)
# @description: copy user specific configuration files from policyhub and deploy to correct directories
{
  vars:
      "username" string => "$($(settings)[username])";
      
  classes:    

  files:
      "$($(settings)[cache])/."
      create => "true";

    policy_server::
      "$($(settings)[cache])"
      perms => mo("600","root"),
      copy_from => local_dcp( "$($(settings)[dist])" ),
      depth_search => recurse("inf"),
      action => if_elapsed("60"),
      comment => "if host is the policy server then perform a local recursive copy of entire user_config directory";

    !policy_server::
      "$($(settings)[cache])"
      perms => mo("600","root"),
      copy_from => secure_cp( "$($(settings)[dist])",$(sys.policy_hub) ),
      depth_search => recurse("inf"),
      action => if_elapsed("60"),
      comment => "if host is any other client then perform a secure remote recursive copy of entire user_config directory";

    have_user_config_dir::
      "/home/$($settings)[username])/$($(settings)[config_dir])"
      perms => mog( "$($(settings)[path_mode])","$($(settings)[path_owner])","$($(settings)[path_group])" ),
      copy_from => local_dcp( "$($(settings)[cache])$($(settings)[config_dir])" ),
      depth_search => recurse("inf"),
      comment => "locally recursive copy anything in the .config directory to user's home if directory exists in the cache";
      
  methods:
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_config)::
#            "-== $(this.bundle) ==-";
#      "username listed with configs: '$(username)'";
#      "Contents of 'user_configs' data container: '$($(settings)[json_str_username])'";
}

########################################################

bundle agent manage_ssh_keys(settings)
# @description: copies ssh public key for user login from policy server to authorized_keys file on system
# and copies public and private keys 
{
  vars:
      "username" string => "$($(settings)[username])";
      "ssh_dir" string => "/home/$($(settings)[username])/.ssh";
      "authorized_keys_file" string => "$(ssh_dir)/authorized_keys";
      "ssh_pri_key_location" string => "$(ssh_dir)/$($(settings)[ssh_pri_key])";
      "ssh_pub_key_location" string => "$(ssh_dir)/$($(settings)[ssh_pub_key])";
      "ssh_pri_key_cache" string => "$($(settings)[cache])/$($(settings)[ssh_pri_key])";
      "ssh_pub_key_cache" string => "$($(settings)[cache])/$($(settings)[ssh_pub_key])";

  files:
      "$(ssh_dir)/."
	create => "true",
	perms => mog( "700","$($(settings)[path_owner])","$($(settings)[path_group])" ),
	comment => "make sure user .ssh directory has been created with correct permissions";

      "$(authorized_keys_file)"
        edit_line => insert_file_if_no_line_matching("$(username)","$(ssh_pub_key_cache)"),
	action => if_elapsed("60"),
        create => "true",
	perms => mog( "700","$($(settings)[path_owner])","$($(settings)[path_group])" ),
        comment => "Edit the authorized keys file and add public key to the user's personal ssh keyring";

    "$($(settings)[username])_have_ssh_key_pair"::
      
      "$(ssh_pri_key_location)"
      perms => mog( "400","$($(settings)[path_owner])","$($(settings)[path_group])" ),
      copy_from => local_dcp( $(ssh_pri_key_cache) ),
      comment => "copy user ssh private key to home directory";

      "$(ssh_pub_key_location)"
      perms => mog( "444","$($(settings)[path_owner])","$($(settings)[path_group])" ),
      copy_from => local_dcp( $(ssh_pub_key_cache) ),
      comment => "copy user ssh public key to home directory";
            
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_manage_ssh_authorized_keys)::
            "-== $(this.bundle) ==-";
      "ssh public key in authorized key file: $(authorized_keys_file)";
      "ssh files copied: $(ssh_pri_key_location) and $(ssh_pub_key_location)"
      	ifvarclass => "$(username)_have_ssh_key_pair";
      
#      "ssh key dist file: $(ssh_key_dist)";
#      "ssh key cached file: $(ssh_key_cache)";

}

#####################################################################

bundle edit_line insert_file_if_no_line_matching(user,file)
{
  classes:
      "have_user" expression => regline("$(user).*","$(this.promiser)");

  insert_lines:
    !have_user::
      "$(file)"
      insert_type => "file";
}

######################################################################

bundle agent emacs_config(settings)
{
  vars:
      "template"
      string => "$($(settings)[emacs_template])",
      comment => "Path to mustache template used to render config";

      "path"
      string => "$($(settings)[emacs_path])",
      comment => "Path to the emacs configuration file";

  files:
      "$(path)"
      edit_template => "$(template)",
      template_method => "mustache",
      perms => mog( "$($(settings)[path_mode])","$($(settings)[path_owner])","$($(settings)[path_group])" ),
      comment => "If we don't render the template the config won't be as
                 needed. We apply restrictive permissions with the ownership of
                 the parent directory so that the user does not have to fiddle
                 with setting them.";

  reports:
    DEBUG|DEBUG_emacs_config::
      "-== $(this.bundle) ==-";
      "Template: $(template)";
      "Config:   $(path)";
}
