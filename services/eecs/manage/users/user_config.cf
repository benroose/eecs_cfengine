##############################################################################
#
#   manage/users/user_config.cf - EECS user configuration file management
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################



# PROTIP: Use body file control to help make modular policy.
# "There can be only one" body common control per policy entry (promises.cf,update.cf)

# TESTING ONLY:INPUT STANDARD LIBRARY and HOST CLASSIFICATION (Remove after testing)
# body file control
# {
#       inputs => { "$(sys.libdir)/stdlib.cf",
# 		  "$(sys.workdir)/inputs/services/eecs/classification/host_role/main.cf" };
# }

######################################################################
# Public entry point: manage_user_configurations
######################################################################

# NOTES for future development of configuration:
# 1. 

bundle common user_config_settings
{
  vars:
           
      "configs_dist"
        string => "/srv/cfengine/configs/user_configs/",
        comment => "server location where agents look for each user configuration files.";
      "configs_cache"
        string => "$(sys.workdir)/state/configs_cache/",
        comment => "local directory where agents cache user configuration files
                    (for offline staging and enforcement).";
      "templates_dist"
        string => "/srv/cfengine/configs/user_templates/",
        comment => "server location where agents look for each user configuration templates.";
      "templates_cache"
        string => "$(sys.workdir)/state/templates_cache/",
        comment => "local directory where agents cache configuration templates
                    (for offline staging and enforcement).";

      "username" slist => getvalues( "classify_host.user_configuration" ),
        comment => "list of usernames with centrally managed config files stored /srv/cfengine/configs/ directory";
      "json_str_username" string => format("%S", "classify_host.user_configuration");

      "default_mode" string => "600";

}

######################################################################

bundle agent manage_user_configurations
# @description: bundle to ensure user configs are copied to required hosts
{

  vars:
      
      
  methods:

      "copy user config files from policyhub to host"
	usebundle => ensure_user_configs("user_config_settings"),
        comment => "add a user's config files to /srv/cfengine/configs/user_configs/$(user) and add user to host in host_data json under user_configuration";

      "copy and expand user config files using templates from policyhub to host"
	usebundle => ensure_user_templates("user_config_settings"),
        comment => "add a user's config template to /srv/cfengine/configs/user_templates/$(user) and add user to host in host_data json under user_configuration";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_config)::
      "=== $(this.bundle) ===";
}

######################################################################

bundle agent ensure_user_configs(settings)
# @description: ensure user specific configuration files are deployed
{
  vars:
      "user" slist => { "@($(settings).username)" };
      "user_dir[$(user)]" string => "/home/$(user)/";

      "configs_dist[$(user)]" string => "$($(settings).configs_dist)$(user)/";
      "configs_cache[$(user)]" string => "$($(settings).configs_cache)$(user)/";

      "mode" string =>"$($(settings).default_mode)";

      # Set the owner group the same as the home directory owner
      "path_owner[$(user)]" string => filestat( "$(user_dir[$(user)])", uid ),
      comment => "assume the owner will be the the same as the user home directory";

      "path_group[$(user)]" string => filestat( "$(user_dir[$(user)])", gid ),
      comment => "assume the group will be the the same as the user home directory";

      
  classes:
      "$(user)_dir_exists"
	expression => fileexists( "$(user_dir[$(user)])." );

      "$(user)_have_cached_configs"
	expression => fileexists( "$(configs_cache[$(user)])/." );
      
  files:
      "$(configs_cache[$(user)])/."
    	create => "true",
        comment => "ensure the cache directory exists";


    policy_server::
      "$(configs_cache[$(user)])"
      perms => mog("600","root","root"),
      copy_from => local_dcp( "$(configs_dist[$(user)])" ),
      depth_search => recurse("inf"),
      action => if_elapsed("60"),
      comment => "if host is policy server then perform local recursive copy of entire user_config directory for local staging";

    !policy_server::
      "$(configs_cache[$(user)])"
      perms => mog("600","root","root"),
      copy_from => secure_cp( "$(configs_dist[$(user)])",$(sys.policy_hub) ),
      depth_search => recurse("inf"),
      action => if_elapsed("60"),
      comment => "if host is another client then perform secure remote recursive copy of entire user_config directory for local staging";

    
    any::
      "$(user_dir[$(user)])"
	perms => og( "$(path_owner[$(user)])","$(path_group[$(user)])" ),
	copy_from => local_dcp( "$(configs_cache[$(user)])" ),
	depth_search => recurse("inf"),
        classes => results("bundle", "$(user)_config_files"),
	comment => "copy all user configs from local staging cache to user home and ensure correct permissions
                    only set permissions of owner/group since this will set perms of all files in user home!",
	ifvarclass => and( "$(user)_dir_exists", "$(user)_have_cached_configs" );

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_config)::
      "=== $(this.bundle) ===";
      "username listed with configs: $(user)";
      "user home path:    $(user_dir[$(user)])";
      "default file mode: $(mode)";
      "user home UID:     $(path_owner[$(user)])";
      "user home GID:     $(path_group[$(user)])";

      "configs_dist:      $(configs_dist[$(user)])";
      "configs_cache:     $(configs_cache[$(user)])";
      
      "configuration files copied for $(user)"
      	ifvarclass => "$(user)_config_files_repaired";

}

########################################################

bundle agent ensure_user_templates(settings)
# @description: ensure user specific template based files are deployed
{
  vars:
      "user" slist => { "@($(settings).username)" };
      "user_dir[$(user)]" string => "/home/$(user)/";

      "templates_dist[$(user)]" string => "$($(settings).templates_dist)$(user)/";
      "templates_cache[$(user)]" string => "$($(settings).templates_cache)$(user)/";

      "mode" string =>"$($(settings).default_mode)";

      # Set the owner group the same as the home directory owner
      "path_owner[$(user)]" string => filestat( "$(user_dir[$(user)])", uid ),
      comment => "assume the owner will be the the same as the user home directory";

      "path_group[$(user)]" string => filestat( "$(user_dir[$(user)])", gid ),
      comment => "assume the group will be the the same as the user home directory";

      "file_path[$(user)][ssh_config]" string => "$(user_dir[$(user)])/.ssh/config";
      "template_path[$(user)][ssh_config]" string => "$(templates_cache[$(user)])ssh_config.template";


      "file_paths[$(user)]" slist => getvalues( file_path );
      "template_paths[$(user)]" slist => getvalues( template_path );
      
  classes:
      "$(user)_dir_exists"
	expression => fileexists( "$(user_dir[$(user)])." );

      "$(user)_have_cached_templates"
	expression => fileexists( "$(templates_cache[$(user)])/." );
      
  files:
      "$(templates_cache[$(user)])/."
    	create => "true",
        comment => "ensure the cache directory exists";

    policy_server::
      "$(templates_cache[$(user)])"
      # perms => mog("600","root","root"),
	copy_from => local_dcp( "$(templates_dist[$(user)])" ),
	depth_search => recurse("inf"),
	action => if_elapsed("60"),
	comment => "if host is policy server then perform local recursive copy of entire user_config directory for local staging";

    !policy_server::
      "$(templates_cache[$(user)])"
      # perms => mog("600","root","root"),
	copy_from => secure_cp( "$(templates_dist[$(user)])",$(sys.policy_hub) ),
	depth_search => recurse("inf"),
	action => if_elapsed("60"),
	comment => "if host is another client then perform secure remote recursive copy of entire user_config directory for local staging";

    any::
      "$(file_paths[$(user)])"
	perms => mog( "$(mode)","$(path_owner[$(user)])","$(path_group[$(user)])" ),
        create => "true",
        edit_template => "$(template_paths[$(user)])",
        classes => results("bundle", "$(user)_template_files"),
	comment => "expand all user templates from local staging cache to user home and ensure correct permissions",
	ifvarclass => and( "$(user)_dir_exists", "$(user)_have_cached_templates" );
 
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_config)::
      "=== $(this.bundle) ===";
      # "username listed with configs: $(user)";
      # "user home path:    $(user_dir[$(user)])";
      # "default file mode: $(mode)";
      # "user home UID:     $(path_owner[$(user)])";
      # "user home GID:     $(path_group[$(user)])";

      "templates_dist:      $(templates_dist[$(user)])";
      "templates_cache:     $(templates_cache[$(user)])";

      "templates found: $(template_paths[$(user)])";
      "configuration files expanded: $(file_paths[$(user)])";
      
      "configuration files copied from templates for $(user)"
      	ifvarclass => "$(user)_template_files_repaired";

}

########################################################
