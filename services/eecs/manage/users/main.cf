##############################################################################
#
#   manage/users/ldap.cf - EECS manual installer for LDAP user authentication
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################

# TESTING ONLY:INPUT STANDARD LIBRARY (Remove after testing)
body file control
{
      inputs => { "$(sys.libdir)/stdlib.cf", "$(sys.workdir)/inputs/services/eecs/classification/host_role/main.cf" };
}

######################################################################
# Public entry point: manage_users
######################################################################

# NOTES for future development of configuration:
# 1. fix LDAP authentication
# 2. have the ssh_key_distribution look for user public keys located on policy server (per host connection key directory) and then add all the user keys found in that directory

bundle common user_settings
{
  vars:

      "password_dist"
        string => "$(sys.workdir)/host_by_key/$(connection.key)/root.hash",
        comment => "This is where agents look for their root password hash.";

      "ssh_key_dist"
        string => "$(sys.workdir)/host_by_key/$(connection.key)/ssh_keys/",
        comment => "This is where agents look for each user ssh public key.";

      "password_cache"
        string => "$(sys.workdir)/state/passwd/root.hash",
        comment => "This is where agents will cache the hashed root password locally
        (for offline enforcement).";

      "ssh_key_cache"
        string => "$(sys.workdir)/state/ssh_key_cache/$(user).pub",
        comment => "This is where agents will cache the user ssh public key locally
        (for offline enforcement).";

      "home_skeleton" string => "/etc/skel";

      "shared_group_primary" string => "users";
      "group_secondary" string => "audio,plugdev";

    local_user_shared_group|local_user_own_group::
      "user" slist => getindices( "classify_host.wsu_users" );
      "json_str_users" string => format("%S", "classify_host.wsu_users");

}

########################################################

bundle server passwd_access
# @description: shares the path on policy hub for password hash and ssh public keys with access restricted to each host connection key directory
{
  access:

      # It's important that this path have $(connection.key) in it!
      "$(user_settings.password_dist)"
        admit_keys =>  { $(connection.key) },
        comment => "Grant each host to access its own hashed root password. We
                  assume that each host has a unique keypair";

      "$(user_settings.ssh_key_dist)"
        admit_keys =>  { $(connection.key) },
        comment => "Grant each host to access user public ssh keys. We
                  assume that each host has a unique keypair";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
}

########################################################

bundle agent manage_users
# @description: runs the bundles for different user management depending on the authentication method specified in the classification host_data.json file
{
  vars:

      # for ssh keys, need to check if there are any user.pub files in ssh_key_dist directory
      # then build a user list from .pub files in that directory!
      
  methods:      
      "manage root password"
      usebundle => manage_root_passwd("user_settings");

#      "manage system users"
#      usebundle => manage_system_users("root_passwd_settings");

    local_user_shared_group::
      "manage local users"
      usebundle => manage_local_users_shared_group("user_settings");

    local_user_own_group::
      "manage ad users"
      usebundle => manage_local_users_own_group("user_settings");

#    pam_ldap::
#     "install and configure ldap client packages"
#      usebundle => install_ldap_client;

#      "manage ldap users"
#      usebundle => manage_ldap_users("user_settings");

    any::
#      "manage user ssh authorized keys"
#      usebundle => manage_ssh_authorized_keys("user_settings",$(user));
      
}

########################################################

bundle agent manage_root_passwd(settings)
# @brief This bundle is run by agents to enforce the local root password.
{
  vars:
    any::
      "passwd_dist" string => "$(sys.workdir)/host_by_key/$(sys.key_digest)/root.hash";
      "passwd_cache" string => "$($(settings).password_cache)";
      "passwd_cache_dir" string => dirname("$(passwd_cache)");

    have_cached_hashed_passwd::
      "root_hash" string => readfile($(passwd_cache), 4096);

  classes:
      "have_cached_hashed_passwd"
      expression => fileexists($(passwd_cache));

  files:
      "$(passwd_cache_dir)/."
      create => "true";
      
    policy_server::
      "$(passwd_cache)"
      perms => mo("600","root"),
      copy_from => local_dcp( $(passwd_dist) ),
      action => if_elapsed("60"),
      comment => "if host is the policy server then perform a local copy of the passwd hash file";

    !policy_server::
      "$(passwd_cache)"
      perms => mo("600","root"),
      copy_from => secure_cp( $(passwd_dist), $(sys.policy_hub) ),
      action => if_elapsed("60"),
      comment => "if host is any other client then perform a secure remote copy of the passwd hash file";

  users:
      "root"
      policy => "present",
      password => hashed_password($(root_hash));

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_manage_root_passwd)::
      "Password dist file: $(passwd_dist)";
      "Password cached file: $(passwd_cache)";
#      "root hash: $(root_hash)";
}

########################################################

bundle agent manage_local_users_shared_group(settings)
# @description: adds local user accounts to system with a shared primary group.
# Does NOT add or change user password
# SSSD/AD authentication can be used if user is a myWSU ID
{
  vars:
      
  users:
    linux.shared_group_exists_kept::
      "$($(settings).user)"
      policy => "present",
      description => "$(classify_host.wsu_users[$($(settings).user)])",
      shell => "/bin/bash",
      home_dir => "/home/$($(settings).user)",
      home_bundle => home_skel( "$($(settings).user)","$($(settings).shared_group_primary)", "$($(settings).home_skeleton)" ),
      group_primary => "$($(settings).shared_group_primary)",
      groups_secondary => { "$($(settings).group_secondary)" },
#      password => hashed_password( "!##lockedpassword##" ),
      comment => "add local user with shared group from wsu_users dataset gained via external host file
                 NOTE: local user password is not set by CFEngine, but can be authenticated from AD domain via sssd";

  methods:
      "ensure shared primary group exists"
      usebundle => group_exist( "$($(settings).shared_group_primary)" ),
      classes => results("bundle", "shared_group_exists");
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_manage_local_users)::
      "local user: $($(settings).user)";
      "Username: $(classify_host.wsu_users[$($(settings).user)])";
      "Contents of 'wsu_users' data container: $($(settings).json_str_users)";    
}

########################################################

bundle agent manage_local_users_own_group(settings)
# @description: adds local user accounts to system with their own primary group (group = user).
# Does NOT add or change user password
# SSSD/AD authentication can be used if user is a myWSU ID
{
  vars:
      
  users:
    linux::
      "$($(settings).user)"
      policy => "present",
      description => "$(classify_host.wsu_users[$($(settings).user)])",
      shell => "/bin/bash",
      home_dir => "/home/$($(settings).user)",
      home_bundle => home_skel( "$($(settings).user)","$($(settings).user)", "$($(settings).home_skeleton)" ),
#      group_primary => "$($(settings).user)",
      groups_secondary => { "$($(settings).group_secondary)" },
      comment => "add AD user (with group = user) from wsu_users dataset gained via external host file
                  user must be a myWSU ID but fullname can be the person's name (as set by description) 
                 NOTE: password is not set by CFEngine but can be authenticated from AD domain via sssd";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_manage_local_users)::
      "local user: $($(settings).user)";
      "Username: $(classify_host.wsu_users[$($(settings).user)])";
      "Contents of 'wsu_users' data container: $($(settings).json_str_users)";    
}

########################################################

bundle agent manage_local_users_custom_groups(settings)
# @description: adds local user accounts to system with their own primary group (group = user).
# Does NOT add or change user password
# SSSD/AD authentication can be used if user is a myWSU ID
{
  vars:
      
  users:
    linux::
      "$($(settings).user)"
      policy => "present",
      description => "$(classify_host.wsu_users[$($(settings).user)])",
      shell => "/bin/bash",
      home_dir => "/home/$($(settings).user)",
      home_bundle => home_skel( "$($(settings).user)","$($(settings).user)", "$($(settings).home_skeleton)" ),
#      group_primary => "$($(settings).user)",
      groups_secondary => { "$($(settings).group_secondary)" },
      comment => "add AD user (with group = user) from wsu_users dataset gained via external host file
                  user must be a myWSU ID but fullname can be the person's name (as set by description) 
                 NOTE: password is not set by CFEngine but can be authenticated from AD domain via sssd";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_manage_local_users)::
      "local user: $($(settings).user)";
      "Username: $(classify_host.wsu_users[$($(settings).user)])";
      "Contents of 'wsu_users' data container: $($(settings).json_str_users)";    
}

########################################################

bundle agent group_exist(group)
# @description: makes sure group exists on host
{
  classes:
      "group_absent"
      not => groupexists( "$(group)" );

  commands:
    linux.group_absent::
      "$(paths.groupadd)"
              args => "$(group)";
}

########################################################

bundle agent home_skel(user, group, skel)
# @description: copies skeleton files to new user home path
{
  files:
      "/home/$(user)/."
      create => "true",
      copy_from => seed_cp( $(skel) ),
      perms => mog("600", "$(user)", "$(group)"),
      depth_search => recurse_with_base( "inf" );
  reports:

    (DEBUG|DEBUG_home_skel)::
      "Creating home for user and group: $(user):$(group)";
      "Using skeleton path: $(skel)";
}

########################################################

bundle agent manage_ssh_authorized_keys(settings, user)
# @description: copies ssh public key for user login from policy server to authorized_keys file on system
# does not work yet!!
{
  vars:
      "ssh_key_dist" string => "$(sys.workdir)/host_by_key/$(sys.key_digest)/ssh_keys/$(user).pub";
      "ssh_key_cache"       string => "$($(settings).ssh_key_cache)";
      "ssh_key_cache_dir" string => dirname("$(ssh_key_cache)");

      "authorized_keys_file" string => "/home/$(user)/.ssh/authorized_keys";

  files:

      "$(ssh_key_cache_dir)/"
      create => "true";

    policy_server::
      "$(ssh_key_cache)"
      perms => mo("600","root"),
      copy_from => local_dcp( $(ssh_key_dist) ),
      action => if_elapsed("60"),
      comment => "Copy public keys from authorized location on into a cache on localhost";

    !policy_server::
      "$(ssh_key_cache)"
      perms => mo("600","root"),
      copy_from => secure_cp( $(ssh_key_dist), $(sys.policy_hub) ),
      action => if_elapsed("60"),
      comment => "Copy public keys from authorized location on policy server into a cache on localhost";

    any::
      "$(authorized_keys_file)"
      edit_line => insert_file_if_no_line_matching("$(user)","$(ssh_key_cache)"),
      action => if_elapsed("60"),
      comment => "Edit the authorized keys file and add public key to the user's personal ssh keyring";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_manage_ssh_authorized_keys)::
      "ssh key dist file: $(ssh_key_dist)";
      "ssh key cached file: $(ssh_key_cache)";

}

########################################################

bundle edit_line insert_file_if_no_line_matching(user,file)
{
  classes:
      "have_user" expression => regline("$(user).*","$(this.promiser)");

  insert_lines:
    !have_user::
      "$(file)"
      insert_type => "file";
}

########################################################
# NO LONGER USED
########################################################

bundle agent manage_ldap_users(settings)
# @description: adds local user accounts to system with LDAP password authentication
# LDAP SETUP IS OUTDATED - DO NOT USE!
{
  vars:
      
  users:
    linux.pam_ldap::
      "$($(settings).user)"
      policy => "present",
#      password => hashed_password( "!##lockedpassword##" ),
      description => "$(classify_host.wsu_users[$($(settings).user)])",
      shell => "/bin/bash",
      home_dir => "/home/$($(settings).user)",
      home_bundle => home_skel( "$($(settings).user)","$($(settings).group_primary)", "$($(settings).home_skeleton)" ),
      group_primary => "$($(settings).group_primary)",
#      groups_secondary => { "$($(settings).group_secondary)" },
      comment => "add ldap user from wsu_users dataset gained via external host file in classify_host bundle";

  methods:
    linux.pam_ldap::
      "remove user password"
      usebundle =>  ldap_remove_password( "$($(settings).user)" ),
      comment =>"For PAM to use LDAP to authenticate user, there must be no user entry in /etc/shadow file";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_manage_ldap_users)::
      "ldap user: $($(settings).user)";
      "Username: $(classify_host.wsu_users[$($(settings).user)])";
      "Contents of 'wsu_users' data container: $($(settings).json_str2)";    
}

########################################################

bundle agent ldap_remove_password(user)
{

  vars:
      "shadow_file" string => "/etc/shadow";

  files:
      "$(shadow_file)"
      create    => "false",
      edit_line => password_entry_removal("$(user)"),
      comment => "Remove user password entry from /etc/shadow for a user externally authenticated by LDAP";

  reports:

    (DEBUG|DEBUG_ldap_remove_password)::
      "User to remove from $(shadow_file): $(user)";
}

########################################################

bundle edit_line password_entry_removal(user)
{
  delete_lines:
      "$(user).*";
}
