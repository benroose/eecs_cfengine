##############################################################################
#
#   manage/users/main.cf - EECS users configuration
#   Maintained: Ben Roose, ver 0.1
#
#   SECURITY NOTICE: This policy should ONLY run if the host has the class "sysadmin" defined!
#
###############################################################################

# PROTIP: Use body file control to help make modular policy.
# "There can be only one" body common control per policy entry (promises.cf,update.cf)

# TESTING ONLY:INPUT STANDARD LIBRARY (Remove after testing)
body file control
{
      inputs => { "$(sys.libdir)/stdlib.cf" };
}

# Future upgrades:
# 1. check if enduser class is defined, and if so then remove the local host copy of the password hash file and remove the "local" users defined in it (do this before removing the file).

# PSEUDOCODE:
# FOR SECURITY, WE NEED TO SEPARATE THE PASSWORDS INTO SEPARATE TEXT FILES?
# 1. using classes (infrastructure, teaching, research) set remote path/filename variable
# 2. secure cp <pw_class>-hash.json with correct hashed passwords for users (inc. root) to a secure location (/root or /etc)
# 3. open <pw_class>-hash.json and set user indices and hashed password value pairs from json data containers using getindices()
# 4. Loop through all users with the users: section - creating user and setting the hashed password (including root, roose, and wallis)
# 5. rm the <pw_class>-hash.json file (clean up). Does this need to be done, since this information is now in /etc/shadow, so it is not a huge security risk??

# QUESTION: what is the best way to test users and passwords are consistent (or is it built into the users: section)?

bundle agent config_<service>
# @description: 
{

  vars:

  methods:

}

bundle agent main
{
  vars:
      # This is the hashed password for 'vagrant'
    debian_8::
      "root_hash"
      string => "$6$1nRTeNoE$DpBSe.eDsuZaME0EydXBEf.DAwuzpSoIJhkhiIAPgRqVKlmI55EONfvjZorkxNQvK2VFfMm9txx93r2bma/4h/";
}


########################################################

bundle agent local_users

{
  vars:

      "local_hash_file" string => "/root/cfengine/hash_file.json";
      
      "remote_server" string => "policyhub.cs.wichita.edu";

    # set the remote pathname for the password hash file specific to class name defined from the host classification
    infrastructure::
      "remote_hash_file" string => "/srv/cfengine/users/infrastructure-hash_file.json";

    teaching::
      "remote_hash_file" string => "/srv/cfengine/users/teaching-hash_file.json";

    research::
      "remote_hash_file" string => "/srv/cfengine/users/research-hash_file.json";

      # pull in data from external file (once copied from policy server) and create slist of users
    hash_file_exists::
      "system_user_data"
      data => readjson("$(local_hash_file)",3k),
            comment => "External data from json file for list of local admin users and hashed passwords for host.";

      "system_users" slist => getindices( system_user_data );

      "json_str" string => format("%S", system_user_data);
      # Just for printing seralized version of data container for debugging (note its JSON).

  classes:
      "hash_file_exists" expression => fileexists("$(local_hash_file)");
      
      
  files:
    # SECURITY-CHECK: make sure host is administrated by sysadmin (whenever password hash file is copied to the host)
    sysadmin::
      "$(local_hash_file)"
      copy_from => secure_cp("$(remote_hash_file)","$(remote_server)"),
      perms => mog ("600", "root", "root"),
      comment => "secure copy of the remote file with hashed passwords";

      
  users:
    # SECURITY-CHECK: make sure host is administrated by sysadmin (whenever users are added into host system)
    sysadmin.linux.hash_file_exists.TESTING::
      "$(system_users)"
      policy => "present",
      password => hashed_password( "$(system_user_data[$(users)])" ),
      home_dir => "/home/$(users)",
      group_primary => "users",
#      groups_secondary => { "security", "webadmin" },
      shell => "/bin/bash/",
#      home_bundle => setup_home_dir("$(system_users)"),
      if => isvariable("$(system_users)"),
      comment => "add system user from external file with their hashed password";

    sysadmin.linux.ldap_users_exist.TESTING::
      "$(ldap_users)"
      policy => "present",
      password => plain_password( "burn" ),
      home_dir => "/home/$(ldap_users)",
      group_primary => "users",
#      groups_secondary => { "security", "webadmin" },
      shell => "/bin/bash/",
#      home_bundle => setup_home_dir("$(users)"),
      if => isvariable("$(ldap_users)"),
      comment => "add ldap user from external hosts file";

  methods:
    sysadmin.linux.ldap_users_exist.TESTING::
      "delete user password" usebundle => "ldap_user($(ldap_users))";
      
 }

########################################################

bundle agent ldap_user (user)
{

  vars:
      "shadow_file" string => "/tmp/shadow";
      
  files:
      "$(shadow_file)"
      create    => "false",
      edit_line => ldap_password_remove ("$(user)"),
      comment => "Remove password line from /etc/shadow for a user externally authenticated by LDAP";
}

bundle edit_line ldap_password_remove (user)
{
  delete_lines:
      "$(user).*";
}




########################################################

bundle server passwords
{
  vars:

      # Read a file of format
      #
      # classname: host1,host2,host4,IP-address,regex.*,etc
      #

      "pw_classes" int => readstringarray("acl","$(g.secret_keys_dir)/classes.txt","#[^\n]*",":","100","4000");
      "each_pw_class" slist => getindices("acl");

  access:

      "/secret/keys/$(each_pw_class)-root.txt"

      admit   => splitstring("$(acl[$(each_pw_class)][1])" , ":" , "100"),
      ifencrypted => "true";

}


