##############################################################################
#
#   manage/users/ldap.cf - EECS manual installer for LDAP user authentication
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################

# TESTING ONLY:INPUT STANDARD LIBRARY (Remove after testing)
body file control
{
      inputs => { "$(sys.libdir)/stdlib.cf",
		  "$(sys.workdir)/inputs/services/eecs/classification/host_role/main.cf" };
}

######################################################################
# Public entry point: manage_users
######################################################################

# NOTES for future development of configuration:
# 1. Build system users (i.e. roose and wallis). Possibly shift these to sudo accounts and remove root passwords
# 2. have the ssh_key_distribution look for user public keys located on policy server (per host connection key directory) and then add all the user keys found in that directory

bundle common user_settings
{
  vars:

      "password_dist"
        string => "$(sys.workdir)/host_by_key/$(connection.key)/root.hash",
        comment => "This is where agents look for their root password hash.";

      "ssh_key_dist"
        string => "$(sys.workdir)/host_by_key/$(connection.key)/ssh_keys/",
        comment => "This is where agents look for each user ssh public key.";

      "password_cache"
        string => "$(sys.workdir)/state/passwd/root.hash",
        comment => "This is where agents will cache the hashed root password locally
        (for offline enforcement).";

      "ssh_key_cache"
        string => "$(sys.workdir)/state/ssh_key_cache/$(user).pub",
        comment => "This is where agents will cache the user ssh public key locally
        (for offline enforcement).";

      "home_skeleton" string => "/etc/skel";

      "shared_group_primary" string => "users";
      "group_secondary" string => "audio,plugdev";
      "default_mode" string => "600";

    local_users_shared_group|local_users_own_group::
      "user" slist => getindices( "classify_host.wsu_users" );
      "json_str_users" string => format("%S", "classify_host.wsu_users");

    local_users_custom_groups::
      "custom_umask" string => "007";
}

########################################################

#bundle server passwd_access
# @description: shares the path on policy hub for password hash and ssh public keys with access restricted to each host connection key directory
#{
#  access:
#
#      # It's important that this path have $(connection.key) in it!
#      "$(user_settings.password_dist)"
#        admit_keys =>  { $(connection.key) },
#        comment => "Grant each host to access its own hashed root password. We
#                  assume that each host has a unique keypair";
#
#      "$(user_settings.ssh_key_dist)"
#        admit_keys =>  { $(connection.key) },
#        comment => "Grant each host to access user public ssh keys. We
#                  assume that each host has a unique keypair";
#
#  reports:
#    (inform_mode|verbose_mode)::
#      "$(this.bundle): Activated";
#}

########################################################

bundle agent manage_users
# @description: runs the bundles for different user management depending on the authentication method specified in the classification host_data.json file
{
  vars:

      # for ssh keys, need to check if there are any user.pub files in ssh_key_dist directory
      # then build a user list from .pub files in that directory!
      
  methods:      
      "manage root password"
      usebundle => manage_root_passwd("user_settings");

#      "manage system users"
#      usebundle => manage_system_users("root_passwd_settings");

    local_users_shared_group::
      "manage local users in shared group"
      usebundle => manage_local_users_shared_group("user_settings");

    local_users_own_group::
      "manage local users in their own groups"
      usebundle => manage_local_users_own_group("user_settings");

    local_users_custom_groups::
      "manage local users in custom groups"
      usebundle => manage_local_users_custom_groups("user_settings");

#    pam_ldap::
#     "install and configure ldap client packages"
#      usebundle => install_ldap_client;

#      "manage ldap users"
#      usebundle => manage_ldap_users("user_settings");

    any::
#      "manage user ssh authorized keys"
#      usebundle => manage_ssh_authorized_keys("user_settings",$(user));
      
}

########################################################

bundle agent manage_root_passwd(settings)
# @brief This bundle is run by agents to enforce the local root password.
{
  vars:
    any::
      "passwd_dist" string => "$(sys.workdir)/host_by_key/$(sys.key_digest)/root.hash";
      "passwd_cache" string => "$($(settings).password_cache)";
      "passwd_cache_dir" string => dirname("$(passwd_cache)");

    have_cached_hashed_passwd::
      "root_hash" string => readfile($(passwd_cache), 4096);

  classes:
      "have_cached_hashed_passwd"
      expression => fileexists($(passwd_cache));

  files:
      "$(passwd_cache_dir)/."
      create => "true";
      
    policy_server::
      "$(passwd_cache)"
      perms => mo("600","root"),
      copy_from => local_dcp( $(passwd_dist) ),
      action => if_elapsed("60"),
      comment => "if host is the policy server then perform a local copy of the passwd hash file";

    !policy_server::
      "$(passwd_cache)"
      perms => mo("600","root"),
      copy_from => secure_cp( $(passwd_dist), $(sys.policy_hub) ),
      action => if_elapsed("60"),
      comment => "if host is any other client then perform a secure remote copy of the passwd hash file";

  users:
      "root"
      policy => "present",
      password => hashed_password($(root_hash));

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_manage_root_passwd)::
      "=== $(this.bundle) ===";
      "Password dist file: $(passwd_dist)";
      "Password cached file: $(passwd_cache)";
#      "root hash: $(root_hash)";
}

########################################################

bundle agent manage_local_users_shared_group(settings)
# @description: adds local user accounts to system with a shared primary group.
# Does NOT add or change user password
# SSSD/AD authentication can be used if user is a myWSU ID
{
  vars:
      "user" slist => getindices( "classify_host.wsu_users" );
      "json_str_users" string => format("%S", "classify_host.wsu_users");

  users:
    linux.shared_group_exists_kept.!crypto_ltsp::
      "$(user)"
      policy => "present",
      description => "$(classify_host.wsu_users[$(user)])",
      shell => "/bin/bash",
      home_dir => "/home/$(user)",
      home_bundle => home_skel( "$(user)", "$($(settings).shared_group_primary)", "$($(settings).default_mode)", "$($(settings).home_skeleton)" ),
      group_primary => "$($(settings).shared_group_primary)",
      groups_secondary => { "$($(settings).group_secondary)" },
#      password => hashed_password( "!##lockedpassword##" ),
      comment => "add local user with shared group from wsu_users dataset gained via external host file
                  user must be a myWSU ID if AD auth is wanted. fullname can be the person's name (set in description)
                 NOTE: local user password is not set by CFEngine, but can be authenticated from AD domain via sssd";

    linux.shared_group_exists_kept.crypto_ltsp::
      "$(user)"
      policy => "present",
      description => "$(classify_host.wsu_users[$(user)])",
      shell => "/bin/bash",
      home_dir => "/home/users/$(user)",
      home_bundle => home_skel( "$(user)","$($(settings).shared_group_primary)", "$($(settings).default_mode)", "$($(settings).home_skeleton)" ),
      group_primary => "$($(settings).shared_group_primary)",
      groups_secondary => { "$($(settings).group_secondary)" },
#      password => hashed_password( "!##lockedpassword##" ),
      comment => "add local user with shared group from wsu_users dataset gained via external host file
                  user must be a myWSU ID if AD auth is wanted. fullname can be the person's name (set in description)
                 NOTE: local user password is not set by CFEngine, but can be authenticated from AD domain via sssd";

  methods:
    linux::
      "ensure shared primary group exists"
      usebundle => group_exist( "$($(settings).shared_group_primary)" ),
      classes => results("bundle", "shared_group_exists");
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_manage_local_users)::
      "=== $(this.bundle) ===";
      "Local user set on this system: $(user)";
      "Username: $(classify_host.wsu_users[$(user)])";
      "Shared group: $($(settings).shared_group_primary)";
      "Contents of 'wsu_users' data container: $(json_str_users)";    
}

########################################################

bundle agent manage_local_users_own_group(settings)
# @description: adds local user accounts to system with their own primary group (group = user).
# Does NOT add or change user password
# SSSD/AD authentication can be used if user is a myWSU ID
{
  vars:
      "user" slist => getindices( "classify_host.wsu_users" );
      "json_str_users" string => format("%S", "classify_host.wsu_users");
      
  users:
    linux::
      "$(user)"
      policy => "present",
      description => "$(classify_host.wsu_users[$(user)])",
      shell => "/bin/bash",
      home_dir => "/home/$(user)",
      home_bundle => home_skel( "$(user)","$(user)", "$($(settings).default_mode)", "$($(settings).home_skeleton)" ),
      groups_secondary => { "$($(settings).group_secondary)" },
      comment => "add local user (with group = user) from wsu_users dataset gained via external host file
                  user must be a myWSU ID if AD auth is wanted. fullname can be the person's name (set in description)
                  NOTE: password is not set by CFEngine but can be authenticated from AD domain via sssd";
 
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_manage_local_users)::
      "=== $(this.bundle) ===";
      "Local user set on this system: $(user) - $(classify_host.wsu_users[$(user)])";
      "Contents of 'wsu_users' data container: $(json_str_users)";    
}

########################################################

bundle agent manage_local_users_custom_groups(settings)
# @description: adds local user accounts to system with their own primary group (group = user).
# Does NOT add or change user password
# SSSD/AD authentication can be used if user is a myWSU ID
{
  vars:

      "canonified_host" string => canonify("$(sys.host)");

      "host_data" data => readjson("$(this.promise_dirname)/data/host_custom_groups.json",1M),
        comment => "pull in external json file containing users in custom groups defined by hostname";
      
      "hosts" slist => getindices( group_data );

      "group_data"
        data => mergedata( "host_data[$(canonified_host)]" ),
        ifvarclass => isvariable("host_data[$(canonified_host)]"),
        comment => "create data subset of groups from host_custom_groups.json file";

      "group_json_str" string => format("%S", "group_data"),
        ifvarclass => isvariable("host_data[$(canonified_host)]");

      "group_unsorted" slist => getindices( "group_data" );
      "group" slist => sort("group_unsorted",lex);

      "userdata_$(group)" data => mergedata("group_data[$(group)]");
      "user[$(group)]" slist => getindices( "userdata_$(group)" );
      "grader_user" slist => getindices("group_data[grader]");

      "group_parent_dir" string => "/srv/";
      "group_dir[$(group)]" string => concat ("$(group_parent_dir)", "$(group)");
      
  users:
    linux.group_exists_kept::
      "$(user[$(group)])"
      policy => "present",
      description => "$(userdata_$(group)[$(user[$(group)])])",
      shell => "/bin/bash",
      home_dir => "/home/$(user[$(group)])",
      home_bundle => home_skel( "$(user[$(group)])","$(group)", "$($(settings).default_mode)", "$($(settings).home_skeleton)" ),
      group_primary => "$(group)",
      groups_secondary => { "$($(settings).group_secondary)" },
      classes => results("bundle", "user_exists"),
      comment => "add local user with custom groups from wsu_users dataset gained via external host file
                  user must be a myWSU ID if AD auth is wanted. fullname can be the person's name (in description)
                 NOTE: password is not set by CFEngine but can be authenticated from AD domain via sssd",
      ifvarclass => not( "$(user[grader])" );

      "$(user[grader])"
      policy => "present",
      description => "$(userdata_grader[$(user[grader])])",
      shell => "/bin/bash",
      home_dir => "/home/$(user[grader])",
      home_bundle => home_skel( "$(user[grader])","grader", "755", "$($(settings).home_skeleton)" ),
      group_primary => "grader",
      groups_secondary => { "$($(settings).group_secondary)" },
      classes => results("bundle", "user_exists"),
      comment => "add local user grader accounts with all read permissions for handin to be accessible by others",
      ifvarclass => expression( "$(user[grader])" );

  methods:
    linux::
      "ensure each custom group exists"
        usebundle => group_exist( "$(group)" ),
        classes => results("bundle", "group_exists");

      "create group directories and enforce perms on only the directory"
        usebundle => enforce_group_dirs( "$(group_dir[$(group)])", "$(grader_user)", "$(group)" ),
	classes => results("bundle", "group_dirs");

      "install handin files into grader user profile"
        usebundle => install_handin( "$(grader_user)", "grader", "/home/$(grader_user)" ),
	classes => results("bundle", "handin_install");

      #"insert into user .bashrc file an automatic cd to group directory"
      #usebundle => insert_autorun_command("$(user_$(group))", concat( "cd ", "$(group_dir)" )),
      #classes => results("bundle", "group_dirs");

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_manage_local_users)::
      "=== $(this.bundle) ===";
#      "local user: $(classify_host.wsu_users[$(group)])";
      "Local users user set on this system in $(group): $(user[$(group)]) - $(userdata_$(group)[$(user[$(group)])])";
      "Grader user: $(grader_user)";
      
#      "Username: $(classify_host.wsu_users[$(group)][$(user)])";
      "Contents of 'groups' data container: $(group_json_str)";

    # user_exists_kept::
    #   "user_exists_kept";
    # user_exists_reached::
    #   "user_exists_reached";
    # user_exists_repaired::
    #   "user_exists_repaired";
    # user_exists_not_kept::
    #   "user_exists_not_kept";

}

########################################################

bundle agent enforce_group_dirs(directory, grader, group)
# @description:
{

  vars:
      "mode" string => "660";

  files:
      "$(directory)/."
      create => "true",
      perms => mog( $(mode), $(grader), $(group) );
      #depth_search => recurse_with_base("inf");


  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
}

########################################################

bundle agent group_exist(group)
# @description: makes sure group exists on host
{
  classes:
      "group_absent"
      not => groupexists( "$(group)" );

  commands:
    linux.group_absent::
      "$(paths.groupadd)"
              args => "$(group)";
}

########################################################

bundle agent insert_autorun_command(user, command)
# @description:
{

  vars:
      "bashrc" string => "~$(user)/.bashrc";

  files:
      "$(bashrc)"
      create => "true",
      edit_line => insert_lines( "$(command)" ),
      comment => "add command to end of user's .bashrc file";


  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
}

########################################################

bundle agent home_skel(user, group, mode, skel)
# @description: copies skeleton files to new user home path
{
  files:
      "/home/$(user)/."
      create => "true",
      copy_from => seed_cp( $(skel) ),
      perms => mog("$(mode)", "$(user)", "$(group)"),
      depth_search => recurse_with_base( "inf" );

  reports:

    (DEBUG|DEBUG_home_skel)::
      "=== $(this.bundle) ===";
      "Creating home for user and group: $(user):$(group)";
      "Using skeleton path: $(skel)";
}

########################################################
# NO LONGER USED
########################################################

bundle agent manage_ldap_users(settings)
# @description: adds local user accounts to system with LDAP password authentication
# LDAP SETUP IS OUTDATED - DO NOT USE!
{
  vars:
      
  users:
    linux.pam_ldap::
      "$($(settings).user)"
      policy => "present",
#      password => hashed_password( "!##lockedpassword##" ),
      description => "$(classify_host.wsu_users[$($(settings).user)])",
      shell => "/bin/bash",
      home_dir => "/home/$($(settings).user)",
      home_bundle => home_skel( "$($(settings).user)","$($(settings).group_primary)", "$($(settings).home_skeleton)" ),
      group_primary => "$($(settings).group_primary)",
#      groups_secondary => { "$($(settings).group_secondary)" },
      comment => "add ldap user from wsu_users dataset gained via external host file in classify_host bundle";

  methods:
    linux.pam_ldap::
      "remove user password"
      usebundle =>  ldap_remove_password( "$($(settings).user)" ),
      comment =>"For PAM to use LDAP to authenticate user, there must be no user entry in /etc/shadow file";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_manage_ldap_users)::
      "ldap user: $($(settings).user)";
      "Username: $(classify_host.wsu_users[$($(settings).user)])";
      "Contents of 'wsu_users' data container: $($(settings).json_str2)";    
}

########################################################

bundle agent ldap_remove_password(user)
{

  vars:
      "shadow_file" string => "/etc/shadow";

  files:
      "$(shadow_file)"
      create    => "false",
      edit_line => password_entry_removal("$(user)"),
      comment => "Remove user password entry from /etc/shadow for a user externally authenticated by LDAP";

  reports:

    (DEBUG|DEBUG_ldap_remove_password)::
      "User to remove from $(shadow_file): $(user)";
}

########################################################

bundle edit_line password_entry_removal(user)
{
  delete_lines:
      "$(user).*";
}
