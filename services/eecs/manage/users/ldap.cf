##############################################################################
#
#   manage/users/ldap.cf - EECS manual installer for LDAP user authentication
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################

# TESTING ONLY:INPUT STANDARD LIBRARY (Remove after testing)
body file control
{
      inputs => { "$(sys.libdir)/stdlib.cf" };
}

######################################################################
# Public entry point: install_ldap bundle
######################################################################

# NOTES for future development of configuration:
# 1.

bundle agent install_ldap
{
  # @decription: manual install and configuration for system users to authenticate against WSU's LDAP servers

  vars:
      # intial variables for testing if ldap is installed
      #(NOTE: this bundle needs adjusting if we wish these variables to override what is in the matlab_vars bundle!
      "secret_file" string =>"/etc/pam_ldap.secret";
      "cert_file" string =>"/etc/ssl/certs/wsu_cacert.pem";
      "conf_file" string =>"/etc/pam_ldap.conf";

  classes: 
      "secret_file_exits"
      expression => fileexists("$(secret_file)");
      "cert_file_exists"
        expression => fileexists("$(cert_file)");
      "conf_file_exists"
        expression => fileexists("$(conf_file)");

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_install_ldap)::

    (DEBUG|DEBUG_install_ldap.secret_file_exists.cert_file_exists.conf_file_exists)::
      "$(this.bundle): already installed.";


  methods:
    !secret_file_exists|!cert_file_exists|!conf_file_exists)::
      "ldap_vars"  usebundle => ldap_vars("$(params)");
      "ldap_pkgs"  usebundle => ldap_packages_installed("ldap_vars.conf");
      "ldap_files_exist"   usebundle => ldap_files_exist("ldap_vars.conf");
}

#############################################

bundle agent ldap_vars(params)  
{
  vars:
      # Default configuration values. Internal parameters start with _
      "conf[_secret_file]" string =>"/etc/pam_ldap.secret",
        policy => "overridable";
      "conf[_cert_file]" string =>"/etc/ssl/certs/wsu_cacert.pem",
        policy => "overridable";
      "conf[_conf_file1]" string =>"/etc/pam_ldap.conf",
        policy => "overridable";
      "conf[_conf_file2]" string =>"/etc/ldap/pam_ldap.conf",
        policy => "overridable";
      "conf[_remote_secret_file]" string => "/srv/cfengine/users/pam_ldap.secret",
        policy => "overridable";
      "conf[_remote_cert_file]" string => "/srv/cfengine/users/wsu_cacert.pem",
        policy => "overridable";
      "conf[_master_conf_file]" string => "$(this.promise_dirname)/pam_ldap.conf",
        policy => "overridable";
      "conf[_remote_server]" string => "policyhub.cs.wichita.edu",
        policy => "overridable";

    any::
      # Copy configuration parameters passed, into a local array
      "param_keys"          slist  => getindices("$(params)");
      "conf[$(param_keys)]" string => "$($(params)[$(param_keys)])",
      policy => "overridable";
}

#############################################

bundle agent ldap_report_params(params)
{
  vars:
      "keys" slist => getindices("$(params)");
  reports:
    cfengine_3::
      "$(keys) = $($(params)[$(keys)])";
}

#############################################

bundle agent ldap_packages_installed(params)
{
  vars:
    debian::  
      "desired_package" slist => { 
        "ldap-utils ldaptor-doc ldaptor-utils libpam-ldap libsasl2-modules-ldap python-ldaptor",
      };
    redhat::
      "desired_package" slist => {
	# ??
      };
  packages:  
      "$(desired_package)"
        policy => "present",
        package_module => apt_get,
        version => "latest",
        comment => "Install LDAP authentication module packages";
}

#############################################

bundle agent ldap_files_exist(params)
{
  classes:
      "ldap_secret_file_exists"  
      expression => fileexists("$($(params)[_secret_file])");
      "wsu_cert_file_exists"  
      expression => fileexists("$($(params)[_cert_file])");
# WILL ALREADY EXIST!      "ldap_conf_file_exists"  
#      expression => fileexists("$($(params)[_conf_file])");

  files:
    !ldap_secret_file_exists.sysadmin::
      "$($(params)[_secret_file])"
      copy_from => secure_cp("$($(params)[remote_secret_file])","$($(params)[remote_server])"),
      perms => mog ("600", "root", "root"),
      comment => "secure copy of the remote file with LDAP password (WARNING: plaintext password)";

    !ldap_cert_file_exists.sysadmin::
      "$($(params)[_cert_file])"
      copy_from => secure_cp("$($(params)[remote_cert_file])","$($(params)[remote_server])"),
      perms => mog ("600", "root", "root"),
      comment => "secure copy of the remote file with WSU pem certificate";

    sysadmin::
      # Need to copy LDAP configuration file to both locations /etc and /etc/ldap. We could use a symlink on one of these
      "$($(params)[_conf_file1])"
      copy_from => local_dcp("$($(params)[_master_conf_file)"),
      perms => mog ("622", "root", "root"),
      comment => "copy local LDAP conf file from cfengine files to /etc if digest is different";

      "$($(params)[_conf_file2])"
      copy_from => local_dcp("$($(params)[_master_conf_file)"),
      perms => mog ("622", "root", "root"),
      comment => "copy local LDAP conf file from cfengine files to /etc/ldap if digest is different";
      
  reports:
    DEBUG.ldap_secret_file_exists::
      "LDAP secret file $($(params)[_secret_file]) is present";
    DEBUG.!ldap_secret_file_exists::
      "LDAP secret file $($(params)[_secret_file]) is not present";
    DEBUG.ldap_cert_file_exists::
      "LDAP cert file $($(params)[_cert_file]) is present";
    DEBUG.!ldap_cert_file_exists::
      "LDAP cert file $($(params)[_cert_file]) is not present";
}

#############################################
