###############################################################################
#
#   manage/ssh/main.cf - EECS ssh/sshd configuration
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################

#PRO TIP: 
# better to describe the state you are in than the state you want to
# obtain. Because when reading the policy to restart it can be nice to
# know why your restarting, instead of restarting because someone said restart.

body file control
{
           inputs => { "$(sys.libdir)/stdlib.cf" };
}

######################################################################
# Public entry point: config_sshd
######################################################################

# NOTES for future development of configuration:
    # Consider managing a temporary file that can be validated with sshd -t -c
    # If that check returns zero then you can promise that the real sshd config
    # is a copy of the validated file. and then define the class used to restart
    # if the main config is repaired by the copy from the validated temporary
    # file. This improves resilience, and tries to avoid deploying a potentially
    # broken config.

bundle agent config_sshd
# @description This bundle uses line based editing to partially manage the sshd
# config file. Note this is only partial editing. For full file management
# consider using a mustache template.
{
  vars:
    # Files to edit
    "files[sshd]" string => "/tmp/sshd_config";

    # SSHD configuration to set
    "sshd[Port]" string => "22";
    "sshd[Protocol]" string => "2";
    "sshd[X11Forwarding]" string => "yes";
    "sshd[PermitRootLogin]" string => "no";
    "sshd[UseDNS]" string => "no";
    #"sshd[banner]" string => "/etc/ssh/banner";

# methods:
#      "sshd" usebundle => sshd_config_values( "sshd" );

  files:
    "$(files[sshd])"
       handle => "edit_sshd_config_file",
       comment => "Set desired sshd_config parameters",
       edit_line => set_config_values("sshd"),
       classes => results("bundle", "sshd_config_file");
       # `results` classes body will append various outcomes to <prefix> string passed in, such as <prefix>_repaired.
       # so this is better than 'classes => if_repaired("restart_sshd");'

  services:

#      "ssh"
#        service_policy => "start";
      
    sshd_config_file_repaired.!no_restarts::
      "sshd"
        service_policy => "restart",
        handle => "sshd_restart_because_config_changed",
        comment => "We must restart sshd in order for the changes made to the config file to take effect.";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_sshd_config_values)::

}
