###############################################################################
#
#   manage/ssh/main.cf - EECS ssh/sshd configuration
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################

#PRO TIP:
# better to describe the state you are in than the state you want to
# obtain. Because when reading the policy to restart it can be nice to
# know why your restarting, instead of restarting because someone said restart.

#body file control
#{
#      inputs => { "$(sys.libdir)/stdlib.cf" };
#}

######################################################################
# Public entry point: config_sshd
######################################################################

# NOTES for future development of configuration:
# Consider managing a temporary file that can be validated with sshd -t -c
# If that check returns zero then you can promise that the real sshd config
# is a copy of the validated file. and then define the class used to restart
# if the main config is repaired by the copy from the validated temporary
# file. This improves resilience, and tries to avoid deploying a potentially
# broken config.bundle agent configfiles

bundle agent config_sshd
{
  vars:  
      # Files to edit
      "files[sshd]"   string => "/etc/ssh/sshd_config";

      # SSHD configuration to set
      "sshd[Port]"                                    string => "22";
      "sshd[X11Forwarding]"                           string => "yes";
      "sshd[UseDNS]"                                  string => "no";

    debian::
      "sshd[PermitRootLogin]"                         string => "no";

    redhat::
      "sshd[PermitRootLogin]"                         string => "yes";
      # change this to no once red hat clients work okay with sys_user ssh access
      
  methods:
      "sshd"    usebundle => edit_sshd;

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_config_files)::
      
}

bundle agent edit_sshd
{
  files:
      "$(config_sshd.files[sshd])"
      handle => "edit_sshd",
      comment => "Set desired sshd parameters",
      edit_line => set_line_based("config_sshd.sshd", " ", "\s+", ".*", "\s*#\s*"),
      classes => results("bundle", "sshd");
      
  services:
#      "ssh"
#      service_policy => "start",
#      comment => "make sure ssh is always running";

    # sshd_repaired.!no_restarts::
      "sshd"
      service_policy => "reload",
      handle => "sshd_restart",
      classes => results("bundle", "sshd_reload"),
      comment => "Restart sshd if the configuration file was modified";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_config_files).sshd_reload_repaired::
      "sshd service reload repaired";
    (DEBUG|DEBUG_config_files).sshd_reload_kept::
      "sshd service reload kept";
    (DEBUG|DEBUG_config_files).sshd_reload_reached::
      "sshd service reload reached";      
}
