##############################################################################
#
#   manage/printers/main.cf - EECS printer configuration
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################



# PROTIP: Use body file control to help make modular policy.
# "There can be only one" body common control per policy entry (promises.cf,update.cf)

# TESTING ONLY:INPUT STANDARD LIBRARY (Remove after testing)
body file control
{
      inputs => { "$(sys.libdir)/stdlib.cf", "$(sys.workdir)/inputs/services/eecs/classification/host_role/main.cf" };
}

######################################################################
# Public entry point: manage_printers bundle
######################################################################

# NOTES for future development of configuration:
# 1.


bundle agent manage_printers
# @description: 
{

  vars:

      # list of printers required to be on host
      "printers_list" slist => getvalues( "classify_host.printers" );
      "printers_json_str" string => format("%S", "classify_host.printers");

      # pull in cups printer config data from external json file
      "printer_data"
       data => readjson( "$(this.promise_dirname)/printer_data.json", 10M );
      "data_json_str" string => format("%S", printer_data);

 #     "cups_printer_input" slist => getvalues( "printer_data[$(printers_list)]" );
      
      # location of config files/directories
      "printer_config" string => "/etc/cups/printers.conf";
      "cups_files_config" string => "/etc/cups/cups-files.conf";
      "cupsd_config" string => "/etc/cups/cupsd.conf";
      "ppd_dir" string => "/etc/cups/ppd/";
      "remote_ppd_dir" string => "/srv/cfengine/packages/printers";
      
  classes:
      "printerPPDsInstalled" expression => fileexists("$(ppd_dir)cfengine_managed");
      

  files:
    (debian|ubuntu)::
      "$(ppd_dir)"
      create => "true",
      copy_from => secure_cp( $(remote_ppd_dir), $(sys.policy_hub) ),
      depth_search => recurse("inf"),
      perms => mog("644","root","root"),
      comment => "copy all required printer ppd driver files from policy_hub";
      
    (debian|ubuntu).printerPPDsInstalled::
      "$(printer_config)"
      create => "true",
      perms => mog("600","root","lp"),
      edit_line => printer_write_config( @(printers_list), @(printer_data) ),
      edit_defaults => empty,
      classes => if_repaired('restart_cups'),
      comment => "inserts printer data into the /etc/cups/printer.conf and restarts cups";
      
  methods:

  commands:
    (debian|ubuntu).restart_cups::
        "/usr/sbin/service cups restart";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_manage_printers)::
      "Printers to be configured: $(printers_list)";
#      "CUPS input lines to be added to $(printer_config): $(cups_printer_input)";
      
}

######################################################################

bundle edit_line printer_write_config(printer_list, input_data)
# @description: takes in a list of printers and input data and writes entire data block to the file
{

  vars:
      "i_unsorted" slist => getvalues("printer_list");
      "i" slist => sort("i_unsorted",int);

  insert_lines:
      "$(input_data[$(i)])"
      insert_type => "preserve_block",
      expand_scalars => "false",
      whitespace_policy => { "exact_match" };
      
  reports:      
    (DEBUG|DEBUG_main)::
      "$(this.bundle): line output = $(input_data[$(i)])";
      #"$(this.bundle): $(i) target = $(r[$(i)][target])";
}
