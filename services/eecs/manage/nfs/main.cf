##############################################################################
#
#   manage/nfs/main.cf - EECS nfs server and autofs client install and configuration
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################



# PROTIP: Use body file control to help make modular policy.
# "There can be only one" body common control per policy entry (promises.cf,update.cf)

# TESTING ONLY:INPUT STANDARD LIBRARY and HOST CLASSIFICATION (Remove after testing)
body file control
{
      inputs => { "$(sys.libdir)/stdlib.cf",
		  "$(sys.workdir)/inputs/services/eecs/classification/host_role/main.cf" };
}

######################################################################
# Public entry point: autofs(on) or autofs(off)
######################################################################

# NOTES for future development of configuration:
# 1. NEED TO FIX CREATION OF DIRECTORIES DEFINED IN AUTO.MASTER

 # bundle agent autofs
bundle agent autofs(state)
# @description: install and configure the autofs client service.
{
  vars:
      
      "automount_exec" string => "/usr/sbin/automount";

  classes:
    ## DEFINE SERVER STATES
      # "on"  expression => "any";
      "on"  expression => strcmp("$(state)","on");
      "off" expression => strcmp("$(state)","off");

    ## ENABLE MAP FILES IN MASTER
      "mount_emcity_homes"  expression => "uaf2_client";

      
      "automount_exists"
      	expression => fileexists( "$(automount_exec)" );
   
  methods:

    off.automount_exists::
      "ensure autofs service is stopped if autofs bundle is off"
      	usebundle => standard_services( "autofs", "stop" ),
      	classes => if_ok("autofs_off");

    ## ENSURE SERVICES ARE RUNNING AND CONFIGURED
    on.automount_exists::
      "ensure autofs service is running if autofs bundle is on"
      	usebundle => standard_services( "autofs", "start" ),
      	classes => if_ok("autofs_on");

      "generate all autofs variables"  usebundle => autofs_vars,
        inherit=> "true";

      "configure autofs files"
    	usebundle => configure_autofs("autofs_vars"),
        inherit=> "true",
        classes => results("bundle", "autofs_config");

    ## RESTARTING SERVICES AFTER INSTALLATION AND CONFIGURATION
    on.autofs_config_repaired.!NO_RESTARTS::
      "restart autofs service if configuration changed"
      	usebundle => standard_services( "autofs", "restart" ),
      	classes => if_ok("autofs_restart");

    ## INSTALL ALL SOFTWARE
    on.install_software::
      "generate all autofs variables"  usebundle => autofs_vars,
        inherit=> "true";

      "install dependent packages"
    	usebundle => package_latest("$(autofs_vars.dependent_packages)"),
        classes => results("bundle", "dependent_packages_install"),
        comment => "pull package list from autofs_vars";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_config)::
      "=== $(this.bundle) ===";

      "autofs is not installed on this host"
        ifvarclass => "!automount_exists";
      "autofs is turned off"
        ifvarclass => "autofs_off";
      "autofs is turned on and running"
        ifvarclass => "autofs_on";
      "autofs restarted due to configuration change"
        ifvarclass => "autofs_restart";

      "$(autofs_vars.dependent_packages) installed"
        ifvarclass => "dependent_packages_install_repaired";
      "autofs configured"
        ifvarclass => "autofs_repaired";
}

######################################################################

bundle agent autofs_vars(params)
{
  vars:
    ## INSTALL PARAMETERS FOR ALL SOFTWARE
    debian::
      "dependent_packages" slist => { "autofs", },
        comment => "autofs depends on its own debian package";

      "config_dir" string => "/etc";
      "templates_dir" string => "$(this.promise_dirname)/data";

      "autofs_master_file" string => "$(config_dir)/auto.master";
      "autofs_master_template" string => "$(templates_dir)/auto_master.tpl.txt";

    uaf2_client::
      "autofs_map_files[/opt/homes]" string => "auto.opt_homes";

    subnet_roose_private::
      "autofs_map_files[/mnt/array]" string => "auto.targaryen_array";

    # any::
    #   # Copy configuration parameters passed into a local array
    #   "param_keys"          slist  => getindices("$(params)");   
    #   "$(param_keys)]" string => "$($(params)[$(param_keys)])";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
}

######################################################################

bundle agent configure_autofs(params)
# @description: configure autofs files
{
  vars:
      
      "maps_index" slist => getindices( "$(params).autofs_map_files" );
      
      "temp_ext" string => ".txt",
      comment => "cfengine only copies .cf .json .txt files from masterfiles directories to hosts,
                  so adding a .txt extension on the end of the map template file and removing it during cp!";

      # basis for defining index to value (v): value("$(index) $($(v)[$(index)])")
      
  files:
      "$($(params).autofs_master_file)"
        create => "true",
	perms => mog("644", "root", "root" ),
        edit_template => "$($(params).autofs_master_template)",
        classes => results("bundle", "autofs_master"),
	comment => "expand /etc/auto.master file using template from staging cache in this promise directory";
      
      "$($(params).config_dir)/$($(params).autofs_map_files[$(maps_index)])"
        create => "true",
	perms => mog("644", "root", "root" ),
	copy_from => local_dcp( "$($(params).templates_dir)/$($(params).autofs_map_files[$(maps_index)])$(temp_ext)" ),
	comment => "cp autofs map files to /etc from staging cache";

      "$(maps_index)/."
        create => "true",
	perms => mog("755", "root", "root" ),
	comment => "create mounting directories required by autofs map entries";
     
  methods:
    autofs_master_repaired.!NO_RESTARTS::
      "restart autofs service if configuration changed"
      	usebundle => standard_services( "autofs", "restart" ),
      	classes => if_ok("autofs_restart");
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_config)::
      "=== $(this.bundle) ===";

      "$($(params).autofs_master_file) edited"
        ifvarclass => "autofs_master_repaired";
}


######################################################################
## NFS EXPORTS POLICIES - INCOMPLETE!!

# bundle agent config_nfs_server
# # @description: install and configure a simple tftpd-hda server
# {
#   vars:
#       "dependent_packages" slist => { "nfs-kernel-server", "nfs-common" };

#       "exports_file" string => "/tmp/exports"; # change to /etc/exports

#       "canonified_host" string => canonify("$(sys.host)");

#       "host_data" data => readjson("$(this.promise_dirname)/data/host_exports.json",1M),
#         comment => "pull in external json file containing list of exports defined by hostname";
      
#       "exports_data"
#         data => mergedata( "host_data[[$(canonified_host)]" ),
#         ifvarclass => isvariable("host_data[$(canonified_host)]"),
#         comment => "create data subset from host_exports.json file";

#       "exports_json_str" string => format("%S", "group_data"),
#         ifvarclass => isvariable("host_data[$(canonified_host)]");

#       "exports_unsorted" slist => getindices( "exports_data" );
#       "exports" slist => sort("exports_unsorted",lex);

#       # "userdata_$(group)" data => mergedata("group_data[$(group)]");
#       # "user[$(group)]" slist => getindices( "userdata_$(group)" );
#       # "grader_user" slist => getindices("group_data[grader]");

#       # "group_parent_dir" string => "/srv/";
#       # "group_dir[$(group)]" string => concat ("$(group_parent_dir)", "$(group)");

      
#       "tftp[TFTP_USERNAME]" string => "tftp";
#       "tftp[TFTP_DIRECTORY]" string => "/srv/tftp";
#       "tftp[TFTP_ADDRESS]" string => "0.0.0.0:69";
#       "tftp[TFTP_OPTIONS]" string => "\"--create --secure\"";

#   files:
#       "$(exports)/."
# 	perms => mog("775", "root", "root" ),
#         create => "true",
#         comment => "ensure the directories for exporting have been created";

#       # "$(tftp[TFTP_DIRECTORY])"
#       # 	perms => mog("666", "$(tftp[TFTP_USERNAME])", "$(tftp[TFTP_USERNAME])" ),
#       #   depth_search => recurse( "inf" ),
#       #   comment => "ensure correct perms on any file within the tftp dir for tftp get/put";
      
#   methods:
#     install_software::
#       "install dependent packages" usebundle => package_latest("$(dependent_packages)"),
#         classes => results("bundle", "dependent_packages_installed");

#     any::
#       "edit the exports config file"  usebundle => edit_exports;
      
#   reports:
#     (inform_mode|verbose_mode)::
#       "$(this.bundle): Activated";

#     (DEBUG|DEBUG_config)::
#       "=== $(this.bundle) ===";
#       "$(tftpd_config) configured";

#     (DEBUG|DEBUG_config).dependent_packages_installed_repaired::
#       "$(dependent packages) installed";
# }

# ######################################################################

# bundle agent edit_exports
# {
#   files:
#       "$(config_tftp_server.exports_file)"
#       handle => "edit_exports",
#       comment => "Make sure exports file contains desired directories and options for exporting",
#       create => "true",
#       edit_line => set_line_based("config_tftp_server.tftp", "=", "\s*=\s*", ".*", "\s*#\s*"),
#       classes => results("bundle", "exports");

#   services:
#     exports_repaired.!no_restarts::
#       "tftpd-hda"
#       service_policy => "restart",
#       handle => "tftpd_restart",
#       comment => "Restart tftpd-hda if the configuration file was modified";
# }
