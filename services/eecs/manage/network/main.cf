##############################################################################
#
#   manage/network/main.cf - EECS network configuration
#   Maintained: Ben Roose, ver 0.2
#
###############################################################################



# PROTIP: Use body file control to help make modular policy.
# "There can be only one" body common control per policy entry (promises.cf,update.cf)

# TESTING ONLY:INPUT STANDARD LIBRARY (Remove after testing)
body file control
{
      inputs => { "$(sys.libdir)/stdlib.cf" };
}

######################################################################
# Public entry point: config_net_interfaces and config_hosts_file
######################################################################

# NOTES for future development of configuration:
# 1. See here: https://groups.google.com/forum/#!topic/help-cfengine/NPCfVkNkwYU

bundle common net_settings
{
  vars:
      "interfaces_dist"
      string => "$(sys.workdir)/host_by_key/$(connection.key)/interfaces",
      comment => "This is where agents look for a custom network interfaces file.";

      "interfaces_cache"
      string => "$(sys.workdir)/state/network/interfaces",
              comment => "This is where agents will cache the interfaces file locally
                          (for offline enforcement).";
    debian::
      "interfaces_file" string => "/etc/network/interfaces";

      # red_hat stores data in interface specific files within /etc/sysconfig/network-scripts

    linux::
      "hosts_file"      string => "/etc/hosts";

}


######################################################################

bundle agent config_net_interfaces
# @description: copies a custom interfaces file if found in host_by_key directory to host
{

  vars:
      #"net_data" data => readjson( "$(this.promise_dirname)/subnets.json", 10M );
      #"networks" slist => getindices("net_data");

      "interfaces_dist" string => "$(sys.workdir)/host_by_key/$(sys.key_digest)/interfaces";
      "interfaces_cache" string => "$(net_settings.interfaces_cache)";
      "interfaces_cache_dir" string => dirname("$(interfaces_cache)");

  classes:
      "have_cached_interfaces"
      expression => fileexists($(interfaces_cache));

  files:
      "$(interfaces_cache_dir)/."
      create => "true";

    policy_server.debian::
      "$(interfaces_cache)"
      perms => mo("600","root"),
      copy_from => local_dcp( $(interfaces_dist) ),
      action => if_elapsed("60"),
      comment => "if host is the policy server then perform a local copy of the file";

    !policy_server.debian::
      "$(interfaces_cache)"
      perms => mo("600","root"),
      copy_from => secure_cp( $(interfaces_dist), $(sys.policy_hub) ),
      action => if_elapsed("60"),
      comment => "if host is any other client then perform a secure remote copy of thefile";

    have_cached_interfaces.debian::
      "$(net_settings.interfaces_file)"
      perms => mog("644","root","root"),
      copy_from => local_dcp( $(interfaces_cache) ),
      comment => "copy file from cache into the system directory";

  methods:

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_config_net_interfaces)::
      "=== $(this.bundle) ===";
      
    (DEBUG|DEBUG_config_net_interfaces).have_cached_interfaces::
      "$(this.bundle): custom interfaces file found on policy hub for this host";

    (DEBUG|DEBUG_config_net_interfaces).redhat::
      "WARNING: $(this.bundle) has not been configured for Red Hat OS";
}

######################################################################

bundle agent config_hosts_file
# @description: adds manually defined custom hosts to hosts file 
{

  vars:
      "custom_hosts"   string => "";
      
    routinglabsrv::
      "custom_hosts"
	slist => { "192.168.77.1 data", "192.168.77.2 obrien", "192.168.77.3 laforge", "192.168.77.5 barclay",
		   "192.168.77.21 rack1", "192.168.77.22 rack2", "192.168.77.23 rack3", "192.168.77.24 rack4", };

  files:

      "$(net_settings.hosts_file)"
        perms => m("644"),
        create => "true",
        perms => mog ("644", "root", "root"),
        edit_line => append_if_no_lines("$(config_hosts_file.custom_hosts)"),
        action => if_elapsed("60"),
        comment => "Append a list of hosts to end of file if they don't exist";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_config_hosts)::
      "=== $(this.bundle) ===";
      "hosts added to $(net_settings.hosts_file): $(custom_hosts)";
}
