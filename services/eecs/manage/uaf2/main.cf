##############################################################################
#
#   manage/uaf2/main.cf - EECS Tom Wallis' uaf2 custom package isntallation
#   Maintained: Ben Roose, ver 0.2
#
###############################################################################

# PROTIP: Use body file control to help make modular policy.
# "There can be only one" body common control per policy entry (promises.cf,update.cf)

# TESTING ONLY:INPUT STANDARD LIBRARY and HOST CLASSIFICATION (Remove after testing)
body file control
{
      inputs => { "$(sys.libdir)/stdlib.cf",
		  "$(sys.workdir)/inputs/services/eecs/classification/host_role/main.cf" };
}

######################################################################
# Public entry point: 
######################################################################

# NOTES for future development of configuration:
# 1.

bundle common uaf2_settings
{
  vars:

      "files[globals_config_file]" string => "/usr/local/etc/uaf2_support_globals.conf";
      "files[client_config_file]" string => "/usr/local/etc/uaf2_dbpass_client.conf";

      "globals[UIDGID_SHAREABLE_LOWERLIMIT]" string => "1000";
      
      "client_dbhost"
	string => "emcity.cs.wichita.edu",
	comment => "database host to define in uaf2_dbpass_client.conf file";

      "client_dbname"
	string => "wsu_eecs_info",
	comment => "database name to define in uaf2_dbpass_client.conf file";
      
      "client_dbuser"
	string => "eecsrd",
	comment => "database user to define in uaf2_dbpass_client.conf file";
      
      "password_cache"
        string => "$(sys.workdir)/state/passwd/uaf2_db_passwd",
        comment => "This is where agents will cache the uaf2 database password locally (for offline enforcement).";

       "uaf2_client_file"
       string => "uaf2_client_sequence.dat",
       comment => "This file is created once host has run the uaf2_client.";
      
  classes:

      "wsu_local_repo" expression => "uaf2_client",
      comment => "ensure wsu_local_repo class defined for managing repository";

  #     "host_joined_to_ad"
  #     expression => fileexists( $(keytab_file) ),
  #     comment => "Checks existence of file which is created on host upon successful joining of AD domain";
      
}

bundle agent install_uaf2_client
# @description: fully install and configure the uaf2_client.pl package
{

  vars:
      "download_server"  string => "$(sys.policy_hub)";
      "download_dir"  string => "/srv/cfengine/packages/";
      "install_dir" string => "/root/";

      "server_public_keys" string => "wsu-eecs-server-public-keys-1.0-20_all.deb";

      "uaf2_dependent_packages" slist => { "perl", "wsu-whereami-eecs", "vtw10-globals", "vtw10-base", },
        comment => "uaf2 depends on perl and Tom's packages";
      "handin_dependent_packages" slist => { "perl", "libc6:i386", "libstdc++6:i386", },
        comment => "grader handin depends on the 32-bit libc6 libraries";
      
      "uaf2_client_package" string => "vtw10-uaf2-client";

      "dpkg_install_command" string => "/usr/bin/dpkg --install --force-confold --force-confdef ";

      "password_dist" string => "/srv/cfengine/configs/service_credentials/uaf2_db_passwd";
      "passwd_cache" string => "$(uaf2_settings.password_cache)";
      "passwd_cache_dir" string => dirname("$(passwd_cache)");

      "client_config_template_file" string => "$(this.promise_dirname)/data/uaf2_dbpass_client_template.conf";
      
      "executable_file" string => "/usr/local/sbin/uaf2_client.pl";

    have_cached_password::
      "client_dbpass" string => readfile($(passwd_cache), 4096),
      	comment => "database password to define in uaf2_dbpass_client.conf file (downloaded from host_by_key directory)";

    debian::
      "add_arch_i386_cmd" string => "/usr/bin/dpkg --add-architecture i386 && apt-get update",
        comment => "handin is part of uaf2 grader users, but is an old 32-bit app so needs i386 architecture added to host";

      "dpkg_arch_check_cmd" string => "/usr/bin/dpkg --print-foreign-architectures";

      "dpkg_arch_check" string => execresult("$(dpkg_arch_check_cmd)","noshell");

  classes:
      
      "server_public_keys_package_exists" 
      expression => fileexists("$(install_dir)$(server_public_keys)");

      "have_cached_password"
      expression => fileexists( $(passwd_cache) );

      "uaf2_client_installed"
      expression => fileexists( $(executable_file) );

      "i386_arch_added"
      expression => regcmp("i386","$(dpkg_arch_check)");

  commands:
      # NEED TO FIND WHERE DPKG PLACES A CONFIG WITH i386 SO WE CAN CHECK IT IS THERE!
    debian.install_software.!i386_arch_added::
      "$(add_arch_i386_cmd)" 
        contain => in_dir_shell("/root"),
        classes => results("bundle", "add_arch"),
        comment => "update dpkg with i386 architecture for handin to work";
      
  methods:
    install_software::
      "install dependent packages" usebundle => package_latest("$(handin_dependent_packages)"),
        classes => results("bundle", "handin_dependent_packages_installed");

    # # install_software.(server_public_keys_repaired|uaf2_client_installed)::
    # #   "install uaf2_client_package after server public keys are installed or run an update if already installed"
    # # 	usebundle => package_latest("$(uaf2_client_package)");

  packages:
    install_software.wsu_local_repo::
      "$(uaf2_dependent_packages)"
        policy => "present",
        package_module => apt_get,
        options => { " --allow-unauthenticated " },
        classes => results("bundle", "dependent_packages_installed"),
        comment => "install dependent packages from standard repo and wsu_local_repo
                    need to allow unauthenticated repos in Debian 9";

    install_software.(server_public_keys_repaired|uaf2_client_installed)::
      "$(uaf2_client_package)"
        policy => "present",
        package_module => apt_get,
        options => { "--allow-unauthenticated" },
        classes => results("bundle", "dependent_packages_installed"),
        comment => "install uaf2_client_package after server public keys are installed from wsu_local_repo
                    need to allow unauthenticated repos in Debian 9";
      
  files:
    uaf2_client_installed::
      "$(passwd_cache_dir)/."
            create => "true";

      "$(passwd_cache)"
      copy_from => secure_cp( $(password_dist), $(sys.policy_hub) ),
      perms => mog("600", "root", "root"),
      action => if_elapsed("60"),
      comment => "secure remote copy of the password file to local cache";

    !uaf2_client_installed.!server_public_keys_package_exists::
      "$(install_dir)$(server_public_keys)"
        copy_from => secure_cp("$(download_dir)$(server_public_keys)", "$(download_server)"),
        comment => "Copying server public keys installer file from source server";

    uaf2_client_installed.have_cached_password::
      "$(uaf2_settings.files[client_config_file])"
	perms => mog("600", "root", "root"),
      #action => if_elapsed("60"),
	edit_defaults => empty,
	edit_line => expand_template( $(client_config_template_file) ),
	classes => results("bundle", "uaf2_client_config"),
	comment => "Expand template file into uaf2_dbpass_client.conf file and set repaired class if copied";      

      "$(uaf2_settings.files[globals_config_file])"
	edit_line => set_line_based("uaf2_settings.globals", ": ", "\s+", ".*", "\s*#\s*"),
	classes => results("bundle", "uaf2_globals_config"),
	comment => "Set desired uaf2_support_globals_config parameters";
      
  commands:
    !uaf2_client_installed.server_public_keys_package_exists.(dependent_packages_installed_repaired|dependent_packages_installed_kept)::
      "$(dpkg_install_command) $(server_public_keys)"
        contain => in_dir_shell("$(install_dir)"),
        classes => results("bundle", "server_public_keys"),
        comment => "install wsu-server-public-keys from local .deb package";
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_install_uaf2)::
      "=== $(this.bundle) ===";

      "uaf2_client has been previously installed"
      ifvarclass => "uaf2_client_installed";

      "uaf2_dbpass_client.conf has been configured"
      ifvarclass => "uaf2_client_config_repaired";

      "uaf2_support_globals.conf has been configured"
      ifvarclass => "uaf2_globals_config_repaired";

      "32-bit (i386) architecture has previously been added"
      ifvarclass => "i386_arch_added";
}

######################################################################

bundle agent run_uaf2_client
# @description: runs uaf2_client.pl
{

  vars:
      "uaf2_client_command" string => "/usr/local/sbin/uaf2_client.pl";

    (testing|teaching)::
      "uaf2_client_options" string => "-D -S -G -Z -A";
      
  commands:
      "$(uaf2_client_command) $(uaf2_client_options)"
        contain => in_shell,
      # classes => results("bundle", "uaf2_client"),
        comment => "run uaf2_client to update /etc/passwd, /etc/shadow, /etc/group, /etc/gshadow";
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_run_uaf2)::
      "=== $(this.bundle) ===";
}

######################################################################
