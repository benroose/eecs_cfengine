##############################################################################
#
#   manage/guacamole/main.cf - EECS guacamole RDP gateway server install and configuration
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################

# TESTING ONLY:INPUT STANDARD LIBRARY and HOST CLASSIFICATION (Remove after testing)
body file control
{
      inputs => { "$(sys.libdir)/stdlib.cf",
		  "$(sys.workdir)/inputs/services/eecs/classification/host_role/main.cf" };
}

######################################################################
# Public entry point: config_guac_server
######################################################################

# NOTES for future development of configuration:
# 1.


bundle agent config_guac_server
# @description: install and configure a guacamole server
{
  vars:
      
      
  methods:
    # !application_dir_is_present::
      "generate all guacamole variables"  usebundle => guacamole_vars;
      
      "install dependent packages"
    	usebundle => dependent_packages_installed("guacamole_vars.install"),
        classes => results("bundle", "dependent_packages_install"),
        comment => "use packages/custom_install.cf generic bundle";

    # (dependent_packages_install_repaired|dependent_packages_install_kept)::
    #   "download and expand guacamole installation tarball"
    # 	usebundle => installation_tarball_is_present("guacamole_vars.install"),
    #     classes => results("bundle", "download_tarball"),
    #     comment => "use packages/custom_install.cf generic bundle";

    # (download_tarball_repaired|download_tarball_kept)::
    #   "install guacamole server from source files"
    # 	usebundle =>install_guac_server("guacamole_vars.install"),
    #     classes => results("bundle", "guacd_install");

    # (guacd_install_repaired|guacd_install_kept)::      
    #   "configure guacamole, tomcat8, and mysql"
    # 	usebundle =>configure_guac_server("guacamole_vars.conf"),
    #     classes => results("bundle", "guacd_configuration");

      
      # "delete installation files" usebundle => installation_tidy("pyrosetta_vars.conf");

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_config)::
      "=== $(this.bundle) ===";

      "$(guacamole_vars.install[_dependent_packages]) installed"
        ifvarclass => "dependent_packages_install_repaired";
      "$(guacamole_vars.install[_tarball]) downloaded and unrolled"
        ifvarclass => "download_tarball_repaired";
      "guacamole server installed from source code"
        ifvarclass => "guacd_install_repaired";
      "guacamole server fully installed and configured"
        ifvarclass => "guacd_configuration_repaired";
}

######################################################################

bundle agent guacamole_vars(params1, params2)
{
  vars:
  
      # Default install values. Internal parameters start with _ ?
      
      "install[_application_dir]" string =>"??";
      "install[_download_server]"  string => "$(sys.policy_hub)";
      "install[_download_file]"  string => "/srv/cfengine/packages/guacamole_0.9.12.tar.gz";
      "install[_tarball]"      string => "guacamole_0.9.12.tar.gz";
      "install[_install_dir]"  string => "/root/";
      "install[_unrolled_dir]"  string => "$(install[_install_dir])guacamole-server-0.9.12/";
            
      "install[source_dir]"  string => "$(install[_unrolled_dir])/guacamole-server-0.9.12-incubating/";
      "install[build_commands]" slist => { "./configure --with-init-dir=/etc/init.d", "$(paths.path[make])", "$(paths.path[make]) install", "ldconfig", "$(paths.path[systemctl]) enable guacd", },
      comment => "this slist of commands run in sequence within the source dir will build guacd from source";

      "install[guac_war_source_path]" string => "$(install[_unrolled_dir])/guacamole-0.9.12-incubating.war";
      "install[guac_war_destination_path]" string => "/etc/guacamole/guacamole.war";
     "install[guac_war_filename]" string => lastnode( "install[guac_war_destination_path]", "/" );
      "install[guac_auth_source_path]" string => "guacamole-auth-jdbc-0.9.12-incubating/mysql/guacamole-auth-jdbc-mysql-0.9.12-incubating.jar";
      "install[guac_auth_filename]" string => lastnode( "install[guac_auth_source_path]", "/" );
      "install[mysql_connector_source_path]" string => "$(install[_unrolled_dir])/mysql-connector-java-5.1.41/mysql-connector-java-5.1.41-bin.jar";
      "install[mysql_connector_filename]" string => lastnode( "install[mysql_connector_source_path]", "/" );

      "install[guac_config_dir]" string => "/etc/guacamole/";
      "install[guac_lib_dir]" string => "/etc/guacamole/lib/";
      "install[guac_extensions_dir]" string => "/etc/guacamole/extensions/";

      "install[freerdp_lib_dir]" string => "/usr/local/lib/freerdp/";
      "install[freerdp_lib_64_dir]" string => "/usr/lib/x86_64-linux-gnu/freerdp/";
      
      "install[tomcat_webapps_dir]" string => "/var/lib/tomcat8/webapps/";
      "install[tomcat_guac_file]" string => "/usr/share/tomcat8/.guacamole";

      # CHECK THESE VARIABLE CALLS BELOW
      "conf[tomcat_config_file]" string => "/etc/default/tomcat8";
      "conf[tomcat_config][GUACAMOLE_HOME]" string => "/etc/guacamole";

      "conf[guac_props_file]" string => "/etc/guacamole/guacamole.properties";
      "conf[guac_props][mysql-hostname]" string => "localhost";
      "conf[guac_props][mysql-port]" string => "3306";
      "conf[guac_props][mysql-database]" string => "guacamole_db";
      "conf[guac_props][mysql-username]" string => "guacamole_user";
      "conf[guac_props][mysql-password]" string => "CHANGE_PASSWORD"; #MUST FIGURE OUT HOW TO STORE PASSWD SECURELY

      "conf[guac_mysql_schema_files]" string => "guacamole-auth-jdbc-0.9.12-incubating/mysql/schema/*.sql";

      
#      "conf[_unrolled_dir_bin]"  string => "$(conf[_install_dir])bin/",
#      "conf[_install_command]"  string => "python setup.py install",
#        policy => "overridable";
#      "conf[_log_file]"    string => "/var/log/matlab_install.log",
#        policy => "overridable";
      
    debian::
      "install[_dependent_packages]" slist => { "build-essential", "libcairo2-dev", "libjpeg-turbo8-dev", "libpng12-dev", "libossp-uuid-dev", "libavcodec-dev", "libavutil-dev", "libswscale-dev", "libfreerdp-dev", "libpango1.0-dev", "libssh2-1-dev", "libtelnet-dev", "libvncserver-dev", "libpulse-dev", "libssl-dev", "libvorbis-dev", "libwebp-dev", "mysql-server", "mysql-client", "mysql-common", "mysql-utilities", "tomcat8", "freerdp", "ghostscript", "jq", "wget", "curl", },
        comment => "guacamole depends on build tools for make from source, mysql for backend DB, tomcat for java support, and others";

    any::
      # Copy configuration parameters passed, into a local array
      "param1_keys"          slist  => getindices("$(params1)");   
      "param2_keys"          slist  => getindices("$(params2)");   
      "install[$(param1_keys)]" string => "$($(params1)[$(param1_keys)])";
      "conf[$(param2_keys)]" string => "$($(params2)[$(param2_keys)])";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
}

######################################################################

bundle agent install_guac_server(params)
# @description: install guacamole from downloaded source files
{
  vars:

  classes:
      "guac_etc_dirs_exist"
        and => { fileexists( "$($(params)[guac_lib_dir])/." ), fileexists( "$($(params)[guac_lib_dir])/." ), };

  files:
      "$($(params)[guac_lib_dir])/."
	perms => mog("755", "root", "root" ),
        create => "true",
        comment => "ensure the guacamole libary directory has been created";

      "$($(params)[guac_extensions_dir])/."
	perms => mog("755", "root", "root" ),
        create => "true",
        comment => "ensure the guacamole extensions directory has been created";

    guac_etc_dirs_exist::
      "$($(params)[guac_war_destination_path])"
        create => "true",
	copy_from => local_dcp( "$($(params)[guac_war_source_path])" ),
	comment => "cp guacamole.war file to /etc/guacamole";

      "$($(params)[guac_extensions_dir])/$($(params)[guac_auth_filename])"
        create => "true",
	copy_from => local_dcp( "$($(params)[guac_auth_source_path])" ),
	comment => "cp guacamole auth jar file to /etc/guacamole/extensions";

      "$($(params)[guac_lib_dir])/$($(params)[mysql_connector_filename])"
        create => "true",
	copy_from => local_dcp( "$($(params)[mysql_connector_source_path])" ),
	comment => "cp mysql-connector-java .jar file to /etc/guacamole/lib";

      # SYMBOLIC LINKS
      "$($(params)[tomcat_webapps_dir])/$($(params)[guac_war_filename])"
        move_obstructions => "true",
        link_from => linkfrom( "$($(params)[guac_war_destination_path])", "symlink" ),
        comment => "create symbolic link for guacamole.war in /var/lib/tomcat/webapps";

      "$($(params)[tomcat_guac_file])"
        move_obstructions => "true",
        link_from => linkfrom( "$($(params)[guac_config_dir])", "symlink" ),
        comment => "create symbolic link for /etc/guacamole in /user/share/tomcat8/.gaucamole";

      "$($(params)[freerdp_lib_64_dir])"
        move_obstructions => "true",
        link_from => linkchildren( "$($(params)[freerdp_lib_dir])" ),
        comment => "create symbolic link for freerdp in i86_64 directory";
      
  commands:
    guac_etc_dirs_exist::
      "$($(params)[build_commands])"
        contain => in_dir_shell("$($(params)[source_dir])"),
        classes => results("bundle", "guacd_build"),
        comment => "run the sequence of build commands to build guacamole server from source";

      
  methods:


  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_config)::
      "=== $(this.bundle) ===";
      "guacamole server built from source using $($(params)[source_dir])"
        ifvarclass => "guacd_build_repaired";

}

######################################################################

bundle agent configure_guac_server(params)
# @description: configure guacd, mysql, and tomcat for guacamole server
{
  vars:
      "mysql_cmd" string => "/usr/bin/mysql -u root -e ";

  classes:

  files:
      "$($(params)[tomcat_config_file])"
      edit_line => set_line_based( "$($(params)[tomcat_config])", "=", "\s+", ".*", "\s*#\s*" ),
      classes => results("bundle", "tomcat_config"),
      comment => "Set desired tomcat8 parameters in its config file";

      "$($(params)[guac_props_file])"
      edit_line => set_line_based( "$($(params)[guac_props])", ": ", "\s+", ".*", "\s*#\s*" ),
      classes => results("bundle", "guac_config"),
      comment => "Set desired guacamole parameters in its properties file";
      
  methods:
      ## IS AUTHSOCKET ALREADY SET UP FOR MYSQL ROOT USER?
      "create guacamole user and database in mysql"
	usebundle => create_mysql_db( "$($(params)[guac_props][mysql-database])", "$($(params)[guac_props][mysql-username])", "$($(params)[guac_props][mysql-password])" ),
	classes => results("bundle", "mysql_db");

    tomcat_config_repaired.!NO_RESTARTS::
      "restart tomcat8 service if config file modified"
	usebundle => standard_services( "tomcat8", "restart" ),
	classes => results("bundle", "tomcat_restart");

    guac_config_repaired.!NO_RESTARTS::
      "restart guacd service if properties file modified"
	usebundle => standard_services( "guacd", "restart" ),
	classes => results("bundle", "guacd_restart");

  commands:
    mysql_db_repaired::
      "$(paths.path[cat]) $($(params)[guac_mysql_schema_files]) | $(mysql_cmd) $($(params)[guac_props][mysql-database])"
      	classes => results("bundle", "adding_mysql_schema"),
        comment => "add guacamole schema to newly created mysql database";

      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_config)::
      "=== $(this.bundle) ===";

      "$($(params)[tomcat_config_file]) edited and tomcat8 service restarted"
        ifvarclass => "tomcat_restart_repaired";
      "$($(params)[guac_props_file]) edited and guacd service restarted"
        ifvarclass => "guacd_restart_repaired";
      "$($(params)[guac_props][mysql-database]) created in mysql and guacamole schema added from $($(params)[guac_mysql_schema_files])"
        ifvarclass => "adding_mysql_schema_repaired";

}

######################################################################

bundle agent create_mysql_db(database, user, password)
# @description: create a new mysql database if it does not exist on server
{
  vars:
      "host" string => "localhost";
      
      # "privileges" string => "ALL";
      "privileges" string => "SELECT,INSERT,UPDATE,DELETE";
      "mysql_cmd" string => "/usr/bin/mysql -u root -e ";

      "database_check" string => execresult("$(mysql_cmd) \" SHOW DATABASES LIKE '$(database)';\" ","noshell");
      
  classes:
      
  methods:

  commands:
      "$(mysql_cmd) \"
      CREATE USER IF NOT EXISTS '$(user)'@'$(host)';
      SET PASSWORD FOR '$(user)'@'$(host)'= '$(password)';
      CREATE DATABASE IF NOT EXISTS '$(database)';
      GRANT '$(privileges)' ON '$(database).*' TO '$(user)'@'$(host)'
      FLUSH PRIVILEGES;\"
"
	classes => results("bundle", "mysql_db"),
        comment => "Create database user with password, create database, and define access privileges";
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_config)::
      "=== $(this.bundle) ===";
      "Check for database: $(database_check)";

      "$(database) created for $(user)@$(host)"
        ifvarclass => "mysql_db_repaired";
      "WARNING: $(database) NOT created for $(user)@$(host)"
        ifvarclass => "mysql_db_failed";

}

######################################################################


### OLD BUNDLES ###
bundle agent edit_tftpd
{
  files:
      "$(config_tftp_server.tftpd_config)"
      handle => "edit_tftpd",
      comment => "Make sure default tftpd-hda file contains desired configuration settings",
      create => "true",
      edit_line => set_line_based("config_tftp_server.tftp", "=", "\s*=\s*", ".*", "\s*#\s*"),
      classes => results("bundle", "tftpd");

  services:
    tftpd_repaired.!no_restarts::
      "tftpd-hda"
      service_policy => "restart",
      handle => "tftpd_restart",
      comment => "Restart tftpd-hda if the configuration file was modified";
}
