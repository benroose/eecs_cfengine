##############################################################################
#
#   manage/guacamole/database.cf - EECS guacamole mySQL database manipulation
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################



# PROTIP: Use body file control to help make modular policy.
# "There can be only one" body common control per policy entry (promises.cf,update.cf)

# TESTING ONLY:INPUT STANDARD LIBRARY and HOST CLASSIFICATION (Remove after testing)
body file control
{
	inputs => { "$(sys.libdir)/stdlib.cf",
		    "database.cf",
		  "$(sys.workdir)/inputs/services/eecs/classification/host_role/main.cf" };
}

######################################################################
# Public entry point: 
######################################################################

# NOTES for future development of configuration:
# 1.

bundle agent guac_database
# bundle agent web_server(state)
# @description: manipulates underlying mySQL database for Guacamole server
# NOTE: uses the CFE service state on/off for enabling configuration!!
{

  vars:      
      "apache_exec" string => "/usr/sbin/apache2";

      # "username" string => "guacadmin";
      "username" string => "d693f574";
      "connection_name" string => "sshtest3";
      "host_ip" string => "10.10.10.10";
      "protocol" string => "ssh";
      "parent_group" string => "";
      "params" string => "guac_database_vars";
      
  classes:

      # DEFINE SERVER STATES
      # "on"  expression => "any";
      # "on"  expression => strcmp("$(state)","on");
      # "off" expression => strcmp("$(state)","off");

      # "apache_exists"
      # 	expression => fileexists( "$(apache_exec)" );

  methods:
      "create a test connection"
      	usebundle => guac_create_connection( $(connection_name), $(host_ip), $(protocol), $(parent_group), $(params) ),
        classes => if_ok("connection_created");

      "add user to test connection"
      	usebundle => guac_add_user_to_connection( $(username),$(connection_name), $(params) ),
        classes => if_ok("add_user_to_connection");


    # off.apache_exists::
    #   "ensure apache2 service is stopped if web_server is off"
    #   	usebundle => standard_services( "apache2", "stop" ),
    #   	classes => if_ok("web_server_off");

    # ## ENSURE SERVICES ARE RUNNING AND CONFIGURED
    # on.apache_exists::
    #   "ensure apache2 service is running if web_server is on"
    #   	usebundle => standard_services( "apache2", "start" ),
    #   	classes => if_ok("web_server_on");

    #   "generate all web server variables"  usebundle => web_server_vars;
      
    #   "generate virtual host site config files for each site defined in web_server_vars"
    # 	usebundle => generate_site_files( "web_server_vars", "$(web_server_vars.site_keys)" ),
    #     comment => "bundle generates its own global results classes: site_conf_file";
      
    # ## ENABLE SITES/MODULES AND GENERATING SSL CERTIFICATES
    # on.site_conf_file_repaired::
    #   "enable apache sites"
    # 	usebundle => manage_apache_site("$(web_server_vars.sites_enabled)", enable),
    #     classes => if_ok("enable_site");

    #   "enable apache modules"
    # 	usebundle => manage_apache_module("$(web_server_vars.modules_enabled)", enable),
    #     classes => if_ok("enable_module");

    #   "configure SSL/TLS certificates for each site using EFF certbot"
    #   	usebundle => manage_certbot( "web_server_vars", "$(web_server_vars.site_keys)", install ),
    #     inherit => "true",
    #     classes => results("bundle", "install_cert");

    # on.(enable_site|install_cert_repaired)::
    #   "reload apache2 service after generating and enabling new sites"
    #   	usebundle => standard_services( "apache2", "reload" ),
    #   	classes => if_ok("web_server_reload");

    # on.enable_module::
    #   "restart apache2 service after enabling new modules"
    #   	usebundle => standard_services( "apache2", "restart" ),
    #   	classes => if_ok("web_server_restart");

    # ## INSTALL ALL SOFTWARE FOR WEB SERVER
    # on.install_software::
    #   "generate all web server variables"  usebundle => web_server_vars;

    #   "install dependent packages"
    # 	usebundle => package_latest("$(web_server_vars.dependent_packages)"),
    #     classes => results("bundle", "dependent_packages_install");

    #   "disable default apache testing site"
    # 	usebundle => manage_apache_site("$(web_server_vars.apache_default_site)", disable),
    #     classes => results("bundle", "disable_default_site");

    # ## SSL CERTIFICATE RENEWAL
    # on.ssl_cert_renew::
    #   "check if SSL/TLS certificates need to be renewed (set cert_renew class in cron_scheduler for once a week)"
    # 	usebundle => manage_certbot("web_server_vars", "$(web_server_vars.site_keys)", renew),
    #     classes => results("bundle", "renew_certs");
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_web_server)::
      "=== $(this.bundle) ===";

      # "web server (apache2) is not installed on this host"
      #   ifvarclass => "!apache_exists";
      # "web server (apache2) is turned off"
      #   ifvarclass => "web_server_off";
      # "web server (apache2) is turned on and running"
      #   ifvarclass => "web_server_on";
      # "web server (apache2) restarted due to configuration change"
      #   ifvarclass => "web_server_restart";
      # "web server (apache2) reloaded due to configuration change"
      #   ifvarclass => "web_server_reload";

      "test connection 1 created"
        ifvarclass => "connection_created";
      "user added to test connection"
        ifvarclass => "add_user_to_connection";

}

######################################################################

bundle agent guac_database_vars
{
  vars:
    ## FILE PARAMETERS
      "create_connection_sql" string => "$(sys.workdir)/state/mysql/guac_create_connection.sql";
      "create_connection_template" string => "$(this.promise_dirname)/data/create_connection.sql.mustache";
      "add_user_to_connection_sql" string => "$(sys.workdir)/state/mysql/guac_add_user_to_connection.sql";
      "add_user_to_connection_template" string => "$(this.promise_dirname)/data/add_user_to_connection.sql.mustache";
      
    ## GLOBAL PARAMETERS FOR DATABASE
      "database" string => "guacamole_db";

    ## GLOBAL PARAMETERS FOR ALL CONNECTIONS
      "username" string => "${GUAC_USERNAME}",
        comment => "Parameter token: ${GUAC_USERNAME} = username of the current Guacamole user";
      "password" string => "${GUAC_PASSWORD}",
        comment => "Parameter token: ${GUAC_PASSWORD} = password of the current Guacamole user";

      "max_connections" string => "",
        comment => "maximum number of concurrent connections to allow to this connection at any one time regardless of user
                    NULL will use the default value specified in guacamole.properties";
      "max_connections_per_user" string => "",
        comment => "maximum number of concurrent connections to allow to this connection at any one time from a single user
                    NULL will use the default value specified in guacamole.properties";

      "enable_sftp" string => "true",
        comment => "If set to true, the user will be allowed to upload or download files from the SSH server using SFTP";

    ## GLOBAL PARAMETERS SPECIFIC FOR SSH CONNECTIONS
      "ssh_port" string => "22",
        comment => "port the SSH server is listening on. If not specified, default of 22 will be used";
      "ssh_color_scheme" string => "green-black",
        comment => "color scheme to use for the terminal emulator used by SSH connections
                    options: black-white, gray-black, green-black, white-black";
      "ssh_font_name" string => "monospace",
        comment => "name of the font to use. If not specified, default of monospace will be used";
      "ssh_font_size" string => "12",
        comment => "size of the font to use, in points. If not specified, default of 12 will be used";
      "ssh_command" string => "",
        comment => "DISABLED IN TEMPLATE: command to execute over the SSH session.
                    If not specified, the SSH session will use the user's default shell";

    ## GLOBAL PARAMETERS SPECIFIC FOR RDP CONNECTIONS
      "rdp_port" string => "3389",
        comment => "The port the RDP server is listening on. If not specified, default of 3389 will be used";
      "rdp_security" string => "rdp",
        comment => "security mode to use for the RDP connection.
                    This mode dictates how data will be encrypted and what type of authentication will be performed";
      "rdp_domain" string => "",
        comment => "DISABLED IN TEMPLATE: domain to use when attempting authentication, if any";
      "rdp_color_depth" string => "",
        comment => "DISABLED IN TEMPLATE: color depth to request in bits-per-pixel: must be 8, 16, or 24";
      "rdp_width" string => "",
        comment => "DISABLED IN TEMPLATE: width of the display to request in pixels.
                    If not specified, the width of the connecting client display will be used";
      "rdp_height" string => "",
        comment => "DISABLED IN TEMPLATE: height of the display to request in pixels.
                    If not specified, the height of the connecting client display will be used";
      "rdp_dpi" string => "",
        comment => "DISABLED IN TEMPLATE: desired effective resolution of the client display in DPI.
                    If not specified, resolution and size of the client display will be used together to determine, heuristically, an appropriate resolution for the RDP session";
      "rdp_resize_method" string => "",
        comment => "DISABLED IN TEMPLATE: method to use to update the RDP server when the width or height of the client display changes. If not specified, no action will be taken when the client display changes size. options: display-update, reconnect";

      "rdp_sftp_directory" string => "",
        comment => "DISABLED IN TEMPLATE: directory to upload files to if they are simply dragged and dropped, and thus otherwise lack a specific upload location. If not specified, default upload location of the SSH server providing SFTP will be used";
      
      "rdp_command" string => "",
        comment => "DISABLED IN TEMPLATE: full path to the program to run immediately upon connecting.
                    In guacamole_db this parameter is called initial-program";

      "rdp_enable_printing" string => "true",
        comment => "when true, RDP users can print to a virtual printer that sends a PDF containing the document printed to the Guacamole client";

      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
}

######################################################################

bundle agent guac_create_connection(conname, hostname, protocol, parent_group, params)
# @description: use a mustache template to add entries into required mySQL tables for a guacamole connection "name" with "host" (ip address) using "protocol" (VNC, RDP, SSH) under a "parent group" (connection group name?), using a set of global parameters
{
  vars:
      "mysql_cmd" string => "/usr/bin/mysql -u root ";
      "mysql_import_cmd" string => "$(mysql_cmd) \"$($(params).database)\" < ";

  classes:
      "ssh_connection"  expression => strcmp("$(protocol)","ssh");
      "rdp_connection"  expression => strcmp("$(protocol)","rdp");
      
      
  files:
      "$($(params).create_connection_sql)"
        create => "true",
        template_method => "mustache",
        edit_template => "$($(params).create_connection_template)",
        classes => results("bundle", "create_connection_sql"),
	comment => "expand create_connection sql file using template from staging cache in this promise directory";

  commands:
    create_connection_sql_repaired|create_connection_sql_kept::
      "$(mysql_import_cmd)"
        args => "$($(params).create_connection_sql)",
        contain => in_shell,
      	classes => results("bundle", "create_connection"),
        comment => "add connection $(conname) into guacamole database";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_web_server)::
      "=== $(this.bundle) ===";
      "$(conname) connection created in $($(params).database)"
        ifvarclass => "create_connection_repaired";
      
}

######################################################################

bundle agent guac_add_user_to_connection(username, conname, params)
# @description: use a mustache template to add entries into required mySQL tables for giving a user permission to access a connection
{
  vars:
      "mysql_cmd" string => "/usr/bin/mysql -u root ";
      "mysql_import_cmd" string => "$(mysql_cmd) \"$($(params).database)\" < ";
      
  files:
      "$($(params).add_user_to_connection_sql)"
        create => "true",
        template_method => "mustache",
        edit_template => "$($(params).add_user_to_connection_template)",
        classes => results("bundle", "add_user_to_connection_sql"),
	comment => "expand add_user_to_connection sql file using template from staging cache in this promise directory";

  commands:
    add_user_to_connection_sql_repaired|add_user_to_connection_sql_kept::
      "$(mysql_import_cmd)"
        args => "$($(params).add_user_to_connection_sql)",
        contain => in_shell,
      	classes => results("bundle", "add_user_to_connection"),
        comment => "give user permission to access connection $(name) into guacamole database";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_web_server)::
      "=== $(this.bundle) ===";
      "$(username) has been given READ access to $(conname) connection"
        ifvarclass => "add_user_to_connection_repaired";
      
}
