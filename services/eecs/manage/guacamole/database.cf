##############################################################################
#
#   manage/guacamole/database.cf - EECS guacamole mySQL database manipulation
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################

# PROTIP: Use body file control to help make modular policy.
# "There can be only one" body common control per policy entry (promises.cf,update.cf)

# TESTING ONLY:INPUT STANDARD LIBRARY and HOST CLASSIFICATION (Remove after testing)
body file control
{
	inputs => { "$(sys.libdir)/stdlib.cf",
		  "$(sys.workdir)/inputs/services/eecs/classification/host_role/main.cf" };
}

######################################################################
# Public entry point: 
######################################################################

# NOTES for future development of configuration:
# 1. how to get feedback from database?

bundle agent configure_guac_database
# bundle agent web_server(state)
# @description: manipulates underlying mySQL database for Guacamole server
# NOTE: uses the CFE service state on/off for enabling configuration!!
{

  vars:

      ## TESTING VARS ONLY
      # "username" string => "guacadmin";

      ## GLOBAL PARAMETERS
      "params" string => "guac_database_vars";
      "wget_cmd" string => "/usr/bin/wget -q --timeout=10";
      
      ## OPENSTACK METADATA
      "openstack_metadata_link" string => "http://169.254.169.254/openstack/latest/meta_data.json";
      "openstack_metadata_cache" string => "meta_data.json";
      "openstack_cache_dir" string => "$(sys.workdir)/state/openstack/";

    metadata_cache_exists.(copy_metadata_repaired|copy_metadata_kept)::
      "openstack_metadata" data => readjson("$(openstack_cache_dir)$(openstack_metadata_cache)",1M),
        comment => "pull in external json file from OpenStack Nova API";

      "json_str_openstack_metadata" string => format("%S", "openstack_metadata");

      "cluster_host_data"
        data => mergedata( "openstack_metadata[meta][cluster_ips]" ),
        comment => "create data subset of cluster host ip addresses from openstack metadata";

      "clean_cluster_string1" string => regex_replace( "$(cluster_host_data)", "..(.+)..", "\1", "" );
      "clean_cluster_string2" string => regex_replace( "$(clean_cluster_string1)", "\"\", ", "", "" );
      "cluster_ip_list" slist => splitstring( "$(clean_cluster_string2)", "\", \"", "1000" ),
        comment => "list of cluster host ips comes in from openstack metadata as a noisy string,
                    since this parameter is defined as a comma_limited_list in openstack heat templates.
                    Need to clean it by removing start/end chars, null entries, then split ips into a list"; 
     
  classes:      
      "openstack_cache_dir_exists"
      	expression => fileexists( "$(openstack_cache_dir)/." );

      "metadata_cache_exists"
      	expression => fileexists( "$(openstack_cache_dir)$(openstack_metadata_cache)" );

      "have_cluster_ip_list"
      	expression => isvariable( "cluster_ip_list" );

  files:
      "$(openstack_cache_dir)/."
        create => "true";
      
  commands:
    openstack_cache_dir_exists::
      "$(wget_cmd)"
        args => "-O $(openstack_metadata_cache) $(openstack_metadata_link)",
        contain => in_dir_shell("$(openstack_cache_dir)"),
        classes => results("bundle", "copy_metadata"),
        comment => "download metadata file from openstack nova api link";

  methods:
      "create required variables"
        usebundle => guac_database_vars;

    ## BUILD CONNECTIONS INTO CLUSTER
    have_cluster_ip_list::
      "create an SSH load-balanced root connection group with session affinity=true(1)"
      	usebundle => guac_create_connection_group( "$($(params).ssh_group_name)", "BALANCING", "", "1", "$(params)" ),
        classes => if_ok("ssh_group_created");

      "create an RDP load-balanced root connection group with session affinity=true(1)"
      	usebundle => guac_create_connection_group( "$($(params).rdp_group_name)", "BALANCING", "", "1", "$(params)" ),
        classes => if_ok("rdp_group_created");
      
    ssh_group_created.have_cluster_ip_list::
      "create SSH connections to hosts within SSH load-balanced group"
      	usebundle => guac_create_connection( "$($(params).ssh_group_name)_$(cluster_ip_list)", "$(cluster_ip_list)",
					     "ssh", "$($(params).ssh_group_name)", "$(params)" );

    rdp_group_created.have_cluster_ip_list::
      "create RDP connections to hosts within RDP load-balanced group"
      	usebundle => guac_create_connection( "$($(params).rdp_group_name)_$(cluster_ip_list)", "$(cluster_ip_list)",
					     "rdp", "$($(params).rdp_group_name)", "$(params)" );
      
    ## CREATE USERS IN DATABASE AND ADD CONNECTION PERMISSIONS TO EACH USER
    any::
      "import CSV data for all students enrolled in EECS classes from ITS source file"
        usebundle => import_user_data( "$(params)" ),
        classes => if_ok("student_users_imported");

    have_cluster_ip_list.student_users_imported::
      "create each student user from imported CSV data (ensure mywsu_ids are lowercase as usernames)"
      	usebundle => guac_create_user(
    	  "$(import_user_data.student_data[$(import_user_data.row_index)][$(import_user_data.mywsu_col)])",
    	  "$(import_user_data.student_data[$(import_user_data.row_index)][$(import_user_data.fullname_col)])",
    	  "$(import_user_data.student_data[$(import_user_data.row_index)][$(import_user_data.email_col)])",
    	  "$($(params).student_user_organization)",
      	  "$($(params).student_user_role)",
          "$(params)"),
        classes => results("bundle", "student_user");

      "if user is created, add each student user to SSH load-balanced connection group"
      	usebundle => guac_add_user_to_connection( "group", "$($(params).ssh_group_name)",
      	  "$(import_user_data.student_data[$(import_user_data.row_index)][$(import_user_data.mywsu_col)])",
          "$(params)");

      "if user is created, add each student user to each SSH load-balanced connection"
      	usebundle => guac_add_user_to_connection( "connection", "$($(params).ssh_group_name)_$(cluster_ip_list)",
	  "$(import_user_data.student_data[$(import_user_data.row_index)][$(import_user_data.mywsu_col)])",
          "$(params)");

      "if user is created, add each student user to RDP load-balanced connection group"
      	usebundle => guac_add_user_to_connection( "group", "$($(params).rdp_group_name)",
      	  "$(import_user_data.student_data[$(import_user_data.row_index)][$(import_user_data.mywsu_col)])",
          "$(params)");      

      "if user is created, add each student user to each RDP load-balanced connection"
      	usebundle => guac_add_user_to_connection( "connection", "$($(params).rdp_group_name)_$(cluster_ip_list)",
	  "$(import_user_data.student_data[$(import_user_data.row_index)][$(import_user_data.mywsu_col)])",
          "$(params)");

    any::
      "delete temporary sql query and insert files from cache directory after file is older than 1 day"
        usebundle => guac_tidy ("$($(params).sql_cache_dir)", "1" );


  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_guacamole)::
      "=== $(this.bundle) ===";

      # "initial openstack metadata: $(cluster_host_data)";
      # "cleaned string 1 from openstack metadata: $(clean_cluster_string1)";
      # "cleaned string 2 from openstack metadata: $(clean_cluster_string2)";
      "cluster host ips found in openstack metadata: $(cluster_ip_list)"
      ifvarclass => "have_cluster_ip_list";

      # "mywsu_ids: $(import_user_data.student_data[$(import_user_data.row_index)][$(import_user_data.mywsu_col)])";
}

######################################################################

bundle agent guac_database_vars
{
  vars:
    ## GLOBAL PARAMETERS FOR DATABASE
      "database" string => "guacamole_db";

    ## FILE PARAMETERS
      "sql_cache_dir" string => "$(sys.workdir)/state/mysql/";
      "create_connection_group_sql" string => "$(sys.workdir)/state/mysql/guac_create_connection_group";
      "create_connection_group_template" string => "$(this.promise_dirname)/data/create_connection_group.sql.mustache";
      "create_connection_sql" string => "$(sys.workdir)/state/mysql/guac_create_connection";
      "create_connection_template" string => "$(this.promise_dirname)/data/create_connection.sql.mustache";
      "create_user_sql" string => "$(sys.workdir)/state/mysql/guac_create_user";
      "create_user_template" string => "$(this.promise_dirname)/data/create_user.sql.mustache";
      "add_user_to_connection_sql" string => "$(sys.workdir)/state/mysql/guac_add_user_to_connection";
      "add_user_to_connection_template" string => "$(this.promise_dirname)/data/add_user_to_connection.sql.mustache";
      
      "its_user_source_path" string => "/srv/cfengine/configs/user_lists/cs_ece_ee_courses_17fall_test_only.csv";
      "user_csv_fixed_file" string => "cs_ece_ee_courses_fixed.csv";
      "user_cache_dir" string => "$(sys.workdir)/state/user_lists/";

    ## USER PARAMETERS
      "student_user_organization" string => "EECS";
      "student_user_role" string => "Student";
      "username" string => "${GUAC_USERNAME}",
        comment => "Parameter token: ${GUAC_USERNAME} = username of the current Guacamole user";
      "password" string => "${GUAC_PASSWORD}",
        comment => "Parameter token: ${GUAC_PASSWORD} = password of the current Guacamole user";

    ## CONNECTION GROUP PARAMETERS
      "ssh_group_name" string => "SSH_IDE";
      "rdp_group_name" string => "RDP_IDE";

    ## GLOBAL PARAMETERS FOR ALL CONNECTIONS
      "max_connections_per_group" string => "128",
        comment => "maximum number of concurrent connections to allow to this group at any one time regardless of user
                    NULL will use the default value specified in guacamole.properties";
      "max_connections_per_user_per_group" string => "16",
        comment => "maximum number of concurrent connections to allow to this group at any one time from a single user
                    NULL will use the default value specified in guacamole.properties";
      "max_connections_per_connection" string => "32",
        comment => "maximum number of concurrent connections to allow to this connection at any one time regardless of user
                    NULL will use the default value specified in guacamole.properties";
      "max_connections_per_user_per_connection" string => "4",
        comment => "maximum number of concurrent connections to allow to this connection at any one time from a single user
                    NULL will use the default value specified in guacamole.properties";

      "enable_sftp" string => "true",
        comment => "If set to true, the user will be allowed to upload or download files from the SSH server using SFTP";

    ## GLOBAL PARAMETERS SPECIFIC FOR SSH CONNECTIONS
      "ssh_port" string => "22",
        comment => "port the SSH server is listening on. If not specified, default of 22 will be used";
      "ssh_color_scheme" string => "white-black",
        comment => "color scheme to use for the terminal emulator used by SSH connections
                    options: black-white, gray-black, green-black, white-black";
      "ssh_font_name" string => "monospace",
        comment => "name of the font to use. If not specified, default of monospace will be used";
      "ssh_font_size" string => "12",
        comment => "size of the font to use, in points. If not specified, default of 12 will be used";
      "ssh_command" string => "",
        comment => "DISABLED IN TEMPLATE: command to execute over the SSH session.
                    If not specified, the SSH session will use the user's default shell";

    ## GLOBAL PARAMETERS SPECIFIC FOR RDP CONNECTIONS
      "rdp_port" string => "3389",
        comment => "The port the RDP server is listening on. If not specified, default of 3389 will be used";
      "rdp_security" string => "rdp",
        comment => "security mode to use for the RDP connection.
                    This mode dictates how data will be encrypted and what type of authentication will be performed";
      "rdp_domain" string => "",
        comment => "DISABLED IN TEMPLATE: domain to use when attempting authentication, if any";
      "rdp_color_depth" string => "",
        comment => "DISABLED IN TEMPLATE: color depth to request in bits-per-pixel: must be 8, 16, or 24";
      "rdp_width" string => "",
        comment => "DISABLED IN TEMPLATE: width of the display to request in pixels.
                    If not specified, the width of the connecting client display will be used";
      "rdp_height" string => "",
        comment => "DISABLED IN TEMPLATE: height of the display to request in pixels.
                    If not specified, the height of the connecting client display will be used";
      "rdp_dpi" string => "",
        comment => "DISABLED IN TEMPLATE: desired effective resolution of the client display in DPI.
                    If not specified, resolution and size of the client display will be used together to determine, heuristically, an appropriate resolution for the RDP session";
      "rdp_resize_method" string => "",
        comment => "DISABLED IN TEMPLATE: method to use to update the RDP server when the width or height of the client display changes. If not specified, no action will be taken when the client display changes size. options: display-update, reconnect";

      "rdp_sftp_directory" string => "",
        comment => "DISABLED IN TEMPLATE: directory to upload files to if they are simply dragged and dropped, and thus otherwise lack a specific upload location. If not specified, default upload location of the SSH server providing SFTP will be used";
      
      "rdp_command" string => "",
        comment => "DISABLED IN TEMPLATE: full path to the program to run immediately upon connecting.
                    In guacamole_db this parameter is called initial-program";

      "rdp_enable_printing" string => "true",
        comment => "when true, RDP users can print to a virtual printer that sends a PDF containing the document printed to the Guacamole client";

      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
}

######################################################################

bundle agent guac_create_connection_group(groupname, type, parent_group, enable_session_affinity, params)
# @description: use a mustache template to add entries into required mySQL tables for a guacamole connection group "name" with "type" under a "parent group" (connection group name?), and whether "session_afinity" is required using a set of global parameters
{
  vars:
      "mysql_import_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' < ";
      "mysql_execute_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' --skip-column-names -e ";

      "mysql_group_query" string => " \"SELECT connection_group_id FROM guacamole_connection_group WHERE connection_group_name = '$(groupname)';\" ";
      "mysql_group_result" string => execresult("$(mysql_execute_cmd) $(mysql_group_query)","useshell");

    parent_group_defined::
      "mysql_parent_query" string => " \"SELECT connection_group_id FROM guacamole_connection_group WHERE connection_group_name='$(parent_group)';\" ";
      "mysql_parent_id_result" string => execresult("$(mysql_execute_cmd) $(mysql_parent_query)","useshell");

  classes:
      "group_does_not_exist"
	not => regcmp(".+","$(mysql_group_result)"),
        comment => "check mysql query result does not contain one or more characters";

      # "group_exists"
      # 	expression => regcmp(".*$(groupname).*","$(mysql_group_result)"),
      #   comment => "check mysql query result contains $(groupname)";

      "parent_group_not_defined"
	not => regcmp(".+","$(parent_group)"),
        comment => "check parent_group does not contain one or more characters";

      "parent_group_defined"
	expression => regcmp(".+","$(parent_group)"),
        comment => "check parent_group does contain one or more characters";

      # "parent_group_exists"
      # 	expression => regcmp(".+","$(mysql_parent_id_result)"),
      #   comment => "check mysql query result contains a value";
       
  files:
    group_does_not_exist::
      "$($(params).create_connection_group_sql)_$(groupname).sql"
        create => "true",
        template_method => "mustache",
        edit_template => "$($(params).create_connection_group_template)",
        classes => results("bundle", "create_connection_group_sql"),
	comment => "expand create_connection_group_sql file using template from staging cache in this promise directory
                    only if group does not already exist, and its parent group exists or it does not require a parent group";

  commands:
    create_connection_group_sql_repaired|create_connection_group_sql_kept::
      "$(mysql_import_cmd)"
        args => "$($(params).create_connection_group_sql)_$(groupname).sql",
        contain => in_shell,
      	classes => results("bundle", "create_connection_group"),
        comment => "add connection group $(groupname) into guacamole database";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_guacamole)::
      "=== $(this.bundle) ===";
      "$(groupname) connection group created in $($(params).database)"
        ifvarclass => "create_connection_group_repaired";

      "WARNING: Not adding group. $(groupname) connection group exists in database with connection_group_id: $(mysql_group_result)"
        ifvarclass => "!group_does_not_exist";

      # "WARNING: Not adding group. $(groupname) requires parent group $(parent_group) but parent does not exist"
      #   ifvarclass => "parent_group_defined.!parent_group_exists";

      "$(groupname) connection group exists in database: $(const.n) $(mysql_group_result)"
        ifvarclass => "group_exists";
}

######################################################################

bundle agent guac_create_connection(conname, hostname, protocol, parent_group, params)
# @description: use a mustache template to add entries into required mySQL tables for a guacamole connection "name" with "host" (ip address) using "protocol" (VNC, RDP, SSH) under a "parent group" (connection group name?), using a set of global parameters
{
  vars:
      "mysql_import_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' < ";
      "mysql_execute_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' --skip-column-names -e ";

      "mysql_con_query" string => " \"SELECT connection_id FROM guacamole_connection WHERE connection_name='$(conname)';\" ";
      "mysql_con_result" string => execresult("$(mysql_execute_cmd) $(mysql_con_query)","useshell");

    parent_group_defined::
      "mysql_parent_query" string => " \"SELECT connection_group_id FROM guacamole_connection_group WHERE connection_group_name='$(parent_group)';\" ";
      "mysql_parent_id_result" string => execresult("$(mysql_execute_cmd) $(mysql_parent_query)","useshell");

  classes:      
      "ssh_connection"  expression => strcmp("$(protocol)","ssh");
      "rdp_connection"  expression => strcmp("$(protocol)","rdp");

      # "mysql_query_complete"
      #   expression => isvariable( "mysql_con_result" );
      
      # "connection_exists"
      #   expression => eval( "$(mysql_con_result) > 0", "class", "infix" ),
      #   comment => "check mysql query result does not contain one or more characters";
      "connection_does_not_exist"
      	not => regcmp(".+","$(mysql_con_result)"),
        comment => "check mysql query result does not contain one or more characters";

      "parent_group_not_defined"
	not => regcmp(".+","$(parent_group)"),
        comment => "check parent_group does not contain one or more characters";

      "parent_group_defined"
	expression => regcmp(".+","$(parent_group)"),
        comment => "check parent_group does contain one or more characters";

      # "parent_group_exists"
      # 	expression => regcmp(".+","$(mysql_parent_id_result)"),
      #   comment => "check mysql query result contains a value";
      
  files:
    connection_does_not_exist::
      "$($(params).create_connection_sql)_$(conname).sql"
        create => "true",
        template_method => "mustache",
        edit_template => "$($(params).create_connection_template)",
        classes => results("bundle", "create_connection_sql"),
      	comment => "expand create_connection_sql file using template from staging cache in this promise directory";

  commands:
    (create_connection_sql_repaired|create_connection_sql_kept)::
      "$(mysql_import_cmd)"
        args => "$($(params).create_connection_sql)_$(conname).sql",
        contain => in_shell,
      	classes => results("bundle", "create_connection"),
        comment => "add connection $(conname) into guacamole database";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_guacamole)::
      "=== $(this.bundle) ===";
      "$(conname) connection created in $($(params).database)"
        ifvarclass => "create_connection_repaired";
      
      "WARNING: Not adding connection. $(conname) connection exists in database with connection_id: $(mysql_con_result)"
        ifvarclass => "!connection_does_not_exist";

      # "WARNING: Not adding connection. $(conname) requires parent group $(parent_group) but parent does not exist"
      #   ifvarclass => "parent_group_defined.!parent_group_exists";
}

######################################################################

bundle agent guac_create_user(username, full_name, email_address, organization, role, params)
# @description: use a mustache template to add entries into required mySQL tables for a guacamole user with associated details and using a set of global parameters
{
  vars:
      "mysql_import_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' < ";
      "mysql_execute_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' --skip-column-names -e ";

      "mysql_user_query" string => " \"SELECT user_id FROM guacamole_user WHERE username = '$(username)';\" ";
      "mysql_user_result" string => execresult("$(mysql_execute_cmd) $(mysql_user_query)","useshell");
      
  classes:      
      "user_does_not_exist"
	not => regcmp(".+","$(mysql_user_result)"),
        comment => "check mysql query result does not contain one or more characters";
      
  files:
    user_does_not_exist::
      "$($(params).create_user_sql)_$(username).sql"
        create => "true",
        template_method => "mustache",
        edit_template => "$($(params).create_user_template)",
        classes => results("bundle", "create_user_sql"),
  	comment => "expand create_user_sql file using template from staging cache in this promise directory";

  commands:
    create_user_sql_repaired|create_user_sql_kept::
      "$(mysql_import_cmd)"
        args => "$($(params).create_user_sql)_$(username).sql",
        contain => in_shell,
      	classes => results("bundle", "create_user"),
        comment => "add user $(username) into guacamole database";
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_guacamole)::
      "=== $(this.bundle) ===";
      "$(username) user created in $($(params).database)"
        ifvarclass => "create_user_repaired";
      
      "WARNING: Not adding user. $(username) user exists in database with user_id: $(mysql_user_result)"
        ifvarclass => "!user_does_not_exist";
}

######################################################################

bundle agent guac_add_user_to_connection(type, conname, username, params)
# @description: use a mustache template to add entries into required mySQL tables for giving a user permission to access a connection or connection group by defining type as 'connection' or 'group'
{
  vars:
      "mysql_import_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' < ";
      "mysql_execute_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' --skip-column-names -e ";

    guac_connection::
      "mysql_con_query" string => " \"SELECT guacamole_connection_permission.* FROM guacamole_connection_permission JOIN guacamole_user ON (guacamole_user.user_id = guacamole_connection_permission.user_id) JOIN guacamole_connection ON (guacamole_connection.connection_id=guacamole_connection_permission.connection_id) WHERE username='$(username)' AND connection_name='$(conname)';\" ";
    guac_group::
      "mysql_perm_query" string => " \"SELECT guacamole_connection_group_permission.* FROM guacamole_connection_group_permission JOIN guacamole_user ON (guacamole_user.user_id = guacamole_connection_group_permission.user_id) JOIN guacamole_connection_group ON (guacamole_connection_group.connection_group_id=guacamole_connection_group_permission.connection_group_id) WHERE username='$(username)' AND connection_group_name='$(conname)';\" ";

    guac_connection|guac_group::
      "mysql_perm_result" string => execresult("$(mysql_execute_cmd) $(mysql_perm_query)","useshell");

  classes:
      "guac_connection"  expression => strcmp("$(type)","connection");
      "guac_group"  expression => strcmp("$(type)","group");

      "permission_does_not_exist"
	not => regcmp(".+","$(mysql_perm_result)"),
        comment => "check mysql query result does not contain one or more characters";
      
  files:
    permission_does_not_exist::
      "$($(params).add_user_to_connection_sql)_$(username)_$(conname).sql"
        create => "true",
        template_method => "mustache",
        edit_template => "$($(params).add_user_to_connection_template)",
        classes => results("bundle", "add_user_to_connection_sql"),
	comment => "expand add_user_to_connection_sql file using template from staging cache in this promise directory";

  commands:
    add_user_to_connection_sql_repaired|add_user_to_connection_sql_kept::
      "$(mysql_import_cmd)"
        args => "$($(params).add_user_to_connection_sql)_$(username)_$(conname).sql",
        contain => in_shell,
      	classes => results("bundle", "add_user_to_connection"),
        comment => "give user permission to access connection or group $(conname) into guacamole database";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_guacamole)::
      "=== $(this.bundle) ===";
      "$(username) given READ access to $(conname) connection"
        ifvarclass => "guac_connection.add_user_to_connection_repaired";
      "$(username) given READ access to $(conname) connection group"
        ifvarclass => "guac_group.add_user_to_connection_repaired";
      
      "ERROR: type of '$(type)' found. Type must be defined as 'connection' or 'group'"
        ifvarclass => "!guac_connection.!guac_group";      
      "WARNING: Not adding connection permission. $(username) and $(conname) permission exists in database: $(mysql_perm_result)"
        ifvarclass => "!permission_does_not_exist";
}

######################################################################

bundle agent import_user_data(params)
# @description: pulls in ITS .csv source file as per the file sent for uaf2 integration
# Note: for readcsv function, CSV file must have ^M (DOS) EOL terminators (CRLF = /r/n) as per RFC 4180
# This bundle uses a perl command to convert the ITS source file from /n to /r/n at end of lines 
{
  vars:
    ## CSV DEFINED COLUMNS
      "mywsu_col" string => "0";
      "fullname_col" string => "3";
      "email_col" string => "5";

    ## COMMANDS
      "perl_lc_mywsu_cmd" string =>"perl -F, -lane '$F[$(mywsu_col)]=~s/(\w+)/lc($1)/ge; print join(\",\",@F);' ";
      "perl_crlf_fix_cmd" string => "perl -pe 's|\n|\r\n|;' ";

    ## FILES
      "user_csv_source_cache" string => lastnode( "$($(params).its_user_source_path)", "/" );
      "user_csv_fixed_file" string => "$($(params).user_csv_fixed_file)";

    ## CSV DATA MANIPULATION
    csv_fixed_file_exists::
      "student_data" data => readcsv( "$($(params).user_cache_dir)/$(user_csv_fixed_file)" );
      # "csv_str" string => format("%S", "student_data");

      "row_index" slist => getindices( "student_data" );
        # action => if_elapsed("60");

  classes:
      "user_csv_source_cache_exists"
	expression => fileexists( "$($(params).user_cache_dir)/$(user_csv_source_cache)" );

      "csv_fixed_file_exists"
      	expression => fileexists( "$($(params).user_cache_dir)/$(user_csv_fixed_file)" );
      
  files:
      "$($(params).user_cache_dir)/."
	create => "true",
        comment => "ensure the user_cache directory exists";
      
      "$($(params).user_cache_dir)/$(user_csv_source_cache)"
	perms => mo("400","root"),
	copy_from => secure_cp( "$($(params).its_user_source_path)", $(sys.policy_hub) ),
      	classes => results("bundle", "user_csv_cache"),
	# action => if_elapsed("60"),
	comment => "perform a secure remote copy of the ITS user_list csv file";

  commands:
    !csv_fixed_file_exists|user_csv_cache_repaired::
      "$(perl_lc_mywsu_cmd) $(user_csv_source_cache)"
        args => "| $(perl_crlf_fix_cmd) > $(user_csv_fixed_file)",
        contain => in_dir_shell( "$($(params).user_cache_dir)" ),
      	classes => results("bundle", "csv_fixed"),
        comment => "ensure myWSU_IDs are lowercase and turn all \n in file to \r\n as required in CSV standard RFC 4180";
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_guacamole)::
      "=== $(this.bundle) ===";

      "student user list csv file exists in cache"
	ifvarclass => "csv_fixed_file_exists";
      
      # "csv_str: $(csv_str)";
      # "csv_data = all rows/all cols: $(student_data[$(student_row_index)])";
}

######################################################################

bundle agent guac_tidy(cdir, day)
{
# @description: delete all guac sql query files after specified days
  files:
      "$(cdir)/*guac*"
	pathtype => "regex",
        file_select => days_old( "$(day)" ),
	delete => tidy;

  reports:
   (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
      
    (DEBUG|DEBUG_guacamole)::
}

######################################################################
