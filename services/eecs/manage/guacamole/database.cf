##############################################################################
#
#   manage/guacamole/database.cf - EECS guacamole mySQL database manipulation
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################



# PROTIP: Use body file control to help make modular policy.
# "There can be only one" body common control per policy entry (promises.cf,update.cf)

# TESTING ONLY:INPUT STANDARD LIBRARY and HOST CLASSIFICATION (Remove after testing)
body file control
{
	inputs => { "$(sys.libdir)/stdlib.cf",
		    "database.cf",
		  "$(sys.workdir)/inputs/services/eecs/classification/host_role/main.cf" };
}

######################################################################
# Public entry point: 
######################################################################

# NOTES for future development of configuration:
# 1. how to get feedback from database?

bundle agent guac_database
# bundle agent web_server(state)
# @description: manipulates underlying mySQL database for Guacamole server
# NOTE: uses the CFE service state on/off for enabling configuration!!
{

  vars:      
      "apache_exec" string => "/usr/sbin/apache2";

      ## TESTING VARS ONLY
      # "username" string => "guacadmin";
      "username" string => "d693f574";
      "group_name" string => "testsubgroup";
      "connection_name" string => "sshtestsub1";
      "host_ip" string => "10.10.10.10";
      "protocol" string => "ssh";
      # "parent_group" string => "";
      "parent_group" string => "testgroup2";
      "params" string => "guac_database_vars";

      ## OPENSTACK METADATA
      "openstack_metadata_link" string => "http://169.254.169.254/openstack/latest/meta_data.json";
      "openstack_metadata_cache" string => "meta_data.json";
      "openstack_cache_dir" string => "$(sys.workdir)/state/openstack/";

      "openstack_metadata" data => readjson("$(openstack_cache_dir)$(openstack_metadata_cache)",1M),
        comment => "pull in external json file from OpenStack Nova API",
        ifvarclass => "metadata_cache_exists";

      "json_str_openstack_metadata" string => format("%S", "openstack_metadata");
      
      "cluster_host_data"
        data => mergedata( "openstack_metadata[meta][cluster_ips]" ),
        comment => "create data subset of cluster host ip addresses from openstack metadata";

      # "cleaned_cluster_host_ips" string => regex_replace( "$(cluster_host_data)", "[\"", "", "T" );
      "cluster_host_ips" slist => splitstring( "$(cleaned_cluster_host_ips)", ",", "1000" );
      
  classes:      
      
      # DEFINE SERVER STATES
      # "on"  expression => "any";
      # "on"  expression => strcmp("$(state)","on");
      # "off" expression => strcmp("$(state)","off");

      "openstack_cache_exists"
      	expression => fileexists( "$(openstack_cache_dir)/." );

      "metadata_cache_exists"
      	expression => fileexists( "$(openstack_cache_dir)$(openstack_metadata_cache)" );

  files:
      "$(openstack_cache_dir)/."
        create => "true";
      
  commands:
    openstack_cache_exists::
      "/usr/bin/wget -q --timeout=10 -O $(openstack_metadata_cache) $(openstack_metadata_link)" 
        contain => in_dir_shell("$(openstack_cache_dir)"),
        classes => results("bundle", "copy metadata"),
        comment => "download metadata file from openstack nova api link";


  methods:
      # "create a test connection group"
      # 	usebundle => guac_create_connection_group( $(group_name), "ORGANIZATIONAL", $(parent_group), "FALSE", $(params) ),
      #   classes => if_ok("connection_group_created");
      
      # "create a test connection"
      # 	usebundle => guac_create_connection( $(connection_name), $(host_ip), $(protocol), $(parent_group), $(params) ),
      #   classes => if_ok("connection_created");

      # "add user to test connection"
      # 	usebundle => guac_add_user_to_connection( $(username),$(connection_name), $(params) ),
      #   classes => if_ok("add_user_to_connection");


  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_guacamole)::
      "=== $(this.bundle) ===";

      "cluster host ips found in openstack metadata: $(cluster_host_ips)";

      # "web server (apache2) is not installed on this host"
      #   ifvarclass => "!apache_exists";
      # "web server (apache2) is turned off"
      #   ifvarclass => "web_server_off";
      # "web server (apache2) is turned on and running"
      #   ifvarclass => "web_server_on";
      # "web server (apache2) restarted due to configuration change"
      #   ifvarclass => "web_server_restart";
      # "web server (apache2) reloaded due to configuration change"
      #   ifvarclass => "web_server_reload";
}

######################################################################

bundle agent guac_database_vars
{
  vars:
    ## FILE PARAMETERS
      "create_connection_group_sql" string => "$(sys.workdir)/state/mysql/guac_create_connection_group.sql";
      "create_connection_group_template" string => "$(this.promise_dirname)/data/create_connection_group.sql.mustache";
      "create_connection_sql" string => "$(sys.workdir)/state/mysql/guac_create_connection.sql";
      "create_connection_template" string => "$(this.promise_dirname)/data/create_connection.sql.mustache";
      "add_user_to_connection_sql" string => "$(sys.workdir)/state/mysql/guac_add_user_to_connection.sql";
      "add_user_to_connection_template" string => "$(this.promise_dirname)/data/add_user_to_connection.sql.mustache";
      
    ## GLOBAL PARAMETERS FOR DATABASE
      "database" string => "guacamole_db";

    ## GLOBAL PARAMETERS FOR ALL CONNECTIONS
      "username" string => "${GUAC_USERNAME}",
        comment => "Parameter token: ${GUAC_USERNAME} = username of the current Guacamole user";
      "password" string => "${GUAC_PASSWORD}",
        comment => "Parameter token: ${GUAC_PASSWORD} = password of the current Guacamole user";

      "max_connections" string => "",
        comment => "maximum number of concurrent connections to allow to this connection at any one time regardless of user
                    NULL will use the default value specified in guacamole.properties";
      "max_connections_per_user" string => "",
        comment => "maximum number of concurrent connections to allow to this connection at any one time from a single user
                    NULL will use the default value specified in guacamole.properties";

      "enable_sftp" string => "true",
        comment => "If set to true, the user will be allowed to upload or download files from the SSH server using SFTP";

    ## GLOBAL PARAMETERS SPECIFIC FOR SSH CONNECTIONS
      "ssh_port" string => "22",
        comment => "port the SSH server is listening on. If not specified, default of 22 will be used";
      "ssh_color_scheme" string => "green-black",
        comment => "color scheme to use for the terminal emulator used by SSH connections
                    options: black-white, gray-black, green-black, white-black";
      "ssh_font_name" string => "monospace",
        comment => "name of the font to use. If not specified, default of monospace will be used";
      "ssh_font_size" string => "12",
        comment => "size of the font to use, in points. If not specified, default of 12 will be used";
      "ssh_command" string => "",
        comment => "DISABLED IN TEMPLATE: command to execute over the SSH session.
                    If not specified, the SSH session will use the user's default shell";

    ## GLOBAL PARAMETERS SPECIFIC FOR RDP CONNECTIONS
      "rdp_port" string => "3389",
        comment => "The port the RDP server is listening on. If not specified, default of 3389 will be used";
      "rdp_security" string => "rdp",
        comment => "security mode to use for the RDP connection.
                    This mode dictates how data will be encrypted and what type of authentication will be performed";
      "rdp_domain" string => "",
        comment => "DISABLED IN TEMPLATE: domain to use when attempting authentication, if any";
      "rdp_color_depth" string => "",
        comment => "DISABLED IN TEMPLATE: color depth to request in bits-per-pixel: must be 8, 16, or 24";
      "rdp_width" string => "",
        comment => "DISABLED IN TEMPLATE: width of the display to request in pixels.
                    If not specified, the width of the connecting client display will be used";
      "rdp_height" string => "",
        comment => "DISABLED IN TEMPLATE: height of the display to request in pixels.
                    If not specified, the height of the connecting client display will be used";
      "rdp_dpi" string => "",
        comment => "DISABLED IN TEMPLATE: desired effective resolution of the client display in DPI.
                    If not specified, resolution and size of the client display will be used together to determine, heuristically, an appropriate resolution for the RDP session";
      "rdp_resize_method" string => "",
        comment => "DISABLED IN TEMPLATE: method to use to update the RDP server when the width or height of the client display changes. If not specified, no action will be taken when the client display changes size. options: display-update, reconnect";

      "rdp_sftp_directory" string => "",
        comment => "DISABLED IN TEMPLATE: directory to upload files to if they are simply dragged and dropped, and thus otherwise lack a specific upload location. If not specified, default upload location of the SSH server providing SFTP will be used";
      
      "rdp_command" string => "",
        comment => "DISABLED IN TEMPLATE: full path to the program to run immediately upon connecting.
                    In guacamole_db this parameter is called initial-program";

      "rdp_enable_printing" string => "true",
        comment => "when true, RDP users can print to a virtual printer that sends a PDF containing the document printed to the Guacamole client";

      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
}

######################################################################

bundle agent guac_create_connection_group(groupname, type, parent_group, session_afinity, params)
# @description: use a mustache template to add entries into required mySQL tables for a guacamole connection group "name" with "type" under a "parent group" (connection group name?), and whether "session_afinity" is required using a set of global parameters
{
  vars:
      "mysql_import_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' < ";
      "mysql_execute_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' --skip-column-names -e ";

      "mysql_group_query" string => " \"select connection_group_id from guacamole_connection_group where connection_group_name = '$(groupname)';\" ";
      "mysql_group_result" string => execresult("$(mysql_execute_cmd) $(mysql_group_query)","useshell");

    parent_group_defined::
      "mysql_parent_query" string => " \"select connection_group_id from guacamole_connection_group where connection_group_name = '$(parent_group)';\" ";
      "mysql_parent_id_result" string => execresult("$(mysql_execute_cmd) $(mysql_parent_query)","useshell");

  classes:
      "group_does_not_exist"
	not => regcmp(".+","$(mysql_group_result)"),
        comment => "check mysql query result does not contain one or more characters";

      # "group_exists"
      # 	expression => regcmp(".*$(groupname).*","$(mysql_group_result)"),
      #   comment => "check mysql query result contains $(groupname)";

      "parent_group_not_defined"
	not => regcmp(".+","$(parent_group)"),
        comment => "check parent_group does not contain one or more characters";

      "parent_group_defined"
	expression => regcmp(".+","$(parent_group)"),
        comment => "check parent_group does contain one or more characters";

      "parent_group_exists"
	expression => regcmp(".+","$(mysql_parent_id_result)"),
        comment => "check mysql query result contains a value";
       
  files:
    group_does_not_exist.(parent_group_exists|!parent_group_defined)::
      "$($(params).create_connection_group_sql)"
        create => "true",
        template_method => "mustache",
        edit_template => "$($(params).create_connection_group_template)",
        classes => results("bundle", "create_connection_group_sql"),
	comment => "expand create_connection_group sql file using template from staging cache in this promise directory
                    only if group does not already exist, and its parent group exists or it does not require a parent group";

  commands:
    create_connection_group_sql_repaired|create_connection_group_sql_kept::
      "$(mysql_import_cmd)"
        args => "$($(params).create_connection_group_sql)",
        contain => in_shell,
      	classes => results("bundle", "create_connection_group"),
        comment => "add connection group $(groupname) into guacamole database";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_guacamole)::
      "=== $(this.bundle) ===";
      "$(groupname) connection group created in $($(params).database)"
        ifvarclass => "create_connection_group_repaired";

      "WARNING: Not adding group. $(groupname) connection group exists in database: $(const.n) $(mysql_group_result)"
        ifvarclass => "!group_does_not_exist";

      "WARNING: Not adding group. $(groupname) requires parent group $(parent_group) but parent does not exist"
        ifvarclass => "parent_group_defined.!parent_group_exists";

      "$(groupname) connection group exists in database: $(const.n) $(mysql_group_result)"
        ifvarclass => "group_exists";
}

######################################################################

bundle agent guac_create_connection(conname, hostname, protocol, parent_group, params)
# @description: use a mustache template to add entries into required mySQL tables for a guacamole connection "name" with "host" (ip address) using "protocol" (VNC, RDP, SSH) under a "parent group" (connection group name?), using a set of global parameters
{
  vars:
      "mysql_import_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' < ";
      "mysql_execute_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' --skip-column-names -e ";

      "mysql_con_query" string => " \"select connection_id from guacamole_connection where connection_name = '$(conname)';\" ";
      "mysql_con_result" string => execresult("$(mysql_execute_cmd) $(mysql_con_query)","useshell");

    parent_group_defined::
      "mysql_parent_query" string => " \"select connection_group_id from guacamole_connection_group where connection_group_name = '$(parent_group)';\" ";
      "mysql_parent_id_result" string => execresult("$(mysql_execute_cmd) $(mysql_parent_query)","useshell");

  classes:      
      "ssh_connection"  expression => strcmp("$(protocol)","ssh");
      "rdp_connection"  expression => strcmp("$(protocol)","rdp");

      "connection_does_not_exist"
	not => regcmp(".+","$(mysql_con_result)"),
        comment => "check mysql query result does not contain one or more characters";

      "parent_group_not_defined"
	not => regcmp(".+","$(parent_group)"),
        comment => "check parent_group does not contain one or more characters";

      "parent_group_defined"
	expression => regcmp(".+","$(parent_group)"),
        comment => "check parent_group does contain one or more characters";

      "parent_group_exists"
	expression => regcmp(".+","$(mysql_parent_id_result)"),
        comment => "check mysql query result contains a value";
      
  files:
    connection_does_not_exist.(parent_group_exists|!parent_group_defined)::
      "$($(params).create_connection_sql)"
        create => "true",
        template_method => "mustache",
        edit_template => "$($(params).create_connection_template)",
        classes => results("bundle", "create_connection_sql"),
	comment => "expand create_connection sql file using template from staging cache in this promise directory";

  commands:
    create_connection_sql_repaired|create_connection_sql_kept::
      "$(mysql_import_cmd)"
        args => "$($(params).create_connection_sql)",
        contain => in_shell,
      	classes => results("bundle", "create_connection"),
        comment => "add connection $(conname) into guacamole database";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_guacamole)::
      "=== $(this.bundle) ===";
      "$(conname) connection created in $($(params).database)"
        ifvarclass => "create_connection_repaired";
      
      "WARNING: Not adding connection. $(conname) connection exists in database: $(const.n) $(mysql_con_result)"
        ifvarclass => "!connection_does_not_exist";

      "WARNING: Not adding connection. $(conname) requires parent group $(parent_group) but parent does not exist"
        ifvarclass => "parent_group_defined.!parent_group_exists";
}

######################################################################

bundle agent guac_add_user_to_connection(username, conname, type, params)
# @description: use a mustache template to add entries into required mySQL tables for giving a user permission to access a connection or connection group by defining type as 'connection' or 'group'
{
  vars:
      "mysql_cmd" string => "/usr/bin/mysql -u root ";
      "mysql_import_cmd" string => "$(mysql_cmd) \"$($(params).database)\" < ";

  classes:
      "guac_connection"  expression => strcmp("$(type)","connection");
      "guac_group"  expression => strcmp("$(type)","group");
      
  files:
      "$($(params).add_user_to_connection_sql)"
        create => "true",
        template_method => "mustache",
        edit_template => "$($(params).add_user_to_connection_template)",
        classes => results("bundle", "add_user_to_connection_sql"),
	comment => "expand add_user_to_connection sql file using template from staging cache in this promise directory";

  commands:
    add_user_to_connection_sql_repaired|add_user_to_connection_sql_kept::
      "$(mysql_import_cmd)"
        args => "$($(params).add_user_to_connection_sql)",
        contain => in_shell,
      	classes => results("bundle", "add_user_to_connection"),
        comment => "give user permission to access connection or group $(conname) into guacamole database";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_guacamole)::
      "=== $(this.bundle) ===";
      "$(username) has been given READ access to $(conname) connection"
        ifvarclass => "guac_connection.add_user_to_connection_repaired";
      "$(username) has been given READ access to $(conname) connection group"
        ifvarclass => "guac_group.add_user_to_connection_repaired";
      
      "ERROR: type of $(type) found. Type must be defined as 'connection' or 'group'"
        ifvarclass => "!guac_connection.!guac_group";
      
}
