##############################################################################
#
#   manage/grub/main.cf - EECS grub configuration
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################



# PROTIP: Use body file control to help make modular policy.
# "There can be only one" body common control per policy entry (promises.cf,update.cf)

# TESTING ONLY:INPUT STANDARD LIBRARY and HOST CLASSIFICATION (Remove after testing)
body file control
{
      inputs => { "$(sys.libdir)/stdlib.cf",
		  "$(sys.workdir)/inputs/services/eecs/classification/host_role/main.cf" };
}

######################################################################
# Public entry point: config_grub
######################################################################

# NOTES for future development of configuration:
# 1.


bundle agent config_grub
# @description: configures grub and comments out quiet/splash boot options.
# Tries to do as much as possible within CFE, so it can track changes and errors
{
  vars:
      "grub_config" string => "/tmp/grub"; # change to "/etc/default/grub" after testing

      "quiet_mode_patterns" slist => {
	"GRUB_CMDLINE_LINUX_DEFAULT=\"quiet\"",
	"GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash\"",
	"GRUB_CMDLINE_LINUX_DEFAULT=\"splash\"",
	"rhgb*", },
        comment => "a set of key lines which need to be commented out from the grub_config file";

      "cache_dir" string => "$(sys.workdir)/state/boot/grub/";
      
    debian::
      "grub_update_cmd" string => "/usr/sbin/update-grub"; 

    redhat::
      "grub_update_cmd" string => "/sbin/grub2-mkconfig"; 
      "cached_cfg" string => "grub.cfg.tmp";
      "grub_cfg" string => "/tmp/grub.cfg"; # change to "/boot/grub2/grub.cfg" after testing
      
  files:
      "$(cache_dir)/."
        create => "true",
        comment => "ensure the cache directory is created on the system of when it is needed";
      
      "$(grub_config)"
        create => "false",
        edit_line => comment_lines_matching("@(config_grub.quiet_mode_patterns)","#"),
	classes => results("bundle", "grub_config_file"),
	comment => "ensure any quiet mode lines are commented out. This will also create a grub.cf-before-edit backup file. ALTERNATIVE IDEA: you could use set_line_based() to set GRIB_CMDLINE_LINUX_DEFAULT= to nothing";

    redhat::
      "$(grub_cfg)"
	perms => mog( "644", "root", "root"),
	comment => "have cfe always ensure correct permissions on this file";

    redhat.grub_update_repaired::
      "$(grub_cfg)"
        create => "true",
        copy_from => local_dcp( "$(cache_dir)$(cached_cfg)" ),
	classes => results("bundle", "grub_cfg"),
	comment => "Overwrite system grub.cfg with temporary cache file only if grub update completed successfully";
      

  commands:
    redhat.grub_config_file_repaired::
      "$(grub_update_cmd) > $(cached_cfg)"
        contain => in_dir_shell( "$(cache_dir)" ),
	classes => results("bundle", "grub_update"),
        comment => "write to a temporary cache file prior to overwriting the system grub.cfg file";

    debian.grub_config_file_repaired::
      "$(grub_update_cmd)"
      classes => results("bundle", "grub_update");
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
    (inform_mode|verbose_mode).!redhat.!debian::
      "$(this.bundle): WARN: cannot configure grub on this OS platform";
      
    (DEBUG|DEBUG_grub)::
      "=== $(this.bundle) ===";
    (DEBUG|DEBUG_grub).grub_update_repaired::
      "$(grub_config) configuration and grub2 was updated";

    (DEBUG|DEBUG_grub).grub_cfg_repaired::
      "$(grub_cfg) was updated";
      
}


######################################################################
