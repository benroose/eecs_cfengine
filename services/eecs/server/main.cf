##############################################################################
#
#   server/main.cf - EECS server configuration
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################



# PROTIP: Use body file control to help make modular policy.
# "There can be only one" body common control per policy entry (promises.cf,update.cf)

# TESTING ONLY:INPUT STANDARD LIBRARY (Remove after testing)
body file control
{
      inputs => { "$(sys.libdir)/stdlib.cf" };
}

######################################################################
# Public entry point: none
######################################################################

# NOTES for future development of configuration:
# 1.


bundle server host_key_access
# @description: share host key specific directory only to that host
{

  vars:
      "key_dist"
      string => "$(sys.workdir)/host_by_key/$(connection.key)/",
      comment => "This is where agents can access host specific files.";

      
  access:

      # It's important that this path have $(connection.key) in it!
      "$(key_dist)"
      admit_keys =>  { $(connection.key) },
                    comment => "Grant each host to access its own copy of the ldap client files.
                                We assume that each host has a unique keypair";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_access)::

}

######################################################################

bundle server srv_paths_access
# @description: share specific directories in /srv/cfengine on policy hub to all hosts
{

  vars:

    policy_server::
      "path[software_packages]"
        string => "/srv/cfengine/packages",
        comment => "Define software repository source location";

      "path[system_configs]"
        string => "/srv/cfengine/configs",
        comment => "Define system and user configuration repository source location";

      "paths"
        slist => getvalues(path);
      
  access:

    any::
      "$(paths)"
      handle => "server_access_grant_locations_to_hosts",
      admit => { ".*$(def.domain)", @(def.acl) },
      comment => "Grant access to directory paths for all hosts";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_access)::

}

######################################################################

bundle agent config_policy_server
# @description: ensure custom elements for policy hub are running
{
  vars:
      "cf_pwhash_file" string => "/usr/local/bin/cf-pwhash.sh";
      "cf_pwhash_template" string => "$(this.promise_dirname)/data/cf-pwhash.sh.mustache";

      "master_root_passwd_location" string => "/root/master_root_passwd";

      "host_by_key_dir" string => "/var/cfengine/host_by_key/";

  files:
    policy_server::
      "$(host_by_key_dir)/."
	create => "true",
        comment => "ensure host_by_key directory exists";

      "$(master_root_passwd_location)"
        perms => mog("400","root", "root"),
        comment => "ensure restricted permissions on root password file";

      "$(cf_pwhash_file)"
        create => "true",
        perms => mog("700","root", "root"),
        template_method => "mustache",
        edit_template => "$(cf_pwhash_template)",
      # action => if_elapsed("60"),
        classes => results("bundle", "cf_pwhash_file"),
        comment => "expand pwhash script to /usr/local/bin using template in this promise directory";
      
  methods:

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_config)::
      "=== $(this.bundle) ===";
}

######################################################################
